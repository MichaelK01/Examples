(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    483200,       9685]
NotebookOptionsPosition[    464342,       9411]
NotebookOutlinePosition[    464771,       9428]
CellTagsIndexPosition[    464728,       9425]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Support Vector Machines", "Title",
 CellChangeTimes->{{3.822981123991681*^9, 
  3.822981127870563*^9}},ExpressionUUID->"289eaf38-3e93-40a8-bc2b-\
d9c992b97006"],

Cell["\<\
In this notebook we will develop support vector machine models for several \
datasets by using them to formulate a constrained optimisation problem. \
First, we review how constrained optimisation is done in Mathematica.\
\>", "Text",
 CellChangeTimes->{{3.8229929850392323`*^9, 3.822993064350775*^9}, {
  3.822993467940414*^9, 
  3.8229934796060667`*^9}},ExpressionUUID->"ef24bbba-1885-49f3-bd5c-\
aeaabe0bc185"],

Cell[CellGroupData[{

Cell["Constrained Optimisation", "Section",
 CellChangeTimes->{{3.8229934593339653`*^9, 
  3.822993463574456*^9}},ExpressionUUID->"bde7937b-f30f-4050-93b6-\
58fce63e9674"],

Cell[TextData[{
 "Consider the problem of minimising ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "2"], "+", 
    SuperscriptBox["y", "2"]}], TraditionalForm]],ExpressionUUID->
  "97fd13ae-a8c4-45f0-bfa8-25c24353824b"],
 " subject to the constraints ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"3", "x"}], "+", 
     RowBox[{"2", "y"}]}], "\[GreaterEqual]", "7"}], TraditionalForm]],
  ExpressionUUID->"36983e70-4823-425b-b43d-e06434e46d92"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"x", "+", 
     RowBox[{"2", "y"}]}], "\[GreaterEqual]", "6"}], TraditionalForm]],
  ExpressionUUID->"91b1bb6b-a7e4-4ce5-af40-72ebd5063be6"],
 ". We can solve this using NMinimize:"
}], "Text",
 CellChangeTimes->{{3.8229935434061613`*^9, 3.82299355669022*^9}, {
  3.8229944857040873`*^9, 
  3.822994533796236*^9}},ExpressionUUID->"cadd491c-50ed-4874-93d3-\
6fd1c6d20aee"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NMinimize", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      SuperscriptBox["x", "2"], "+", 
      SuperscriptBox["y", "2"]}], ",", 
     RowBox[{"And", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"3", "x"}], "+", 
         RowBox[{"2", "y"}]}], "\[GreaterEqual]", "7"}], ",", 
       RowBox[{
        RowBox[{"x", "+", 
         RowBox[{"2", "y"}]}], "\[GreaterEqual]", "6"}]}], "]"}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8229951145159388`*^9, 3.8229951432131443`*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"a037800d-9225-49ab-af5d-3c072ac2e1ca"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7.2000000013477745`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "\[Rule]", "1.2000000008838432`"}], ",", 
     RowBox[{"y", "\[Rule]", "2.399999999838865`"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.854700741844746*^9},
 CellLabel->"Out[47]=",ExpressionUUID->"59ec4741-afaa-4bc2-adc5-669617301869"]
}, Open  ]],

Cell["\<\
Let\[CloseCurlyQuote]s visualise the solution along with the constraints and \
the function we are trying to minimise.\
\>", "Text",
 CellChangeTimes->{{3.822994555250189*^9, 
  3.822994574520455*^9}},ExpressionUUID->"395ea9a3-acfc-487f-b9f9-\
78cf4694122f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"Plot3D", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       SuperscriptBox["x", "2"], "+", 
       SuperscriptBox["y", "2"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", "0", ",", "5"}], "}"}], ",", 
     RowBox[{"RegionFunction", "\[Rule]", 
      RowBox[{"Function", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"x", ",", "y"}], "}"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"3", "x"}], "+", 
           RowBox[{"2", "y"}]}], "\[GreaterEqual]", "7"}], "&&", 
         RowBox[{
          RowBox[{"x", "+", 
           RowBox[{"2", "y"}]}], "\[GreaterEqual]", "6"}]}]}], "]"}]}]}], 
    "]"}], ",", 
   RowBox[{"ListPointPlot3D", "[", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"1.2", ",", "2.4", ",", "7.2"}], "}"}], "}"}], "]"}], ",", 
   RowBox[{"Graphics3D", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Opacity", "[", "0.5", "]"}], ",", "Gray", ",", 
      RowBox[{"InfinitePlane", "[", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"x", ",", 
           RowBox[{
            FractionBox["1", "2"], " ", 
            RowBox[{"(", 
             RowBox[{"7", "-", 
              RowBox[{"3", " ", "x"}]}], ")"}]}], ",", 
           RowBox[{"RandomReal", "[", "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"x", ",", "3"}], "}"}]}], "]"}], "]"}]}], "}"}], "]"}], ",", 
   RowBox[{"Graphics3D", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Opacity", "[", "0.5", "]"}], ",", "Gray", ",", 
      RowBox[{"InfinitePlane", "[", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"x", ",", 
           RowBox[{
            FractionBox["1", "2"], " ", 
            RowBox[{"(", 
             RowBox[{"6", "-", " ", "x"}], ")"}]}], ",", 
           RowBox[{"RandomReal", "[", "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"x", ",", "3"}], "}"}]}], "]"}], "]"}]}], "}"}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8229937075259047`*^9, 3.822993739876099*^9}, {
  3.8229937757712803`*^9, 3.82299383915158*^9}, {3.822993923965261*^9, 
  3.822994019913948*^9}, {3.822994061179549*^9, 3.822994144933711*^9}, {
  3.822994399778596*^9, 3.822994466142171*^9}, {3.8229951578965178`*^9, 
  3.8229951778769207`*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"9ca59a21-1e5a-421a-a381-c57d6a5d6aa4"],

Cell[BoxData[
 Graphics3DBox[{{GraphicsComplex3DBox[CompressedData["
1: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
/7FnqyOWO/BjhfFLTsQ5Y/kC7wrM23T7mCvdL8XwhsC7LGN5Dywv4C61VfMW
hdB7KtCe0tMibU+p/sAdZn0pVY+i91QAj8jl3/hqOBx1Nuu8slq8cDCZKakm
nv3SDnUG3nF2XrX4NTvUGfiCBwfSMv74IaAzcMXOb6vr39qjzsAnpyiVxd11
QJ2BO64ZuCjwC4fui2X4lQ9VS1LGOaHOwKuE9vQ4o87AU14/3lr1wRV1Bi5Y
Kn+qUc4DdQY+x2XbNhN3gjoDt4jq6xbf5Yk6A78b8HR7igy9pwK40fchky8e
90GdgQeR2/7Jwb6os57BOzvR2j/+1Lg9ak1zOKgncKUtbc2BFfTeD+DX84a/
OrjIkd43x/DffvP1rSY5oZ7A33mFlsnHO6OewKdnGlV4vKf3fgCPiyw0u5Hq
hnoCtzps+jklxgP1BO6lfok1fixBPYG7Hrjmun49vfcDuGil8YnQ1/TeD+Dp
eSz3jxN9UE/gv8Z7isl9pfd+AB88u++p7vERpCL22IGcIHky4pmWYxLrO3eV
LllUlGhNdBfWnNiqPhh52QDfUNOFduT1wccJPqmKyM0eld70O8Ahex4+CfjZ
pYT8UvLiiDEyLqRaqfX4wzoZjMtk1qce2dJsRnyXtU10LRyE/Od4ZeN3e//4
8wt61zx5qIA8aPKFgXOX2xHVgz+nbnalcd/UO5p+7vs45HHFLxuvMzTum7py
ziYdMRdSGOMlW8YehPHavRxXeb0X1mT/33FdAbnyKXOF5VftSMABfU5NM40H
DWytuZHlHKJQwR6UGkTjvhq2RPkFbRfC3z9SUfUojb9Gh3Eezld3JKPLRzVW
ytE4a9DSDN7DmS7kzSg/08KgLi7480/GWCdMVdMhpfKjNx1Q/IXcK+Km6Lbp
emTqF+NlBXUs9P/jpi/PWq9jQLyzLZ7uOUDjpuiDhQG/7czJVTnr9eJxND7K
6rcZModrTSwW2TpET6Bx0LVhAcHqJ23JsSr7+ncWNN4J38djaY9xILL7Djw4
KU7jmuw18iJLHJ1ISdnBY9OjafzCrz4ZMjjMlRmHaLwjM891QGyZC0nuPRSv
XEvjF+VUeVXWIw/ySK50Gev1N4xfXmW8uWQlrkuqeJ/3C9idyO9wVpeZndQj
12Wbe/MEvcg/7L+7t/gBmzxuWG7B47EwXpDf83vGtvVG5FRkcnN/ngzytzd/
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
Bzj7+tSi8lAO+X+bXeSn
     "], {{
       {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
         GrayLevel[1], 3], 
        StyleBox[GraphicsGroup3DBox[
          TagBox[{Polygon3DBox[CompressedData["
1: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
a+9WrNsJnNOY9gzHzcF2pW1rYPD+lR7YxPi9dS1wXLTuWpP3yx38/zPYN1ir
S191zftrDPyVrNHXg3/RWvHfLPCSbIeyx5Pl70rncOeC/4HDaX8y7hCOn9d6
Ks4rdyms/bTHXwFb0hdL79uzpB1L+74/onV7S34q0XdG6dyhgvysdCi8LVix
tB9ZFa2bN0ovlB6nMa2lCUtfbxtp2dL5Q01+9iqtmWqDu5f2iVcG+xPpu2uD
57w++DoH5GtNztfSNddGP8evrOFj9DVgzASwSunn0bNoPRqWXhOtQaO8Dv8q
Z4GvVlwCtyvtb//h+Gz4BsUBsG5p7aucR/f+arCeGq+9LCeSry1/rrXcN6/n
mvyuH856RvYqTZNK35/uTRNWymur/Pp25lvLfL/n9dd7mJptQLYwi/8PL30P
eifH5nN3Kv2O9VzVStuBnndd9DPpWS4tnd/1D85tVUd4AzyT/uPzf9uXtmPZ
sOLgW4XtrTn3NJTzLk7OfaT/pQ/rKzbQHtX98//R8KnBNYRJea9spm1b2pb+
yXagdfwpX1P3dUayf70QrFXatvSuWyTnZO3B1rSLStvYmfCbFO+l40rbnOxt
l9I2J3ublhxXaiXv3c15P8v//JV9wpLgHGEbxiwLzpW2hS8K1upbwb8Pzvu2
hofoXFJ67yh4p8I6qmGOZdJjdaNjkPTYeck56/XgntExSBq1Udb/0mb14ecW
1qvS9V209qXzX8WE66QPg+sPCf6ndF9hLbopOBeWRv0rOJ+Vdr0tuSayPbgS
rEt/ZXiZz+2ndxCteaSN5wXn3VvAvw3OjyvCvw72RRWk/ZLzqs7gucm51OXg
7tHxWnp1RHIuqtzk4Gg9Jk2reo20UB3p6+iYvgd8x2gNI838ZXTueXl0rqN7
7gG2Yb6b4XPgy/jvR703xeocF2WXO0frImnyO4PzSNmH4s5z4D/0t0zOWZpF
51/SfsqtBmZ9rpxIuVFbxQj5xegagnKEitE1NNlSrWjtIU1+UPR46eo60RpG
+vxv5jm4cE6xVXTNbTf4lvBjC+cgNWXH8PrwCtG1C+ULW0fX5XbXsyTX8nbR
OgePHy9fFTzPcHh3CQCOK4Hrg3VmVXjz6HztJHiLaN1+st5ddI52iuJXtK4+
En5itJZWbnJ8tB0qLxibXGtQXvlo8vtQnvhlcL7cSc8dnQucmJyD9oTPVTyh
/2r40cop6N9N+52+L6Lzcb3HhfTXg18B/xReDX4JfHZwDaoD/JPgGlFH+HnB
sX0B858WnXeslA1GX/cE5TvBWiXCP4JvC2/H/98F1zSu1Dzyt/CmjFkaXFu4
ir7Po3W+9P7i4NpFl2gfIp0hHaJc+W6Nke+KzrmOk9+m/zD4zfStCa499pC2
Ca5P3gCfGK05pT03Btdpb5HNB9dye8KPoXUunH/9mtenCnxtcD32Jv5fF1yb
2k57LjpXUo52ZHTuozxudXAN9kb6VmWb7C4/HFz/vFX7KbjWejV8BbwB/Fr4
8uDaS1ftregc/9jk/aN9dAz8TPhN8CbwLaLzoNvB/6RL4L3k+7N/uwN8N1oj
KteppHcA7w3+G1ybvQ1eLbre0gd8k3kbBPuK6tF1nn5a7+S6kp5r/+j622A9
d3I9UTZ2QHTdbAh4YHStbCjYN7kWrOuqhqu6reLufnnN742uoyqmKb53Sq6H
ys47JNe8ZJOXJNesZatXyf+Wtp8r5aNL21gX+ejS9nMFfGNpO1eNXvnMEPCZ
5Fqk3m/jvF/uAx9LrjnKhick1/Lknx9MrhsOZ8zTyfVQ+faJeX756jHJdcmR
jHkkuf44Gv5Qcj1xFLxedB3ybrCBngd+Dzg+uXamWFM7ug45AByXXNN8UH46
ulZ5l2w5ue75QLZt1Z5XJsf3yrTpHHdMrrtp/0rj1YC/CT6bXJ+VDT8TnWep
/nNjcv1RtnpTcu1P++g/2sys925IrhVqT/2UnFtqLytflk5XXUhzSuOrtqbc
Sq5SeWEvxjbh3GnB+ZTyX+XBym2l2fRtQvlR7cJ5c48cUxRbFI//H5fp7wb/
t3Re/2/Ws6oFdlUMKL13+iR/b5D9t0uuk8oXqU4+obC+vSX5u4X2/q3J30vk
E3olf0fRPr09+XuG9oj0/w7MM0OxMblOKp+wd3Ttd5DsiP7Npfd17+RvRdqb
PZO/r8hH3ZH8jUf79OXoHEI1w6fyudJCT2bblv6R7lJeq28I+u4zpXAO83Jw
bW5KsJZTnqpvKcrjlI89r+cJrqeqRittvxvnvxf87UN1aX0DUm3kPfh70TVb
1WCfDo4Xyof+TP528BX988Am0dpA9nxc9kUjs59RLWddsj9XzrohOS9Wrv6s
9l1wDiv+XbTGVy1Umk15uvL1vYPzV+XPqmspV1XO+lAer/OUpy+DTwqOTZvy
OijXmwmfGZ2nL4E/Eaxhfipc41We2Ibnfzc4BzwP/naw1qpT+LvKFRxXp/8d
2WBwbUHXkgbbo7Bukk6WPpwLP4J2HXwEeFdyTVI+c0D2paq19ofvE+xj70mu
N2ovD06uJQ6E351c51Ttd1Ty94lh8HuT65DyG/2S1+hO7bPs66SZH88+UBpy
dPI3Cd3PA8nfP+6H7xX97UPXGpRc55SfOTT6G4qudXj0dxP5upHJ30XkG1Vn
VNyXtjss+juL5lSeotq+vptJH87Ja6465IfZ30oHyh4XgqdG19bkG4cm143l
A+9L/u6oWDAkubasPXVKtGaQr5uU97hyh+HJ3yEUX+5P/q6guDMs+fuBYlPT
6DqD/OePyXUxabCZ+V1IGy9NruVJw6xJzqlUZ/ghuaYm/fZdcj1dsXj76G+j
Wv/nkr97SfstT67ZSft9n1xzlz7ZmPzNVXtncnI+IN24LLneJ/22Pvlbsvbg
6uR9q++Yi5Nr+or13ybX+qXrfk/+pis7fy1Zp0qvfp38zUDacnpyDU6a9o3k
Op308KLk+r60xPPJulY5y/8A0tTFbw==
             "]], Polygon3DBox[CompressedData["
1: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
MnkOiE8/lZ4b9tcJwrvqOitZixI7/yytSVnTjeGy4LW+SdfDCQesbfhb93ue
8AHC84UrCLcglgi/KPydrocJl7rOSN4TJwvvmfcK7xyth+ZjLbBf2UtR15ns
Z7XVUn8L2fzoZ7yr9D38ljmbPQEnwU2d87t4nz2SORluhrPhltujuRnOhXuP
iNafJ6rvPdaq8GrhJ2XPRK8nPruf+vvn94O2rhustdBgaLE6avtEbdOCtc+7
xAj5Z2n8APkXBetN9BVaAE3wZnR+UU+fP1h2FrEmeL+ukY2XP1ptb5Recw01
dk10rDhIfdvU11x4oPDFwfF0CPtaeIqsQrDGgusPDNZeXaP5FQ2LloVTiWWs
AdbCR3m/zwjWXzzzxNJ7irkgRn0qv17w/HG/G9ifmWMOic5fj5H/bvKeItYT
89lrj8HT8EXhHJacj1jdODgXhIMHZf7cnDmeWEYM2ZLHkys2Cs4nj4zOV08K
zifRuGjdQ4XfSOYkYi8xEa76Ljo/fEttn6jvVdkkYp1scXJOTr7cUGOXJetQ
9Cj8Oi6v+Z75fbMXyEnbyD8lOFetn9fXscG5Ppx0X55fuArOG1Z6T8KFj0W/
r9dlj0bvUfIj8qWtmcOG5/XL/JOnkq9Ol/XIHMh8EVPhxpAcX0bK35z5G62K
Zn0czg3Wk3cU1pdoNrQN9Qm0HP1oz02FNedVauteOiadm6wZmMu9g7UEnEF+
Vz+vHzQhWviEYK2IxmZPoqk/DdbQXbJe/zJ4TbeV3ySv9dqlc2hy5/sL7/kX
CutluIAY2E7+qcGx8Ub2PDkD+yZzBvuRmA+XXCk/yCqW1n9oULTuycHaFI1L
7nF8sPZFs3fN+QNceKL8yqU10JzCGh2tjkb6PHjPsnfnB+s5NFKl0veLdiKH
IJcg5n4WXLvYQzaicA2jvvwqpWMmNRxiDLHmDPhM/m7Ja41n4tmI4dcG61di
+1b2vPCxRbG96HB5dP3ii8K1oveCtd9XsnU8a3Q+va5w/kGONzmYk+CmxdHa
8jU4LPPN2sJ7nr3/U7Lu3D6GtRNd12JNziWWRnPnR7JVaOvkOsCszKezo7U4
MXBOxuReL8mWBWsytBlz0UL+FdFrfRkmv4vsKe6V35C/PPrZ1jO/aJ3otfu9
bKP8Jfqut+S/jQm/EZ1nLMn8u0m/8XKwBkWLfsd6Da5P/BQ8p8ztO3k+Wkdz
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
K6IZOfvmvJUzacafkaxx+smfHVw7/j9Sv7YM
             "]], Polygon3DBox[CompressedData["
1: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
             "]], Polygon3DBox[{{898, 552, 673, 1109, 785, 786}}]},
           Annotation[#, "Charting`Private`Tag$19930#1"]& ]],
         Lighting->{{"Ambient", 
            RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
           "Directional", 
            RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
            ImageScaled[{0, 2, 2}]}, {"Directional", 
            RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
            ImageScaled[{2, 2, 2}]}, {"Directional", 
            RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
            ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
       {GrayLevel[0], Line3DBox[CompressedData["
1:eJwt0+dLVWEcwPHHnaZZqZVtm3qzsmFmtsscTU1tF1SvC+ovaNqwQX9C/0Kv
mjYlDHwZ7WkkQpAFmSOvnwPB/fB9OM/zu/ecA7fg8PH6YwkhhBc8TwzBJ9zg
kIt1jGUFiylnOY8dqtWR/HN2hxYwlBTCGL1jf57G7e3UXFaxhNv2VmoFm8lk
0NyQs/XWM3jgTI4Wk0Aj47jr+lpdyl8za3Q1W8iKHoInzjToTPKYTxK7eGpv
gg6Y3aClrGcdW7lvf5Qm0sQsxrOAVntxcynWe5jIJpZRySP7G3Ub2SSzm34z
s/Wh/XxdSBr7mEwNZVRTxfbonZoZrak8M7dX5zCJEkawnyncs1+khfSZO6hz
WUQ6B6L7TQ6hzbmp1jFuelXBtWnW08mInsWl7Oh3abQu1qNaoSe1W3/oAKf5
Qw/9vDJ/Rn/x2vqsvtFz+lbP6ztt1vd6QT/oRy5af9JL+lkv6xdt0a96RTv1
qn7Ta3rLs/zUQa7Ty2+a3OMprdYTWq5HNKZFNFhnaaXGfUdZdM8a0y79Hr0j
65eaqx2aqe2aGtVs+///yTDk4VqE
         "]]}, 
       {GrayLevel[0.2], 
        Line3DBox[{712, 971, 972, 941, 940, 1261, 711, 955, 956, 1007, 1022}],
         Line3DBox[{714, 863, 1119, 713, 862, 1118, 1105, 975, 861, 1117, 
         1101, 957, 860, 989, 1116, 1097, 925, 859, 952, 1265, 944, 1016}], 
        Line3DBox[{718, 867, 1123, 717, 866, 1122, 716, 865, 1121, 715, 864, 
         1120, 1106, 976, 1262, 1026, 943, 958, 1256, 1025, 990, 924, 928, 
         1104, 1257, 1019}], 
        Line3DBox[{726, 869, 1125, 725, 868, 1124, 724, 1188, 1029, 723, 1187,
          1028, 722, 1186, 1027, 721, 1270, 978, 991, 977, 992, 720, 1271, 
         979, 946, 947, 945, 719, 1266, 959, 927, 1008, 926, 1009, 1260, 
         1023}], Line3DBox[{743, 879, 1135, 741, 1194, 1036, 739, 1193, 1035, 
         737, 1192, 1034, 735, 1191, 1033, 733, 1190, 1032, 731, 1189, 1031, 
         729, 1272, 980, 993, 995, 994, 1275, 728, 982, 983, 948, 1263, 1102, 
         727, 961, 962, 1018}], 
        Line3DBox[{754, 889, 1146, 753, 888, 1145, 752, 887, 1144, 751, 886, 
         1143, 750, 885, 1142, 749, 1197, 1039, 748, 1196, 1038, 747, 1195, 
         1037, 1141, 746, 884, 1140, 745, 883, 1139, 1108, 984, 882, 1138, 
         949, 963, 881, 1137, 929, 931, 938, 1258, 1099, 935, 1017}], 
        Line3DBox[{767, 894, 1152, 766, 893, 1151, 765, 892, 1150, 764, 1204, 
         1046, 763, 1203, 1045, 762, 1202, 1044, 761, 1201, 1043, 760, 1200, 
         1042, 1149, 759, 891, 1148, 758, 890, 1147, 757, 1199, 1041, 756, 
         1198, 1040, 755, 1259, 933, 936, 932, 939, 1006, 1015, 1113}], 
        Line3DBox[{781, 897, 1156, 780, 896, 1155, 779, 1213, 1055, 778, 1212,
          1054, 777, 1211, 1053, 776, 1210, 1052, 775, 1209, 1051, 774, 1208, 
         1050, 1154, 773, 895, 1153, 772, 1207, 1049, 771, 1206, 1048, 770, 
         1205, 1047, 769, 1267, 965, 973, 964, 974, 768, 1268, 966, 934, 937, 
         1024}], Line3DBox[{784, 968, 1056, 1269, 986, 985, 1157, 898, 786, 
         1158, 899, 788, 1159, 900, 790, 1160, 901, 792, 1161, 902, 794, 1162,
          1062, 1221, 796, 1064, 1223, 798, 1163, 903, 800, 1164, 904, 802, 
         1165, 905, 804, 1166, 906, 806, 1167, 907, 808, 1168, 908, 810}], 
        Line3DBox[{809, 1229, 1070, 807, 1228, 1069, 805, 1227, 1068, 803, 
         1226, 1067, 801, 1225, 1066, 799, 1224, 1065, 797, 1222, 1063, 795, 
         1220, 1219, 1061, 793, 1218, 1060, 791, 1217, 1059, 789, 1216, 1058, 
         787, 1215, 1057, 785, 1109, 1214, 997, 999, 998, 782, 1110, 1274, 
         987, 969, 967, 783}], 
        Line3DBox[{812, 1071, 1230, 811, 1072, 1231, 813, 1169, 909, 814, 
         1170, 910, 815, 1171, 911, 816, 1172, 912, 817, 1173, 1073, 1232, 
         818, 1074, 1233, 819, 1075, 1234, 820, 1174, 913, 821, 1175, 914, 
         822, 1176, 915, 823, 1177, 916, 824, 1178, 917, 825}], 
        Line3DBox[{827, 1076, 1235, 826, 1077, 1236, 828, 1078, 1237, 829, 
         1079, 1238, 830, 1179, 918, 831, 1180, 919, 832, 1181, 1080, 1239, 
         833, 1081, 1240, 834, 1082, 1241, 835, 1083, 1242, 836, 1084, 1243, 
         837, 1182, 920, 838, 1183, 921, 839, 1184, 922, 840}], 
        Line3DBox[{854, 1005, 1004, 1276, 853, 1255, 1095, 852, 1254, 1094, 
         851, 1253, 1093, 850, 1252, 1092, 849, 1251, 1091, 848, 1250, 1090, 
         847, 1249, 1089, 1185, 846, 1248, 1088, 845, 1247, 1087, 844, 1246, 
         1086, 843, 1245, 1085, 842, 1111, 1244, 1003, 841, 1277, 1001, 1000, 
         1002}], Line3DBox[{970, 858, 1115, 1100, 954, 857, 988, 1114, 1096, 
         923, 856, 951, 942, 1112, 1264, 1010, 1013, 855, 1020}], 
        Line3DBox[{1021, 1014, 1011, 1012, 950, 953, 870, 930, 1098, 1126, 
         996, 871, 960, 1103, 1127, 872, 981, 1107, 1128, 1030, 1273, 730, 
         1129, 873, 732, 1130, 874, 734, 1131, 875, 736, 1132, 876, 738, 1133,
          877, 740, 1134, 878, 742, 1136, 880, 744}]}, 
       {GrayLevel[0.2], 
        Line3DBox[{472, 596, 693, 692, 1277, 687, 457, 581, 1235, 442, 566, 
         1230, 427, 551, 1269, 674, 676, 675, 1274, 412, 536, 655, 652, 654, 
         1268, 653, 397, 521, 627, 624, 710}], 
        Line3DBox[{473, 597, 688, 1244, 458, 582, 1236, 443, 567, 1231, 428, 
         1157, 552, 673, 1214, 413, 537, 1267, 651, 398, 522, 1259, 623, 383, 
         626, 625, 1258, 700}], 
        Line3DBox[{474, 598, 1245, 459, 583, 1237, 444, 1169, 568, 429, 1158, 
         553, 1215, 414, 538, 1205, 399, 523, 1198, 384, 1137, 510, 649, 621, 
         650, 709}], 
        Line3DBox[{475, 599, 1246, 460, 584, 1238, 445, 1170, 569, 430, 1159, 
         554, 1216, 415, 539, 1206, 400, 524, 1199, 385, 1138, 176, 177, 950, 
         311}], Line3DBox[{476, 600, 1247, 461, 1179, 585, 446, 1171, 570, 
         431, 1160, 555, 1217, 416, 540, 1207, 401, 1147, 525, 386, 1139, 671,
          672, 670, 686, 685, 1126, 619, 622, 618, 704}], 
        Line3DBox[{477, 601, 1248, 462, 1180, 586, 447, 1172, 571, 432, 1161, 
         556, 1218, 417, 1153, 541, 402, 1148, 526, 387, 1140, 511, 373, 1127,
          636, 648, 635, 1263, 637, 705}], 
        Line3DBox[{479, 603, 1249, 464, 588, 1239, 449, 573, 1232, 434, 558, 
         1221, 1220, 419, 543, 1208, 404, 528, 1200, 389, 513, 1195, 375, 502,
          1273, 1272, 667, 365, 494, 645, 647, 1266, 646, 357, 487, 701}], 
        Line3DBox[{480, 604, 1250, 465, 589, 1240, 450, 574, 1233, 435, 559, 
         1223, 1222, 420, 544, 1209, 405, 529, 1201, 390, 514, 1196, 376, 
         1129, 503, 1189, 366, 495, 664, 666, 1271, 665, 358, 488, 640, 1257, 
         617, 708}], 
        Line3DBox[{481, 605, 1251, 466, 590, 1241, 451, 575, 1234, 436, 1163, 
         560, 1224, 421, 545, 1210, 406, 530, 1202, 391, 515, 1197, 377, 1130,
          504, 1190, 367, 496, 1270, 663, 359, 489, 1256, 643, 614, 644, 
         707}], Line3DBox[{482, 606, 1252, 467, 591, 1242, 452, 1174, 576, 
         437, 1164, 561, 1225, 422, 546, 1211, 407, 531, 1203, 392, 1142, 516,
          378, 1131, 505, 1191, 368, 497, 1186, 360, 490, 1262, 660, 634, 662,
          353, 639, 1265, 638, 699}], 
        Line3DBox[{483, 607, 1253, 468, 592, 1243, 453, 1175, 577, 438, 1165, 
         562, 1226, 423, 547, 1212, 408, 532, 1204, 393, 1143, 517, 379, 1132,
          506, 1192, 369, 498, 1187, 361, 1120, 659, 661, 658, 681, 680, 1116,
          612, 615, 611, 702}], 
        Line3DBox[{484, 608, 1254, 469, 1182, 593, 454, 1176, 578, 439, 1166, 
         563, 1227, 424, 548, 1213, 409, 1150, 533, 394, 1144, 518, 380, 1133,
          507, 1193, 370, 499, 1188, 362, 1121, 491, 354, 1117, 632, 642, 631,
          633, 1264, 696, 697}], 
        Line3DBox[{485, 609, 1255, 470, 1183, 594, 455, 1177, 579, 440, 1167, 
         564, 1228, 425, 1155, 549, 410, 1151, 534, 395, 1145, 519, 381, 1134,
          508, 1194, 371, 1124, 500, 363, 1122, 492, 355, 1118, 656, 657, 679,
          678, 677, 1114, 610, 613, 698}], 
        Line3DBox[{691, 690, 1276, 689, 471, 1184, 595, 456, 1178, 580, 441, 
         1168, 565, 1229, 426, 1156, 550, 411, 1152, 535, 396, 1146, 520, 382,
          1136, 1135, 509, 372, 1125, 501, 364, 1123, 493, 356, 1119, 486, 
         352, 1115, 629, 641, 1261, 628, 630, 695, 706}], 
        Line3DBox[{478, 1185, 602, 463, 1181, 587, 448, 1173, 572, 433, 1162, 
         557, 1219, 418, 1154, 542, 403, 1149, 527, 388, 1141, 512, 374, 1128,
          668, 669, 684, 1275, 683, 682, 616, 620, 694, 1260, 703}]}, {}, {}}},
     VertexNormals->CompressedData["
1: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
      "]], {}}, {{
     {RGBColor[0.3315753, 0.4561011, 0.6388182], PointSize[
       NCache[
        Rational[7, 360], 0.019444444444444445`]], 
      Point3DBox[{{1.2, 2.4, 7.2}}]}, {}, {}}, {}}, 
   {GrayLevel[0.5], Opacity[0.5], 
    TagBox[
     ConicHullRegion3DBox[
      NCache[{{1, 2, 0.8678958471847211}, {
        2, Rational[1, 2], 0.8131278749294093}, {
        3, -1, 0.7562701634094509}}, {{1, 2, 0.8678958471847211}, {
        2, 0.5, 0.8131278749294093}, {3, -1, 0.7562701634094509}}]],
     "InfinitePlane"]}, 
   {GrayLevel[0.5], Opacity[0.5], 
    TagBox[
     ConicHullRegion3DBox[
      NCache[{{1, Rational[5, 2], 0.6770573339127968}, {
        2, 2, 0.18973966320221658`}, {
        3, Rational[3, 2], 0.3350113641798902}}, {{
        1, 2.5, 0.6770573339127968}, {2, 2, 0.18973966320221658`}, {
        3, 1.5, 0.3350113641798902}}]],
     "InfinitePlane"]}},
  Axes->True,
  AxesLabel->{None, None, None},
  AxesOrigin->{Automatic, Automatic, Automatic},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  ImageSize->{333.3257012399346, 324.7956952340746},
  ImageSizeRaw->Automatic,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "RotationControl" -> 
    "Globe"},
  PlotRange->{{0, 5}, {0, 5}, {7.203487975691672, 49.999992857143106`}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{-1.5767085610837077`, -0.4743065176149244, 2.9561839321587096`},
  ViewVertical->{0.8365988308309108, 0.25166621650065457`, 
   0.48658659221622513`}]], "Output",
 CellChangeTimes->{3.85470081836555*^9},
 CellLabel->"Out[48]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
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
G9904rrx3XdcN96z9zD8TpyYplpMZWGdaNYsseRlDSpDas9CqePwL0voz9UL
qMaxdhssVekD33OP+3gtnCCasLjZiZatbvYPMJ2BvuOK15QhXZgf4bp2iSRP
Hr9hfPmeo9k63gh/V53ynzwO1IlIPIi37PDhPqPTWzydWnbH+bLN2JeFVYdM
BSeXDvsVKs280CaYuMpJ63xXoSaEAoy5ygr8eZkX21UW22x167SwsNDEAElH
LywIK/slC8Zip4YFauF9zQlwtrywzLDc2eOME5x1gudomZPmOpe4oZzi+YVz
OOJYJYI96BZlzbaaPwr5laNLWtp3rFMbbvDiugL8oMW1aaxqF+4rJhnEfp9e
y7paSy2ysJYtWkt6jKvYW+da1siZ3rhx55l2exAk39VUhVJ/6E9DkuXlooW8
dW0ZRUk/Gkkm3LL3dAyV78aSmXcXU4NQU6XySh67rPI3TBYuWg8Wi40+3rZt
3X+m3epzkGLVYXiKyprB5Z/bjIqLS12F0USCQnF0fRyNlSQ0S7CI40ceuGj8
yuq2zMHJL2lPxJI8JEvZaalJQFt6cfFmCedAKzpx6Qzep7jGYNgpD1CBRU2a
Z4b92dMUOMHNrENcEK5HoWz+W8+f3NkJa0Wrenydskkbg5eS0CahOcoW7dMX
tgxNH+A9rhU7SskGY4Ur5D7xakbiOTK0ew7vG+Mr9+3EjOPszOKfnb14AQrl
WfPbT2MusqQWtcU4b6s6829DBoid/IR/lt2vqJW1UEhPeFUXIc1WrkGLCOkA
kFd41Cha2Eqp+ldUtLjt3K2BRE6Jvi/iMtYz73/TOBMu0Ge9hI3yHP1Za58t
iqBrwWrrLbGcymVN1x0Jbitxcl25aEqOy3VIO/uTRO4SSyUofiakwYJq5R9G
kprdSFJruL7s5s/Png2rCeKX0+k5MuGPPXDd+MT1h8fHr796vLRvN4Szf7Z1
06W8pu3Sss6UP+lSr+h/c68DYYpCRLsFgtZUNfHGkRfv/NKtZbG6d2npMg7F
JV3PcpKPRDTawMewnLCsTAIUfMqyoit67Aa1rK3xY8uHx4/ee834souvx9+3
HrsiXtqkWy6vNJRpzcTg9zxlwvOcK6c1JO9qPVVMjjnR1bd0PpPRgdJ5WFd4
VDN0fqTWlHylZDaKQrPnE9R+Ilh4LXzpPK0rE6tf17as66ErrxvfeeraorUd
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
fslnvuiLX16ffsVXvbpq/58v+/Kv+avt9viH77jjjmT2npVRJn6dZEvm7O5V
WcF4Q0FUdR9g5L2GHz+g5xwCXSY54t9jLxmaqLES7nrGHTqDl5R6q8aNVT2K
nEFeN0I/f966vj0Tb7HRAt3CmYz5HedQquVUC1anaCQmRgxOrbQbD9xkU+hn
XH3ySk7lLQP/MDJ8s4CEV8a/C8WkJhN2X6fHklVMBQ3m2Yuonma71yb01Ylo
W8Oh1vNX+3A4JBx+9IX3vfS37vncz08/kn6YCmwJLM/JoJQpN+L5zdi7YwCm
j93tTY89rYL/nuTA6BZ5Rtx7OKVMmqjREiwHhqW0fyUsioBW5QCKyNFu3qYU
CPwZ6d1Mlj2xu8K3nPespy1WomymOsQIlk0gxu73ArSJ+JgnwtbYO4q9QQ6l
rI0kfC4DlM4hRUPltY9TOffjibg/8ishQFv2HwWnibQvYIMQcvVCrahhtmPM
onh7GGM2ARVsJ2K2CwbyPNtcRIFucv5mnrUfzF5h/lF+LKmi0iNt/kXfwUi9
B1pbIzLf4jCVca3XF0IGtaht4CdeBMGu4Pcgxm+LunBMGNoMfVuusZxe25QN
qbSyYh/bRgHbBV1rrQLW+lezIY3Go1v/CXmOK217J6cxMptz9RfnCMPvG8Fw
BjAkSn/Ni7O32EzBkExnH5B5GwCy3gvIv/zSl74CAbnIgDxFY8gELxGIuJEZ
kG0i74/uPm4ykdcep+hdMiDd/oeI221RlI3an4QhTjp2PS21lx8AAq0EbAOz
sRHusByjzjSfd3usmdSB4t0Efw5npLMSJHmAyB78TEn+NIrItuBzMJkZolvo
sabX8ckruRC8QVLntpV5gE7R5iVMkq9JCE2fO/U/6S9+H2E0vXNnK5ObeaIg
FWUxW8gImh0DdPeP//XVpz9nAoYJoQmGG4PhjQKG0sxd+Jnpx/5S7OIeDP69
/JRLaF8OKH2hw2IKSo+qw4Py+aB+5XkUGaOKbxnnsDuvVT+cGtpOQvUNk7dQ
OW4zK/usUHqw0kBnUNey8YawYGnO4uRB/ltTW/meqrn1dlNHneAvxB6qrOjn
Ps7fRdj7lTvTFf/4ZQLg7qs/Sj9LA64YhUfasGkoJAM5KE9nPPYS4/zV857/
+Qg2npyoviOQsPRaif+YwTY8yGATbO4Bmkt3R+wLQphO2TcG17z0Dv8TuXyy
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
eNbwDpzvwfVelOv5dXLf7WxNercarV5iU77lQacygAJu2BzpFcmAxp9z1IrX
6TlHDVKd2vGWG1ekQYrPG716Oc4bwbE/NTh25nzJ/5Jsqs9P/bd2F2uuJ7Lf
vR374MI4sdsygILcPBO+0MkfKnk3xXmzYT4uyftxNyLbT/1bmiM3Ctkwxpfo
rlR0e7nCYtQIkBuXqjVDwM0r5f02Yq9x/k3tITAAldMKHGmdW9uiYH6d3LvU
+Zs+Ofl8q6fkfGVO/hcGx/6UIMPDxy7TbIm2/bG79E5kvDuj7ajhA9fvHgdm
3LQrYMZx6xpPWbPRfczrMkwUVXGitO1i220RnR14F0gInOw60bRk85cwVhTG
Qs5831pxwjWPqMVzJRPeQfDmT7Py5bwvmT7NiIrF5SYq5tP87+ygNT9ze2C7
6z2n2Qdpmw61I5isa2HK2T2kGEejfl4OkrsQdR71pLxxbvm5trTdQ3Gnsy92
iBtecFcVyakPJDKDGu8suqHvf45brIA23U56HpjzulhD22BjT47R1lz0Dw69
+rLg1D9ruh4jWVpibH/qbmp5PvU8VJFNt83YnEzNgx3PdZvzar9bu4M7Dbck
DtfDboLs69YLFjUCy2KOmcz+DeKtZZmofWS0OMMOuQ5qtuWYcqzZrcvWLnK5
97Z2rW3jq8194Y+lnPEbD2kJC57xV5pB1fLsk6fpWTKvRM+8wfqH0ycaOT4i
5T+jcCg61oUf6HMhyLLVpkftXWolGWgm5/PWvu5lOpGGUCZeytpLzqLJDhT6
51xloUh6Hljmbu+CnTq4fWVqbxN3zGDXFRnqqpFthjJK1Q4W2oitABsf7MuB
KSvOodweyJD5YCVEojsUD7ZIoDiTjaHw+IhXQd7ttmBi1yH4W3DMrvSG9GvD
Lai5d8DJy6ix6OS4/dK3or0h2jsRqdDzDVvervnRTZlX9b10kED92GjvKafK
pH7e7jnSV0wfacTCEkFREZyP9L/PT7mVgLeZmT+9+Uu3s/8cHqkbX8v+k2hn
UhwlBncbh0xSOkvHydWxfKTD1DDkwdSaM2Rj+nBbjR667tTBkBKHlREmKT+w
VpVgjZEM2d4GLStLVUdgGUx2jy6BaKUM1vCZpqXb5ZneH5zpbcGZQnikGe/W
nancwWSabwsscRefqbUJyM2JfazrPSdp4qgjHP+JhzjXQ8zGt9coqVhJdYQq
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
qYAuw9bo5fwdw/ut/HF6RZ/jXpHTAkdAajRuME97/CL+dn4RZ3Sq6XVwa9f/
xMeCKZjoqGr1+MUqsNU/iF/R38qv6Iz+Mb2ie90rcgqM6BVdArddKn+b+MV8
lUHmVl4uvZIb+ZVkhbO3mCs8o0chgKjBfosjsoxfzlfsR7D6r/RavtC9Fmcf
+bXkm/vnbovc6EX8Cl72RO4h7qOhTDHV8EenkYUFfqyT8wrGr+Bv2m1zJpr4
MngRhY1b5sfSb6VAOb2c46nqlLBWul4Qzn3J+Aa6lVvIvSHcA+Bs3TIASTHP
p4lfx984822jvt7L3esQTR+ZuCUARA6qmGjDfTfFy5A96Gc2/K9wL8I5QMsA
LRvzIbOdhb/9kieCTe4s+Nf25tWKRYewsmqRXvpTzsm/+In83a9zf9fZKvy7
clcu1duHv1tlh+lFT/BOYOE7N+c4PVaOVJq/TO03cqkX9qcbVye6dy/UQifo
je5PO53T3E7+NM2z3v2l7DDKn0b39QV2qUsHJ731Ebpy0JZ7t8gC4V9Lk7PT
dzMMB/GvPX8ay2Ju3V/7NvhrhamZ5Wsmj/2HruvShe4xmsY//XlPBFMsUv63
+d+4LRRD/rvivzzUNE36ux1aOTCw1T2GqTM5Jd/l/rTTBfOfFouYvjklfJ9a
I3Zh27PT9YS8ke9xL8DZD34BCYzicqd/QsnrPraiz94L7dD5YN3rv7MroIYk
pzE6tPDpcNMBZOs5fgEwRvNMDsfb3V935oT/un7Pf4FusAkSuXs/6rx/wfLO
PFDJyylaO430r2kGa05O9dmqGnEI4q/t/9MedT/k/rQzJ61dCb358p9uM5vZ
Tfb0/PCZ7SdLEqmuSsaktdesqK/5NVVSOdj9dzn/oSfiI/wI/K3ClDSGNPoF
6T8eM/lE2P997i+4+j3/BbxzOdo+O6//RP71/8FerKZiar2AT34ih/6z7je6
O50vunOlztvpTozk8b+ehV25t7539/HuP/lTx+Oj3IuZ97vfikVfvDm2e48v
ZFQWM/FILUlRyx9A9/bMZPkh9ysFc+kvp//TlRimURAyYs75y5wH2VdBoGon
f1VwGX8Hf08vLy39njOx1O/iP58J1skB4F8zugFZBlI96f8H0URB6A==\
\>", "ImageResolution" -> \
144.],ExpressionUUID->"20a51701-7b48-4b10-9485-cccc1eff6c04"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Linear Support Vector Machine", "Section",
 CellChangeTimes->{{3.822981114493249*^9, 
  3.8229811230414*^9}},ExpressionUUID->"3b64852d-85ac-42fc-81d6-a533fd895d6a"],

Cell[TextData[{
 "Let\[CloseCurlyQuote]s now produce a support vector machine for the example \
from the video lectures. First, we need to define the samples, ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["x", "i"], TraditionalForm]],ExpressionUUID->
  "f288ea17-79ce-4336-9348-f91588a93c17"],
 ". These are points in a 2D vector space which are labelled as either \
\[OpenCurlyDoubleQuote]Plus\[CloseCurlyDoubleQuote] or \
\[OpenCurlyDoubleQuote]Minus\[CloseCurlyDoubleQuote]."
}], "Text",
 CellChangeTimes->{{3.822992977829295*^9, 3.822992978514311*^9}, {
  3.8229945867032957`*^9, 3.822994651725788*^9}, {3.827992677416213*^9, 
  3.827992677653514*^9}},ExpressionUUID->"05d2161c-cfdb-419e-8627-\
028b75f6b563"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Plus\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1.284422952732416`", ",", "2.481901856407326`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"1.4879960382523703`", ",", "2.402086883623099`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"4.193340935618989`", ",", "2.0674820899685353`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"1.07511361074236`", ",", "2.8655605261563037`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"4.5621522276001985`", ",", "2.3036590135818598`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"0.0734941576442104`", ",", "2.7567100412409644`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"2.0267587486366514`", ",", "1.8146817202743937`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"1.7160467347301873`", ",", "2.2314527869285374`"}], "}"}]}],
        "}"}]}], ",", 
     RowBox[{"\"\<Minus\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0.3650725217541822`", ",", "1.4540111456859945`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"1.8799169703454597`", ",", "1.3235540770631689`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"0.2775167301897557`", ",", "0.026781782266628973`"}], "}"}],
         ",", 
        RowBox[{"{", 
         RowBox[{"1.7185797382262036`", ",", "0.8439744313421516`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"1.0440125841941863`", ",", "0.8714161830961258`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"4.009012707820185`", ",", "0.4883132746354524`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"0.0444111436444237`", ",", "1.0249991478151106`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"1.4175016236764821`", ",", "0.3949618274790252`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"0.40287782851680287`", ",", "0.35796696425588426`"}], "}"}],
         ",", 
        RowBox[{"{", 
         RowBox[{"1.3129335119181957`", ",", "0.193320544474747`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"1.6678854129083547`", ",", "0.5245058562945744`"}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{"3.62477502445507`", ",", "0.2321920742831569`"}], "}"}]}], 
       "}"}]}]}], "|>"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.82297614437396*^9, 3.822976192253549*^9}, {
  3.82297643933304*^9, 3.8229764440907087`*^9}},
 CellLabel->"In[49]:=",ExpressionUUID->"1baf39a4-fe3b-48a8-8f4b-14e1da2c8efc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"data", ",", 
   RowBox[{"PlotMarkers", "\[Rule]", "\"\<OpenMarkers\>\""}], ",", 
   RowBox[{"PlotTheme", "\[Rule]", "\"\<Detailed\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.822976418959372*^9, 3.822976467491787*^9}, {
  3.8229777597299623`*^9, 3.822977836251227*^9}, {3.8229796327265263`*^9, 
  3.822979638236968*^9}, {3.822994660347761*^9, 3.822994673036398*^9}},
 CellLabel->"In[50]:=",ExpressionUUID->"277a89e2-d112-4ae2-ab84-e40a68fffb47"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {{{
        Directive[
         PointSize[0.012833333333333334`], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        GeometricTransformationBox[
         InsetBox[
          BoxData[
           FormBox[
            StyleBox[
             GraphicsBox[{{
                GrayLevel[1], 
                DiskBox[{0, 0}, 
                 Offset[{3, 3}]]}, 
               AbsoluteThickness[1.5], 
               Dashing[{}], 
               CircleBox[{0, 0}, 
                Offset[{3, 3}]]}], 
             GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                 PointSize[0.012833333333333334`], 
                 RGBColor[0.368417, 0.506779, 0.709798], 
                 AbsoluteThickness[1.6]]}, StripOnInput -> False], 
            TraditionalForm]], {0., 0.}, Automatic, 
          Scaled[9.75]], {{{1.284422952732416, 2.481901856407326}}, {{
         1.4879960382523703`, 2.402086883623099}}, {{4.193340935618989, 
         2.0674820899685353`}}, {{1.07511361074236, 2.8655605261563037`}}, {{
         4.5621522276001985`, 2.3036590135818598`}}, {{0.0734941576442104, 
         2.7567100412409644`}}, {{2.0267587486366514`, 
         1.8146817202743937`}}, {{1.7160467347301873`, 
         2.2314527869285374`}}}]}, {
        Directive[
         PointSize[0.012833333333333334`], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        GeometricTransformationBox[
         InsetBox[
          BoxData[
           FormBox[
            StyleBox[
             GraphicsBox[{{
                GrayLevel[1], 
                PolygonBox[
                 NCache[{
                   Offset[{0, 4}], 
                   Offset[{(-2) 3^Rational[1, 2], -2}], 
                   Offset[{2 3^Rational[1, 2], -2}]}, {
                   Offset[{0, 4}], 
                   Offset[{-3.4641016151377544`, -2}], 
                   Offset[{3.4641016151377544`, -2}]}]]}, 
               AbsoluteThickness[1.5], 
               Dashing[{}], 
               JoinedCurveBox[
                NCache[
                 Line[{
                   Offset[{0, 4}], 
                   Offset[{(-2) 3^Rational[1, 2], -2}], 
                   Offset[{2 3^Rational[1, 2], -2}], 
                   Offset[{0, 4}]}], 
                 Line[{
                   Offset[{0, 4}], 
                   Offset[{-3.4641016151377544`, -2}], 
                   Offset[{3.4641016151377544`, -2}], 
                   Offset[{0, 4}]}]], CurveClosed -> True]}], 
             GraphicsBoxOptions -> {DefaultBaseStyle -> Directive[
                 PointSize[0.012833333333333334`], 
                 RGBColor[0.880722, 0.611041, 0.142051], 
                 AbsoluteThickness[1.6]]}, StripOnInput -> False], 
            TraditionalForm]], {0., 0.}, Automatic, 
          Scaled[9.75]], {{{0.3650725217541822, 1.4540111456859945`}}, {{
         1.8799169703454597`, 1.3235540770631689`}}, {{0.2775167301897557, 
         0.026781782266628973`}}, {{1.7185797382262036`, 
         0.8439744313421516}}, {{1.0440125841941863`, 0.8714161830961258}}, {{
         4.009012707820185, 0.4883132746354524}}, {{0.0444111436444237, 
         1.0249991478151106`}}, {{1.4175016236764821`, 
         0.3949618274790252}}, {{0.40287782851680287`, 
         0.35796696425588426`}}, {{1.3129335119181957`, 
         0.193320544474747}}, {{1.6678854129083547`, 0.5245058562945744}}, {{
         3.62477502445507, 0.2321920742831569}}}]}}}, {{}, {{}, {}}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {False, False}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{True, True}, {True, True}}, 
     FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> Automatic, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {Automatic, Automatic}, GridLinesStyle -> Directive[
       GrayLevel[0.4, 0.5], 
       AbsoluteThickness[1], 
       AbsoluteDashing[{1, 2}]], 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{0, 4.5621522276001985`}, {0, 2.8655605261563037`}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.08090169943749476]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Plus\"", "\"Minus\""}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    InsetBox[
                    GraphicsBox[{{
                    GrayLevel[1], 
                    DiskBox[{0, 0}, 
                    Offset[{3, 3}]]}, 
                    AbsoluteThickness[1.5], 
                    Dashing[{}], 
                    CircleBox[{0, 0}, 
                    Offset[{3, 3}]]}, {DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 9.75}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.09205128205128206] -> 
                    Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    InsetBox[
                    GraphicsBox[{{
                    GrayLevel[1], 
                    PolygonBox[
                    NCache[{
                    Offset[{0, 4}], 
                    Offset[{(-2) 3^Rational[1, 2], -2}], 
                    Offset[{2 3^Rational[1, 2], -2}]}, {
                    Offset[{0, 4}], 
                    Offset[{-3.4641016151377544`, -2}], 
                    Offset[{3.4641016151377544`, -2}]}]]}, 
                    AbsoluteThickness[1.5], 
                    Dashing[{}], 
                    JoinedCurveBox[
                    NCache[
                    Line[{
                    Offset[{0, 4}], 
                    Offset[{(-2) 3^Rational[1, 2], -2}], 
                    Offset[{2 3^Rational[1, 2], -2}], 
                    Offset[{0, 4}]}], 
                    Line[{
                    Offset[{0, 4}], 
                    Offset[{-3.4641016151377544`, -2}], 
                    Offset[{3.4641016151377544`, -2}], 
                    Offset[{0, 4}]}]], CurveClosed -> True]}, {
                    DefaultBaseStyle -> {"Graphics", {
                    AbsolutePointSize[6]}, 
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]]}}], 
                    NCache[
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}], 
                    Scaled[{0.5, 0.5}]], Automatic, 
                    Scaled[1]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 9.75}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.09205128205128206] -> 
                    Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               TagBox[#, HoldForm], ",", 
               TagBox[#2, HoldForm]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{
                    GraphicsBox[{{
                    GrayLevel[1], 
                    DiskBox[{0, 0}, 
                    Offset[{3, 3}]]}, 
                    AbsoluteThickness[1.5], 
                    Dashing[{}], 
                    CircleBox[{0, 0}, 
                    Offset[{3, 3}]]}], ",", "9.75`"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{
                    GraphicsBox[{{
                    GrayLevel[1], 
                    PolygonBox[
                    NCache[{
                    Offset[{0, 4}], 
                    Offset[{(-2) 3^Rational[1, 2], -2}], 
                    Offset[{2 3^Rational[1, 2], -2}]}, {
                    Offset[{0, 4}], 
                    Offset[{-3.4641016151377544`, -2}], 
                    Offset[{3.4641016151377544`, -2}]}]]}, 
                    AbsoluteThickness[1.5], 
                    Dashing[{}], 
                    JoinedCurveBox[
                    NCache[
                    Line[{
                    Offset[{0, 4}], 
                    Offset[{(-2) 3^Rational[1, 2], -2}], 
                    Offset[{2 3^Rational[1, 2], -2}], 
                    Offset[{0, 4}]}], 
                    Line[{
                    Offset[{0, 4}], 
                    Offset[{-3.4641016151377544`, -2}], 
                    Offset[{3.4641016151377544`, -2}], 
                    Offset[{0, 4}]}]], CurveClosed -> True]}], ",", "9.75`"}],
                    "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.8547008942667694`*^9},
 CellLabel->"Out[50]=",ExpressionUUID->"02e430c0-d34a-44fa-857c-7aaae4768b12"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solving the primal problem", "Subsection",
 CellChangeTimes->{{3.822994686625305*^9, 
  3.822994691530304*^9}},ExpressionUUID->"a0d87674-85da-448f-9f75-\
c4c4fc2b0335"],

Cell["\<\
We can directly solve the primal problem. To do so we need to set up the \
constraints imposed by the samples.\
\>", "Text",
 CellChangeTimes->{{3.8227591223385363`*^9, 3.822759128684408*^9}, {
  3.822994742076789*^9, 
  3.822994758658195*^9}},ExpressionUUID->"572c21a5-143a-4be7-99b8-\
0e67f833dbbf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"plusConstraints", "=", 
  RowBox[{"Apply", "[", 
   RowBox[{"And", ",", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"w1", ",", "w2"}], "}"}], ".", "x"}], "+", "b"}], 
       "\[GreaterEqual]", "1"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"data", "[", "\"\<Plus\>\"", "]"}]}], "}"}]}], "]"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.822994761540525*^9, 3.822994792431278*^9}, {
  3.822995255804714*^9, 3.822995259446677*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"39fd0026-dc2c-4255-974a-da8c80cda168"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.284422952732416`", " ", "w1"}], "+", 
    RowBox[{"2.481901856407326`", " ", "w2"}]}], "\[GreaterEqual]", "1"}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.4879960382523703`", " ", "w1"}], "+", 
    RowBox[{"2.402086883623099`", " ", "w2"}]}], "\[GreaterEqual]", "1"}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"4.193340935618989`", " ", "w1"}], "+", 
    RowBox[{"2.0674820899685353`", " ", "w2"}]}], "\[GreaterEqual]", "1"}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.07511361074236`", " ", "w1"}], "+", 
    RowBox[{"2.8655605261563037`", " ", "w2"}]}], "\[GreaterEqual]", "1"}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"4.5621522276001985`", " ", "w1"}], "+", 
    RowBox[{"2.3036590135818598`", " ", "w2"}]}], "\[GreaterEqual]", "1"}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"0.0734941576442104`", " ", "w1"}], "+", 
    RowBox[{"2.7567100412409644`", " ", "w2"}]}], "\[GreaterEqual]", "1"}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"2.0267587486366514`", " ", "w1"}], "+", 
    RowBox[{"1.8146817202743937`", " ", "w2"}]}], "\[GreaterEqual]", "1"}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.7160467347301873`", " ", "w1"}], "+", 
    RowBox[{"2.2314527869285374`", " ", "w2"}]}], "\[GreaterEqual]", 
   "1"}]}]], "Output",
 CellChangeTimes->{3.854701279062278*^9},
 CellLabel->"Out[51]=",ExpressionUUID->"8e4e94b2-fbd6-48b1-85a0-1ae7f92feafa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"minusConstraints", "=", 
  RowBox[{"Apply", "[", 
   RowBox[{"And", ",", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"w1", ",", "w2"}], "}"}], ".", "x"}], "+", "b"}], 
       "\[LessEqual]", 
       RowBox[{"-", "1"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"data", "[", "\"\<Minus\>\"", "]"}]}], "}"}]}], "]"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.822994761540525*^9, 3.822994792431278*^9}, {
  3.822995255804714*^9, 3.822995259446677*^9}, {3.822995365770524*^9, 
  3.8229953770762463`*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"432928fe-3fa0-4198-ac8b-6ca392c4d578"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"0.3650725217541822`", " ", "w1"}], "+", 
    RowBox[{"1.4540111456859945`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.8799169703454597`", " ", "w1"}], "+", 
    RowBox[{"1.3235540770631689`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"0.2775167301897557`", " ", "w1"}], "+", 
    RowBox[{"0.026781782266628973`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.7185797382262036`", " ", "w1"}], "+", 
    RowBox[{"0.8439744313421516`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.0440125841941863`", " ", "w1"}], "+", 
    RowBox[{"0.8714161830961258`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"4.009012707820185`", " ", "w1"}], "+", 
    RowBox[{"0.4883132746354524`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"0.0444111436444237`", " ", "w1"}], "+", 
    RowBox[{"1.0249991478151106`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.4175016236764821`", " ", "w1"}], "+", 
    RowBox[{"0.3949618274790252`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"0.40287782851680287`", " ", "w1"}], "+", 
    RowBox[{"0.35796696425588426`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.3129335119181957`", " ", "w1"}], "+", 
    RowBox[{"0.193320544474747`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"1.6678854129083547`", " ", "w1"}], "+", 
    RowBox[{"0.5245058562945744`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}], "&&", 
  RowBox[{
   RowBox[{"b", "+", 
    RowBox[{"3.62477502445507`", " ", "w1"}], "+", 
    RowBox[{"0.2321920742831569`", " ", "w2"}]}], "\[LessEqual]", 
   RowBox[{"-", "1"}]}]}]], "Output",
 CellChangeTimes->{3.854701284748411*^9},
 CellLabel->"Out[52]=",ExpressionUUID->"8f1df277-56a9-46ae-a496-611177eb392a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"allConstraints", "=", 
   RowBox[{"Join", "[", 
    RowBox[{"plusConstraints", ",", "minusConstraints"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.822995390452153*^9, 3.822995397945125*^9}},
 CellLabel->"In[53]:=",ExpressionUUID->"852d9e73-3faf-477b-a09e-a7d3c85fe505"],

Cell["\<\
Now we can use NMinimise to find the  solution to the constrained \
optimisation problem.\
\>", "Text",
 CellChangeTimes->{{3.822995475106427*^9, 
  3.8229955228847837`*^9}},ExpressionUUID->"b2879cb0-22d2-4c9a-b278-\
59ac4e9c8e3c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"norm2", ",", "sol"}], "}"}], "=", 
  RowBox[{"NMinimize", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       FractionBox["1", "2"], 
       RowBox[{"(", 
        RowBox[{
         SuperscriptBox["w1", "2"], "+", 
         SuperscriptBox["w2", "2"]}], ")"}]}], ",", "allConstraints"}], "}"}],
     ",", 
    RowBox[{"{", 
     RowBox[{"w1", ",", "w2", ",", "b"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.822735010443797*^9, 3.8227350561320887`*^9}, {
   3.8227351043052263`*^9, 3.8227351522298307`*^9}, {3.822735235406324*^9, 
   3.822735236880089*^9}, 3.8227355493468103`*^9, {3.8227357509265223`*^9, 
   3.822735762413685*^9}, {3.822976593321376*^9, 3.8229765964364357`*^9}, {
   3.8229771370740623`*^9, 3.82297714012108*^9}, {3.8229780038540792`*^9, 
   3.822978006237088*^9}, {3.822995534406416*^9, 3.822995534685252*^9}},
 CellLabel->"In[54]:=",ExpressionUUID->"3ffe4408-3fcf-46b1-a0e4-f6ba35e55493"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7.611251674354541`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"w1", "\[Rule]", "1.1176497303899737`"}], ",", 
     RowBox[{"w2", "\[Rule]", "3.738096096794236`"}], ",", 
     RowBox[{"b", "\[Rule]", 
      RowBox[{"-", "8.048661024444451`"}]}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8547013365124025`*^9},
 CellLabel->"Out[54]=",ExpressionUUID->"506edd38-c2d0-4214-815d-2b8b084e79dc"]
}, Open  ]],

Cell["This means that our decision function is", "Text",
 CellChangeTimes->{{3.8229793983076553`*^9, 3.822979403507124*^9}, {
  3.82299555567955*^9, 
  3.8229955584655323`*^9}},ExpressionUUID->"bd7948a8-251a-46fc-afb2-\
461b6156a944"],

Cell[BoxData[
 RowBox[{
  RowBox[{"decision", "[", "x_", "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1.1176497303899737`", ",", "3.738096096794236`"}], "}"}], ".", 
    "x"}], "+", 
   RowBox[{"(", 
    RowBox[{"-", "8.048661024444451`"}], ")"}]}]}]], "Input",
 CellChangeTimes->{{3.8229794041613398`*^9, 3.822979438686438*^9}, 
   3.822979499133369*^9},
 CellLabel->"In[55]:=",ExpressionUUID->"1b6558b4-baa7-4c9c-af88-3005bc0e9790"],

Cell["Then, our decision line is", "Text",
 CellChangeTimes->{{3.822979465258322*^9, 3.8229794691165257`*^9}, {
  3.822979519821231*^9, 
  3.8229795380222807`*^9}},ExpressionUUID->"8f936eb6-5958-47e8-975c-\
20e978b0b6cb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"decision", "[", 
     RowBox[{"{", 
      RowBox[{"x", ",", "y"}], "}"}], "]"}], "\[Equal]", "0"}], ",", "y"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.822979471300815*^9, 3.8229794758674307`*^9}, {
  3.8229795142876997`*^9, 3.8229795147128067`*^9}, {3.822979557451696*^9, 
  3.822979559668478*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"0fe7274e-1835-4318-9915-b216629a75eb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"y", "\[Rule]", 
    RowBox[{"0.2675158621142974`", " ", 
     RowBox[{"(", 
      RowBox[{"8.048661024444451`", "\[VeryThinSpace]", "-", 
       RowBox[{"1.1176497303899737`", " ", "x"}]}], ")"}]}]}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.8547015023661346`*^9},
 CellLabel->"Out[56]=",ExpressionUUID->"0959c23e-bbf6-4364-bc17-0fbd16c92556"]
}, Open  ]],

Cell["and our margins are", "Text",
 CellChangeTimes->{{3.822979540778611*^9, 
  3.822979543062613*^9}},ExpressionUUID->"4c0682ec-235b-4b88-9fdc-\
5ef34b86fb08"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"decision", "[", 
     RowBox[{"{", 
      RowBox[{"x", ",", "y"}], "}"}], "]"}], "\[Equal]", "1"}], ",", "y"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.822979471300815*^9, 3.8229794758674307`*^9}, {
  3.8229795142876997`*^9, 3.8229795147128067`*^9}, {3.8229795513354807`*^9, 
  3.822979569387856*^9}},
 CellLabel->"In[57]:=",ExpressionUUID->"3b9a41f0-56aa-460f-8b39-e5cf723e3e1e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"y", "\[Rule]", 
    RowBox[{"0.2675158621142974`", " ", 
     RowBox[{"(", 
      RowBox[{"9.048661024444451`", "\[VeryThinSpace]", "-", 
       RowBox[{"1.1176497303899737`", " ", "x"}]}], ")"}]}]}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.8547015139878464`*^9},
 CellLabel->"Out[57]=",ExpressionUUID->"fbaf1ecb-3c18-421d-8e63-5fa2e4c1a34b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"decision", "[", 
     RowBox[{"{", 
      RowBox[{"x", ",", "y"}], "}"}], "]"}], "\[Equal]", 
    RowBox[{"-", "1"}]}], ",", "y"}], "]"}]], "Input",
 CellChangeTimes->{{3.822979471300815*^9, 3.8229794758674307`*^9}, {
  3.8229795142876997`*^9, 3.8229795147128067`*^9}, {3.8229795513354807`*^9, 
  3.822979572537774*^9}},
 CellLabel->"In[58]:=",ExpressionUUID->"ff7fb8ed-4ba4-499e-99e9-689a79e4a5ab"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"y", "\[Rule]", 
    RowBox[{"0.2675158621142974`", " ", 
     RowBox[{"(", 
      RowBox[{"7.048661024444451`", "\[VeryThinSpace]", "-", 
       RowBox[{"1.1176497303899737`", " ", "x"}]}], ")"}]}]}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.8547015163077464`*^9},
 CellLabel->"Out[58]=",ExpressionUUID->"f9f24c55-b633-4a2b-8a45-72d5c6403ed1"]
}, Open  ]],

Cell["Let\[CloseCurlyQuote]s now plot our decision line, margins and data \
points", "Text",
 CellChangeTimes->{{3.822995736250307*^9, 
  3.822995749390864*^9}},ExpressionUUID->"71aa4012-4450-45c2-aab6-\
28babcd20107"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", "data", "]"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"0.2675158621142974`", " ", 
        RowBox[{"(", 
         RowBox[{"9.048661024444451`", "\[VeryThinSpace]", "-", 
          RowBox[{"1.1176497303899737`", " ", "x"}]}], ")"}]}], ",", 
       RowBox[{"0.2675158621142974`", " ", 
        RowBox[{"(", 
         RowBox[{"7.048661024444451`", "\[VeryThinSpace]", "-", 
          RowBox[{"1.1176497303899737`", " ", "x"}]}], ")"}]}], ",", 
       RowBox[{"0.2675158621142974`", " ", 
        RowBox[{"(", 
         RowBox[{"8.048661024444451`", "\[VeryThinSpace]", "-", 
          RowBox[{"1.1176497303899737`", " ", "x"}]}], ")"}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "5"}], "}"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.822979645572371*^9, 3.8229796814266853`*^9}},
 CellLabel->"In[59]:=",ExpressionUUID->"370bfd30-4d39-437c-ba60-8fe86945b48a"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{{}, {{{
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         PointBox[{{1.284422952732416, 2.481901856407326}, {
          1.4879960382523703`, 2.402086883623099}, {4.193340935618989, 
          2.0674820899685353`}, {1.07511361074236, 2.8655605261563037`}, {
          4.5621522276001985`, 2.3036590135818598`}, {0.0734941576442104, 
          2.7567100412409644`}, {2.0267587486366514`, 1.8146817202743937`}, {
          1.7160467347301873`, 2.2314527869285374`}}]}, {
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         PointBox[{{0.3650725217541822, 1.4540111456859945`}, {
          1.8799169703454597`, 1.3235540770631689`}, {0.2775167301897557, 
          0.026781782266628973`}, {1.7185797382262036`, 0.8439744313421516}, {
          1.0440125841941863`, 0.8714161830961258}, {4.009012707820185, 
          0.4883132746354524}, {0.0444111436444237, 1.0249991478151106`}, {
          1.4175016236764821`, 0.3949618274790252}, {0.40287782851680287`, 
          0.35796696425588426`}, {1.3129335119181957`, 0.193320544474747}, {
          1.6678854129083547`, 0.5245058562945744}, {3.62477502445507, 
          0.2321920742831569}}]}}}, {{}, {{}, {}}}}, {{{{}, {}, 
        TagBox[{
          Directive[
           Opacity[1.], 
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[1.6]], 
          LineBox[CompressedData["
1:eJwVzH080wkcwPHNyMXC/MpxwiaRh7p0V6cn32/05PGU5KKus+ShpOa2XkWu
kpK8MNoVebmdPJTyeE3Rg4tEeUxKD7h2HnItv4UZm7Fd/fF5vf/7sNiHt+/X
olAoPp/7Yu5v7DnOoXGuIXSq/Zk9NGzoYnoHMnfBy7Y7jZm7aahprD3DZEaC
R3p06NVgGuY+TLXSYR6HFca9wrpdNIxazzs0ZZUM2qZ3TCg7adilihCMWmVD
0aJD2vG+NNTt6bcjrYqBXPPm3VGgYV6zkPPRqgaORVZeOsCiYVl5ck/UsmbQ
bXCVuYu1MBw6s0diuqDgw42L0flaGD1kPyAqewO/oryiOVwL9ViJdu9cxHBX
sPCBqZ0Wphm1OOT9MgAMkfW8agkV2T07/qa1voe+ZzreHsVU5DxOZB+2k0Cf
ZZMuPZKKlUfo/qYeJIz8EK7LXErFvLiDkuWBo8DxHZQvHqFggnBm28TIGOgs
xyXx5RSkdInxfqwM2txiX+lwKWjLDTu2w0EOev4ZvFPfUXBQfnmn/oNJqNht
UJ4l1YDn0IH4TI4CVhuI/OZHacB3kO9oaTkNi61NRsY/qkHyiH3qSakKnFtX
GnK5aljG6LZw3zsLjhxDozfjs6AH8pBemRrcS4qyxMdnYQsZNGUdQEHP/il1
y+QMvK4PpQY5UbEqVmfvN0dnoOp8w89MORVdi59t1lerIEyHJ25v18LbzwPo
4jgV7IuJq6JfoaF3ZtauQC0VfBvu2O4doo1bRJf/dE6Zhg5jJ33eah1c1un3
+NPcabhXlpDjRJuDqxKbOH4ZSoijOvi19s1BxxUKlcBACXq9sVujRbqY6DZ0
cl2aAoaKWALhia9w5r/0lHMmChAsMdOuCZiL7AsTXJFgCvhXwppCmHo4XGfy
PtF8CoIEe9rpw3rYESz3qy6YBMXGQqWwVh+LRlOzOxZNwsCQ27H6JDrmmA9G
Jt+Uw9X1zuZtIfPw5IaJr+3s5VB6lscIX2qAp2frfMLLJyApYJ8XTW6Aw+be
8XouE7CyN684qc0Q167kX8i4LYMs+5zSNi8jLB3MsLq3XgYnH6ZmedUYoWG6
T+aTu+PgYx5Q2GzDwBc5j9Uua8ZhQ3RTMCOZgTWuqnGv+jEQLmTbtMoZmNIr
aXDDMbB5dO2Sb7AxxhllWfY2jgJ/ab3D81pj7Cyixrz+cRTCZNqdTx0ItD3i
uZmT+wnYlePM5HQCJbX06qMlUohK8J/xzCCQ/zLoltt1KfD8Ra/oFwl0Gble
ZlAghfNyXhr/EoFJZpsKi3KkULZaqbqc+/nHjc/sviAFZZ2mu+gmgaH20qhV
kVLgP6enNjQR2HexgzW5WApX8g9FnHtK4JkbFhb1LCnkc9vdt7YQ6FR30DTN
Qgq3TfjTLe0Exkp1DW0XSKE3iIjoekmgmQfOBGhLwW7AzL1/gMBAdUV3VT8J
y0WxlgVDBGrmazpP/0PCmrM9yv3DBBY6+rT5vCXB2y634oOEQMVPHx4NdZIQ
c5BpOTZG4O+3WJUL6kg4se608i8ZgWubD5f8e5+Es/P6X3DlBA6IH1wrrSYh
qzw/RaEg8HuDoD82VZBw9ZR2+N1pAt/aXM9mlJBwc9t+txMzBCasnRT0XSNB
ZN1o4aom0GH7Rn5xPgm1MlulRkPgs4jMFJ6QhP8BMktLBw==
           "]]}, Annotation[#, "Charting`Private`Tag$23103#1"]& ], 
        TagBox[{
          Directive[
           Opacity[1.], 
           RGBColor[0.880722, 0.611041, 0.142051], 
           AbsoluteThickness[1.6]], 
          LineBox[CompressedData["
1:eJwVzH8803kcwPFp9GM2Z/veJRRTHlvmx/HoUZHT+3PSox9KSSiKs5l1pRU1
CtGR0D3MlJByO6S7rqiuVQ+SE4qU9ciU+5ormSUzF1tjs5nr/ng9nv+9XNhH
dnHnEQiE7V/638pM9nyf+PT1VzUrlPnuZmiX0bdF0vdCoaCY/rubGeaeNufQ
6T9Cit4c3cE0Q2VLobMV/SRsMuM9Vq5mSAwQHJ52LoDRRaKW7KVmkBkPlEw4
XwJvF9PlDIoZFsiHmOPO1+Hhjt5dRz/NQlWXOGnMuQF6bp5pibw7C/W3CuSJ
Xl0wESc+SfKZBR68uqROlgGrLrUx9oEJ+Eo3haQeh2dRZJ0dMgHJ5Qzzne8g
7CFGUyTNRhDaPmdV/aAAYiCvTrPRCGz57r+ILz7AL+me7t+0zUDSkzPsI0wV
XLG7XV0ROAN3jpLDlmwZh8YtE1WtXQaoSj+k8o6cgPYUVaZ0swGyxabQz+pJ
GPerVmS81ANBNoia0rSQEbs4ULhHD4zjCSd2s3QwnRWUmdM3DcO6sgjrR1Nw
fo13oGPsNGxVHjx1PkkPjh9fK0oHpiBkWOTu5DQDC01rswT7pkDVxj7dWWcE
7Fpk9dSwDryob5ZtiJ0FSrBPTTRHByTQxQ1ozcA42+nOUX2GTeNR08vDCciz
yf58CO8z/N0abxHlYYHKdjM1Vz5o4V5+ewxdZ4FccjR4IV8LCVaCQal0Hiq/
mSpmqzXASU6/R64gIq/ERjWerIFvee7SbXGWyE3YsEpinISXNA9rgZ8Vot5I
3pOcNgkP67MvexDnoyUxo5Yyi0lIt2DtfPHPfEQhOxTZZU0AaSBtM1+yAHX7
2jAyZz+B8ppLiThjIXqUywmg2XyCkpX2lg3hi9C5Tg9bPulfEFUkdMTRSejC
2iSNzZJxiCrZLyWPkFD8Ia9OAUsN+qBag7jZGtEuxu69unIMFMrAE615ZGRS
Wc/Y+aqgOsDHsTuOgtrWeESErRqFulwBledpgzrqOx7L4CPkhXOCiTobdGFM
TncIHYHVA1XX87q/Qv5O8f4rQz5Audvluu5gW0Q/xeOm71NCVktheXCDLRp+
9XZracQwbHcMr+1ypSL+mHRFargCvud3RFMLqGiNzzpyJXcIxEvZri90VDSQ
aH/7XNx7cG37rTQkmoaaeo9xHvEHQeTZyupppqHuecKvEy3eQYLW8tUzFobe
bFqKq00DwL6joRcUYShG+WvTtIMcErPDTFuLMfQHLeBuEU0OgjBJH/kChoyA
X2eS5JCvEwhFpRgqr6CWRRr6od7PYCyr/PLbkZ30oK8fDI/n3ly7gaHQRg4j
taQfRD3kwvYODAUVMURTlH6oqDl84OwzDBU3tZ4VWvVDzXHphs3PMfR+NOYU
YxaH+4tFM8+lGMoMKjsYocZhIAo7IHuNoSbDgo33u3BgKuw3DCkw5Bs/ahDk
4eAtSXO6qsRQfnHuBCULh3W5cgN3BEO9zS4jtSk4bGNW3h5VYSjNPqr3NReH
5EN0p8lJDN2VdtWvDsIh47ufDH9qMUQwJdR2++OQSxnqPa7D0E434hXuKhzK
b9X8rNdjaDLHv+DichyqT1vyGmcwFHCnL8vTAYcbodzADBOGhG+PpTyh4iBZ
/nTZejOG3lrbHt6/CIdmLcMwN4chd7+bHB0Bh/8AhmRTtQ==
           "]]}, Annotation[#, "Charting`Private`Tag$23103#2"]& ], 
        TagBox[{
          Directive[
           Opacity[1.], 
           RGBColor[0.560181, 0.691569, 0.194885], 
           AbsoluteThickness[1.6]], 
          LineBox[CompressedData["
1:eJwVxX040wkcAPAtL8lb5td1ysvGqWUtUnlCp+831Inlrth56c3mtUsvZNcL
nXJW1E1THpbOs0To8SBndQ9JTjUvRWWX4+hJ9Fs1dDTLZl7u7o/P83HkH9kV
u4BCoez4z/8X/cQ3do9J3dyX0d5Z4kXFRwoGJ4wRAcH+Zw7WeVJxXt70M4Nx
AFqMNi56uJGKRc0iuhHjJFRmlfoPeVAx0UdwaIqeDadz0u8x1lFRoU/IG6df
BXqhx60iFhUX9g8xx+i3ILa2OLPAlorFHdKkEXo9jL8+ueniLAWra7L7E107
IN17oSSmkYLx8OLqaLIC7KOOeV5Kp+Bh0mVYVt0Ho3fvc0f8KGjqmMl87TkI
681InpcBBXOsnrCKo4bBmtsTXSuaB35/6AODp0qoyvn1jcJ0HpIeZ/KPMFVQ
yaJHRFyYg9qj5iE228egbc/+8LPWc1CcelC1NmwcFNkRHiLxLGRIZ3ZOjk7A
DIdWuOnLWaAoBrHxlBouJAu1nOszsDIl7kQoSwPGV+o2+NJn4K2m4Huz+5+h
eLtU21emh0Dyh9OXk7TA0vsXcp31EPxWvNrBYRqWLi732FA6DaqH/DNtVXpw
qpeH32FPgyutx95v/yzY7bsesbxSB6ag4Q2o58Dj6sYhx3U6+GYscsqJS8FN
z7ICLGq00NsSQ41kU7EsPr9it6sW7mQ92sfQUNEtnyfm3J2COCPBYFfXAix/
oOQ6bpiC6OTUO+aFBuiT7lIiafgMbvGruzg8Q/QsXqVK9vsMz6zZZgIvI6Q3
vbF0b9HAveqMa2wDY2Qmhd/L3a6BVCrru6evjNGOnr21Rz4JpgOnAg7LFqLA
7cf209smgSxzzJOmmeDYS8bL1i415K1aZljPXYShx4VNGo4axIVxrTyGKfZW
l7vJFZ8gMm9vl/k7U2wOOFeo2/MJtP43ddImMyx45TBsNTABw6TviZbz5viL
iaCuI3oCbvi423byLPCoq5CX8GYcqoQCWvwaS0xW7SqoiB+H89zoIAONJd6m
NYgKBv8Bj4HiW+c7F2O4v2/FzVcfQeJyraozyAp9SrZ2a0fGIL1ZJAmqt0Kq
tvF3QjkKO2y5NzucaXiRViWefDsCWw637qZl0zA0zObkco0KpHZ856caGuou
T9mZTHwA54fl+cG7rbFveudz77n3IF7TwupussZM5orj663eQ5za8EU7i8BF
gYl9aot3wK/9xMi+RGCnxDVIZ6eExIyQmcBcAo/VpG17bKMEQYjsL/MrBNrK
O7bkLlFClkaQI84n8IA6ztPFXAnVXjp9QRGBJsHSFRF6EnR/zPeUVRK4zcCK
Ut9HgrjbXPSolcDmQxOyE/kkFJYcSjjXTmBcJtz2v0xCSUqXX8ATAi2viSqt
cki4u1Q8/aSLwL1tLjcqhCQMRBIJipcE6p34l3pTSGAOL/MbGibQq7f7gGcI
CWtlpxxKSQKHPjJiDb8lwVvYr4t9R2CW0ZGo54EkcJhFtz+oCPx7nVlYgi8J
yQcZDhMTBB4X+flL3ElI+/qs7jc1gfaluRCzhgShxdCfKRoC5Q2vvde6kCCp
Kbmo1RK49H2qexuDhBtnDOMbpglsnGtn59mRULkz1jdthsCYL2xWRdmQIHOS
22+eI9CCHfcVewkJTeqVuvl5Aut8ZQ7axST8C3yvQzE=
           "]]}, Annotation[#, "Charting`Private`Tag$23103#3"]& ]}}, {}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{0, 4.5621522276001985`}, {0, 2.8655605261563037`}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.08090169943749476]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Plus\"", "\"Minus\""}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{
               TagBox[#, HoldForm], ",", 
               TagBox[#2, HoldForm]}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.854701553590623*^9},
 CellLabel->"Out[59]=",ExpressionUUID->"5c773cc6-891a-4f43-a044-dbe2bb650180"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Solving the dual problem", "Subsection",
 CellChangeTimes->{{3.822995606787013*^9, 
  3.82299560948449*^9}},ExpressionUUID->"e82e002d-49e0-42cc-8e54-\
e6f0cebf4365"],

Cell[TextData[{
 "We could also solve the dual problem. First, we build up the matrix X and \
vectors ",
 StyleBox["y",
  FontWeight->"Bold"],
 ", ",
 StyleBox["\[Lambda]",
  FontWeight->"Bold"],
 " and ",
 StyleBox["e",
  FontWeight->"Bold"],
 "."
}], "Text",
 CellChangeTimes->{{3.8227406354649*^9, 3.822740643071721*^9}, {
  3.8229956177110577`*^9, 
  3.822995659533616*^9}},ExpressionUUID->"e94c3f54-6f1d-429b-ac94-\
ebd841892928"],

Cell[BoxData[
 RowBox[{
  RowBox[{"X", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"data", "[", "\"\<Plus\>\"", "]"}], ",", 
     RowBox[{"-", 
      RowBox[{"data", "[", "\"\<Minus\>\"", "]"}]}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8229948029074793`*^9, 3.82299483227779*^9}, {
   3.822994895491407*^9, 3.822994909677128*^9}, 3.8229956280829763`*^9, {
   3.8547017212151613`*^9, 
   3.8547017419907722`*^9}},ExpressionUUID->"3f6fc47f-55ca-41c0-9908-\
49ca27586383"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Y", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"ConstantArray", "[", 
      RowBox[{"1", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"data", "[", "\"\<Plus\>\"", "]"}], "]"}]}], "]"}], ",", 
     RowBox[{"ConstantArray", "[", 
      RowBox[{
       RowBox[{"-", "1"}], ",", 
       RowBox[{"Length", "[", 
        RowBox[{"data", "[", "\"\<Minus\>\"", "]"}], "]"}]}], "]"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822994836114833*^9, 3.822994836484962*^9}, {
  3.8229948876520557`*^9, 3.822994899517584*^9}, {3.822995205087777*^9, 
  3.8229952055487947`*^9}, {3.822995684929783*^9, 3.822995692354609*^9}},
 CellLabel->"In[61]:=",ExpressionUUID->"20a56d69-dbc4-4259-81e1-0e93d5109dc4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"e", "=", 
  RowBox[{"ConstantArray", "[", 
   RowBox[{"1", ",", 
    RowBox[{"Length", "[", "X", "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.822980054946007*^9, 3.822980060322157*^9}, 
   3.8229956746813107`*^9},
 CellLabel->"In[62]:=",ExpressionUUID->"10339893-fad6-4c91-bcd3-005fec9342e9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", 
   ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", 
   "1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.854701755338914*^9},
 CellLabel->"Out[62]=",ExpressionUUID->"229094c0-3aa2-475d-b7e5-a7697fb8ffbb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Lambda]", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "i", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", 
      RowBox[{"Length", "[", "X", "]"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.822736499045179*^9, 3.822736503094264*^9}, {
  3.8227368604226017`*^9, 3.8227368624132338`*^9}, {3.822979903555831*^9, 
  3.822979935021117*^9}},
 CellLabel->"In[63]:=",ExpressionUUID->"e07683dc-cd84-4d0b-80d2-29339c220f53"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\[Lambda]i", "[", "1", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "2", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "3", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "4", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "5", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "6", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "7", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "8", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "9", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "10", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "11", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "12", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "13", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "14", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "15", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "16", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "17", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "18", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "19", "]"}], ",", 
   RowBox[{"\[Lambda]i", "[", "20", "]"}]}], "}"}]], "Output",
 CellChangeTimes->{3.85470181251035*^9},
 CellLabel->"Out[63]=",ExpressionUUID->"d449e129-defb-4ea5-8458-a68bab26c10b"]
}, Open  ]],

Cell["Now we can solve the dual optimisation problem", "Text",
 CellChangeTimes->{{3.822995706595687*^9, 
  3.822995714144512*^9}},ExpressionUUID->"ed6a3e03-94c6-463e-8ee5-\
edd2ba5ddf24"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"max", ",", "sol\[Lambda]"}], "}"}], "=", 
  RowBox[{"NMaximize", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"-", 
         FractionBox["1", "2"]}], 
        RowBox[{"\[Lambda]", ".", "X", ".", 
         RowBox[{"Transpose", "[", "X", "]"}], ".", "\[Lambda]"}]}], "+", 
       RowBox[{"\[Lambda]", ".", "e"}]}], ",", 
      RowBox[{"\[Lambda]", ">", "0"}], ",", 
      RowBox[{
       RowBox[{"\[Lambda]", ".", "Y"}], "\[Equal]", "0"}]}], "}"}], ",", 
    "\[Lambda]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.822736506293404*^9, 3.822736542931388*^9}, {
  3.822736582192131*^9, 3.822736601610004*^9}, {3.822736708592511*^9, 
  3.822736715634078*^9}, {3.8227368193715153`*^9, 3.822736908461323*^9}, {
  3.82273778357137*^9, 3.822737786462852*^9}, {3.8229800257185307`*^9, 
  3.822980088764784*^9}, {3.822995719950317*^9, 3.822995720320966*^9}},
 CellLabel->"In[64]:=",ExpressionUUID->"ea4cc13a-b92e-450c-a913-362242655375"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7.6112505494675755`", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "1", "]"}], "\[Rule]", 
      "5.554138589192961`*^-7"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "2", "]"}], "\[Rule]", 
      "2.9615044338280887`*^-9"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "3", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "4", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "5", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "6", "]"}], "\[Rule]", 
      "4.8255378730656066`*^-8"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "7", "]"}], "\[Rule]", "7.61183588892712`"}],
      ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "8", "]"}], "\[Rule]", 
      "7.090481808561978`*^-8"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "9", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "10", "]"}], "\[Rule]", 
      "7.61183656646268`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "11", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "12", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "13", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "14", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "15", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "16", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "17", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "18", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "19", "]"}], "\[Rule]", "0.`"}], ",", 
     RowBox[{
      RowBox[{"\[Lambda]i", "[", "20", "]"}], "\[Rule]", "0.`"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.8547019133698897`*^9},
 CellLabel->"Out[64]=",ExpressionUUID->"d185a3e1-d995-4922-ab13-245c7a777bd3"]
}, Open  ]],

Cell[TextData[{
 "Notice that only a small number of the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Lambda]", "i"], TraditionalForm]],ExpressionUUID->
  "12925eaa-8f0b-4839-a8ab-ed03e79204c8"],
 "\[CloseCurlyQuote]s are non-zero; these are the ones corresponding to the \
support vectors."
}], "Text",
 CellChangeTimes->{{3.822995768165753*^9, 
  3.8229957970898952`*^9}},ExpressionUUID->"4a17afa9-4bb3-4bfa-9e7e-\
1967d1f6127a"],

Cell[TextData[{
 "We can next compute the value for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"w", "=", 
    RowBox[{
     SuperscriptBox["X", "T"], "\[Lambda]"}]}], TraditionalForm]],
  ExpressionUUID->"5474ab15-868f-48a3-8489-06a2766e72b9"],
 " and find b from one of the constraints with a non-zero ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Lambda]", "i"], TraditionalForm]],ExpressionUUID->
  "4980f3de-72db-43d6-b1b1-60a511f23ea9"],
 " actually being an equality (rather than an inequality)."
}], "Text",
 CellChangeTimes->{{3.822980687380495*^9, 3.822980759188776*^9}, {
  3.822995801432269*^9, 3.8229958171482553`*^9}, {3.822996118638393*^9, 
  3.8229961193526917`*^9}},ExpressionUUID->"4e33ebd1-1ff3-4600-8d97-\
0b8096964f14"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"wsol\[Lambda]", "=", 
  RowBox[{"Thread", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"w1", ",", "w2"}], "}"}], "\[Rule]", 
     RowBox[{
      RowBox[{"Transpose", "[", "X", "]"}], ".", "\[Lambda]"}]}], "/.", 
    "sol\[Lambda]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8229803676940203`*^9, 3.822980370015842*^9}},
 CellLabel->"In[65]:=",ExpressionUUID->"803bf8ca-c056-42b5-8345-c5283b1dd6ea"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"w1", "\[Rule]", "1.1177350872956595`"}], ",", 
   RowBox[{"w2", "\[Rule]", "3.7383838007277603`"}]}], "}"}]], "Output",
 CellChangeTimes->{3.854702135805679*^9},
 CellLabel->"Out[65]=",ExpressionUUID->"71cd1198-5c1a-435e-b957-916fae45fe25"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bsol\[Lambda]", "=", 
  RowBox[{
   RowBox[{"Solve", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"plusConstraints", "[", 
        RowBox[{"[", "7", "]"}], "]"}], "/.", "wsol\[Lambda]"}], "/.", 
      RowBox[{"GreaterEqual", "\[Rule]", "Equal"}]}], ",", "b"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.822980299440219*^9, 3.8229803357880507`*^9}, {
  3.822980380565118*^9, 3.822980395310096*^9}},
 CellLabel->"In[66]:=",ExpressionUUID->"181e0ab2-0934-47c5-82b3-a4d1eabe144b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"b", "\[Rule]", 
   RowBox[{"-", "8.049356113385207`"}]}], "}"}]], "Output",
 CellChangeTimes->{3.854702258058914*^9},
 CellLabel->"Out[66]=",ExpressionUUID->"407a75c3-0d4c-44b3-af75-9815fdf8af8a"]
}, Open  ]],

Cell["\<\
Check this agrees with what we found when solving the primal version\
\>", "Text",
 CellChangeTimes->{{3.822995837229766*^9, 3.8229958642857313`*^9}, {
  3.822996125451795*^9, 
  3.8229961292871017`*^9}},ExpressionUUID->"35032774-e30d-4dbf-99f5-\
7cc7e51618d1"],

Cell[BoxData["sol"], "Input",
 CellChangeTimes->{{3.822980458435069*^9, 3.822980458839958*^9}},
 CellLabel->
  "In[110]:=",ExpressionUUID->"5baa77ea-1997-43b3-8291-9e1ce9f621d8"],

Cell["\<\
Knowing the support vectors, we could also go the other way and obtain the \
\[Lambda]\[CloseCurlyQuote]s from the w and b found by solving the primal \
problem\
\>", "Text",
 CellChangeTimes->{{3.822740658820961*^9, 3.8227406684311666`*^9}, {
  3.822980644743555*^9, 3.822980660425441*^9}, {3.822995891711063*^9, 
  3.822995902827364*^9}},ExpressionUUID->"140257a3-8af3-40b2-a63b-\
ffe6b06ec56d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Inverse", "[", 
   RowBox[{"Transpose", "[", 
    RowBox[{"X", "[", 
     RowBox[{"[", 
      RowBox[{"{", 
       RowBox[{"7", ",", "10"}], "}"}], "]"}], "]"}], "]"}], "]"}], ".", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"w1", ",", "w2"}], "}"}], "/.", "sol"}], ")"}]}]], "Input",
 CellChangeTimes->{{3.822740582376663*^9, 3.822740584736486*^9}, {
   3.8227406932241993`*^9, 3.822740699900773*^9}, 3.82298062981874*^9, {
   3.82299587596375*^9, 3.822995881296171*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"94fa932b-ad41-415c-bf45-f61824fae632"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7.611251675460538`", ",", "7.611251675809735`"}], "}"}]], "Output",
 CellChangeTimes->{3.854702345390552*^9},
 CellLabel->"Out[67]=",ExpressionUUID->"f7bfe551-621a-4f44-ad69-08dd748fbe0d"]
}, Open  ]],

Cell["Again, this is consistent with solving the dual problem.", "Text",
 CellChangeTimes->{{3.822995886411324*^9, 
  3.822995911872384*^9}},ExpressionUUID->"1e40ec72-719c-4d47-a1eb-\
5c57eb1e9b24"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Kernel Trick", "Section",
 CellChangeTimes->{{3.8229808671994123`*^9, 
  3.8229808688641043`*^9}},ExpressionUUID->"b5bf50b5-4b7d-404b-ba9e-\
547513b6c38b"],

Cell["\<\
We next look at an example where the data is not linearly separable and we \
will have to apply the kernel trick. First we generate two datasets, one \
surrounding another. We do this by defining the data in polar coordinates:\
\>", "Text",
 CellChangeTimes->{{3.822980871595449*^9, 3.822980935565127*^9}, {
  3.8229995372104597`*^9, 
  3.822999537366713*^9}},ExpressionUUID->"4864c7c6-789f-4875-aaa1-\
93856e1c6573"],

Cell[BoxData[
 RowBox[{
  RowBox[{"SeedRandom", "[", "1", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.822996229626093*^9, 3.82299623234743*^9}, {
   3.822997457470047*^9, 3.822997488642921*^9}, {3.822997771600627*^9, 
   3.822997771959277*^9}, 3.822997838232868*^9},
 CellLabel->"In[68]:=",ExpressionUUID->"5ccd1294-7c3a-4f87-ae2b-3e891445abfa"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"r1", "=", 
   RowBox[{"RandomVariate", "[", 
    RowBox[{
     RowBox[{"UniformDistribution", "[", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}], "]"}], ",", "10"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Theta]1", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "\[Pi]"}], ",", "\[Pi]"}], "}"}], ",", "10"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.820566235317284*^9, 3.820566239801949*^9}, {
   3.820566292498358*^9, 3.82056631825038*^9}, {3.820566383186515*^9, 
   3.8205663870092916`*^9}, {3.820566422481707*^9, 3.820566489710216*^9}, {
   3.820566540917573*^9, 3.820566552171215*^9}, 3.820567090934923*^9, {
   3.820568129828504*^9, 3.8205681707426243`*^9}, {3.820568229018515*^9, 
   3.8205682693962173`*^9}, {3.822981645086172*^9, 3.822981647153126*^9}, {
   3.822981917118134*^9, 3.822981918568543*^9}, {3.822983087280572*^9, 
   3.8229830893453417`*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"0004fbc4-e895-41c2-bfa4-9ed1984559ac"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"r2", "=", 
   RowBox[{"RandomVariate", "[", 
    RowBox[{
     RowBox[{"NormalDistribution", "[", 
      RowBox[{"2", ",", 
       FractionBox["1", "10"]}], "]"}], ",", "10"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Theta]2", "=", 
   RowBox[{"RandomReal", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "\[Pi]"}], ",", "\[Pi]"}], "}"}], ",", "10"}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.820566235317284*^9, 3.820566239801949*^9}, {
  3.820566292498358*^9, 3.82056631825038*^9}, {3.820566383186515*^9, 
  3.8205663870092916`*^9}, {3.820566422481707*^9, 3.820566556912166*^9}, {
  3.822981648797325*^9, 3.822981649966735*^9}, {3.822981920493361*^9, 
  3.8229819221573467`*^9}, {3.822983091292787*^9, 3.822983093148657*^9}},
 CellLabel->"In[71]:=",ExpressionUUID->"697758f1-dfc2-46c8-a85b-118dfbf15810"],

Cell["And then transforming to Cartesian coordinates:", "Text",
 CellChangeTimes->{{3.822980938680564*^9, 3.822980946531595*^9}, {
  3.822997773906652*^9, 
  3.822997775129292*^9}},ExpressionUUID->"d9346f6a-07ba-4745-9a38-\
bdcf7b6b95e4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x1", ",", "y1"}], "}"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"r1", " ", 
      RowBox[{"Cos", "[", "\[Theta]1", "]"}]}], ",", 
     RowBox[{"r1", " ", 
      RowBox[{"Sin", "[", "\[Theta]1", "]"}]}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x2", ",", "y2"}], "}"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"r2", " ", 
      RowBox[{"Cos", "[", "\[Theta]2", "]"}]}], ",", 
     RowBox[{"r2", " ", 
      RowBox[{"Sin", "[", "\[Theta]2", "]"}]}]}], "}"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.822980948244487*^9, 3.822980972970742*^9}, {
  3.822981009727542*^9, 3.822981017014436*^9}, {3.8229816759439507`*^9, 
  3.8229816781142607`*^9}},
 CellLabel->"In[73]:=",ExpressionUUID->"f6edf7ba-a3e0-4442-8f9e-0ff52a668d13"],

Cell[BoxData[
 RowBox[{
  RowBox[{"nonsepdata", "=", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<Plus\>\"", "\[Rule]", 
      RowBox[{"Transpose", "[", 
       RowBox[{"{", 
        RowBox[{"x1", ",", "y1"}], "}"}], "]"}]}], ",", 
     RowBox[{"\"\<Minus\>\"", "\[Rule]", 
      RowBox[{"Transpose", "[", 
       RowBox[{"{", 
        RowBox[{"x2", ",", "y2"}], "}"}], "]"}]}]}], "|>"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822996285411387*^9, 3.8229963343138657`*^9}, {
  3.8229963672787457`*^9, 3.822996374118305*^9}},
 CellLabel->"In[75]:=",ExpressionUUID->"b222bd1c-dfea-423b-ac3c-ce6537daec63"],

Cell["We now have a non-linearly separable dataset:", "Text",
 CellChangeTimes->{{3.822996257502099*^9, 
  3.8229962710465612`*^9}},ExpressionUUID->"aa20f92e-3f62-4012-a4b0-\
70f91dd6e8a9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"Values", "[", "nonsepdata", "]"}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"Keys", "[", "nonsepdata", "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.822996341460595*^9, 3.822996360819833*^9}},
 CellLabel->"In[76]:=",ExpressionUUID->"7b4fdae2-57a1-455f-9334-d7bec952b862"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {{{
        Directive[
         PointSize[0.012833333333333334`], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        PointBox[{{-0.19418006351395, -0.7939897238477599}, {
         0.0009402659049429163, 0.11141564362630568`}, {
         0.6985681983270928, -0.36790456437588814`}, {-0.00295604144687557, \
-0.18777988106197538`}, {-0.23888242209918226`, 
         0.034500797441814446`}, {-0.02990472311744523, 
         0.05854307847237184}, {-0.4835702248162677, 0.24533902079622935`}, {
         0.20390719257284282`, 0.10887728322031986`}, {
         0.10538241515767546`, -0.38172681750042337`}, {-0.1824956607100494, \
-0.6762831160175996}}]}, {
        Directive[
         PointSize[0.012833333333333334`], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        PointBox[{{2.041251388907825, -0.35539451182767}, {-0.729497294004517,
          1.9430725958833286`}, {-1.9582099623680669`, \
-0.14589014711693948`}, {
         0.7549130603093654, -1.6895760872115724`}, {-0.5094375357680065, 
         1.9943197246955076`}, {-1.8706064275341703`, -0.14104829949370085`}, \
{1.4543618707479875`, -1.18363578035018}, {
         1.853565067751745, -0.4895674667312021}, {
         1.9874646392084663`, -0.5256987415568544}, {0.29568064965204355`, 
         2.0791324971956673`}}]}}}, {{}, {}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     Full, Axes -> {True, True}, AxesLabel -> {None, None}, 
     AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{-1.9582099623680669`, 
      2.041251388907825}, {-1.6895760872115724`, 2.0791324971956673`}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Plus\"", "\"Minus\""}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.8547026169700475`*^9},
 CellLabel->"Out[76]=",ExpressionUUID->"eca79425-1bc3-4aa6-9d2b-d142d8547f3e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Explicit polar coordinate map", "Subsection",
 CellChangeTimes->{{3.822996391599948*^9, 
  3.8229964015899343`*^9}},ExpressionUUID->"125c3fb4-950d-4960-89f3-\
f59c80d6202d"],

Cell[TextData[{
 "We first look at the case where we have a good idea for an explicit map ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Phi]", "(", 
     RowBox[{"x", ",", "y"}], ")"}], "=", 
    RowBox[{"(", 
     RowBox[{"r", ",", "\[Theta]"}], ")"}]}], TraditionalForm]],
  ExpressionUUID->"04cf3e5e-02d0-4c54-a598-5cf334149aa0"],
 " that will transform the data into a nice form. Define the map and apply it \
to our data:"
}], "Text",
 CellChangeTimes->{{3.822996407687862*^9, 3.822996467099221*^9}, {
  3.822996546639573*^9, 
  3.822996558875002*^9}},ExpressionUUID->"94ddb11d-5747-4a93-a5ab-\
a11e3e07c2c2"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"\[Phi]polar", "[", 
    RowBox[{"{", 
     RowBox[{"x_", ",", "y_"}], "}"}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{
     SqrtBox[
      RowBox[{
       SuperscriptBox["x", "2"], "+", 
       SuperscriptBox["y", "2"]}]], ",", 
     RowBox[{"ArcTan", "[", 
      RowBox[{"x", ",", "y"}], "]"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822981714997316*^9, 3.822981752475871*^9}, {
  3.8229818834395657`*^9, 3.822981884942523*^9}},
 CellLabel->"In[77]:=",ExpressionUUID->"5103ce02-778a-4063-b394-61557f5d8641"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sepdata", "=", 
  RowBox[{"Map", "[", 
   RowBox[{"\[Phi]polar", ",", "nonsepdata", ",", 
    RowBox[{"{", "2", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.822996523810607*^9, 3.822996533247594*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"4781060c-423e-42d8-bbe4-3d690bb4ba29"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Plus\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0.8173894901710712`", ",", 
        RowBox[{"-", "1.8106507743179687`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.11141961113123644`", ",", "1.5623572642627543`"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"0.7895259946338514`", ",", 
        RowBox[{"-", "0.4847436665256791`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.18780314670602638`", ",", 
        RowBox[{"-", "1.586537082861427`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.24136096745765043`", ",", "2.998158602370644`"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"0.06573875950878105`", ",", "2.043059003833555`"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"0.5422466205096242`", ",", "2.6720828955548726`"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"0.23115450673602744`", ",", "0.4904412673460606`"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"0.3960060815485871`", ",", 
        RowBox[{"-", "1.301437826423534`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0.7004737819422449`", ",", 
        RowBox[{"-", "1.8343692602173052`"}]}], "}"}]}], "}"}]}], ",", 
   RowBox[{"\<\"Minus\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2.071958612461975`", ",", 
        RowBox[{"-", "0.1723782891727108`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2.075499316991622`", ",", "1.9299482374851298`"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1.9636369806416225`", ",", 
        RowBox[{"-", "3.067228247631557`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1.85055696564651`", ",", 
        RowBox[{"-", "1.1506015446429476`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2.0583580269620114`", ",", "1.8208924036580747`"}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"1.8759165838390086`", ",", 
        RowBox[{"-", "3.066332623351288`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1.8751432242926847`", ",", 
        RowBox[{"-", "0.6831305889201751`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1.9171279990838217`", ",", 
        RowBox[{"-", "0.2582252416616537`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2.0558148892783366`", ",", 
        RowBox[{"-", "0.25858522674350404`"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2.1000521392274396`", ",", "1.4295301271134075`"}], "}"}]}], 
     "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8547026567343216`*^9},
 CellLabel->"Out[78]=",ExpressionUUID->"afd85425-62fc-4cbe-b4ec-58a330f285db"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"Values", "[", "sepdata", "]"}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"Keys", "[", "sepdata", "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.822996893604599*^9, 3.822996897158687*^9}},
 CellLabel->"In[79]:=",ExpressionUUID->"a31ed843-294f-407a-a131-a0fc6c8994fd"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {{{
        Directive[
         PointSize[0.012833333333333334`], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        PointBox[{{0.8173894901710712, -1.8106507743179687`}, {
         0.11141961113123644`, 1.5623572642627543`}, {
         0.7895259946338514, -0.4847436665256791}, {
         0.18780314670602638`, -1.586537082861427}, {0.24136096745765043`, 
         2.998158602370644}, {0.06573875950878105, 2.043059003833555}, {
         0.5422466205096242, 2.6720828955548726`}, {0.23115450673602744`, 
         0.4904412673460606}, {0.3960060815485871, -1.301437826423534}, {
         0.7004737819422449, -1.8343692602173052`}}]}, {
        Directive[
         PointSize[0.012833333333333334`], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        PointBox[{{2.071958612461975, -0.1723782891727108}, {
         2.075499316991622, 1.9299482374851298`}, {
         1.9636369806416225`, -3.067228247631557}, {
         1.85055696564651, -1.1506015446429476`}, {2.0583580269620114`, 
         1.8208924036580747`}, {1.8759165838390086`, -3.066332623351288}, {
         1.8751432242926847`, -0.6831305889201751}, {
         1.9171279990838217`, -0.2582252416616537}, {
         2.0558148892783366`, -0.25858522674350404`}, {2.1000521392274396`, 
         1.4295301271134075`}}]}}}, {{}, {}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     Full, Axes -> {True, True}, AxesLabel -> {None, None}, 
     AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{0, 2.1000521392274396`}, {-3.067228247631557, 
       2.998158602370644}}, PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Plus\"", "\"Minus\""}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.8547026715087533`*^9},
 CellLabel->"Out[79]=",ExpressionUUID->"aa3ad833-c01d-44a1-a721-2344b673c1a8"]
}, Open  ]],

Cell["Now we build up our X matrix with the transformed samples", "Text",
 CellChangeTimes->{{3.822996489429439*^9, 
  3.822996502165043*^9}},ExpressionUUID->"ef691abc-d69d-4fbc-ac0d-\
ff6784b6e37b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"X", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"sepdata", "[", "\"\<Plus\>\"", "]"}], ",", 
     RowBox[{"-", 
      RowBox[{"sepdata", "[", "\"\<Minus\>\"", "]"}]}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8229948029074793`*^9, 3.82299483227779*^9}, {
   3.822994895491407*^9, 3.822994909677128*^9}, 3.8229956280829763`*^9, {
   3.822996584986902*^9, 3.8229965874163322`*^9}},
 CellLabel->"In[80]:=",ExpressionUUID->"c3697bbb-cd56-40a4-93de-cea28ed32f0e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Y", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"ConstantArray", "[", 
      RowBox[{"1", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"sepdata", "[", "\"\<Plus\>\"", "]"}], "]"}]}], "]"}], ",", 
     RowBox[{"ConstantArray", "[", 
      RowBox[{
       RowBox[{"-", "1"}], ",", 
       RowBox[{"Length", "[", 
        RowBox[{"sepdata", "[", "\"\<Minus\>\"", "]"}], "]"}]}], "]"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822994836114833*^9, 3.822994836484962*^9}, {
  3.8229948876520557`*^9, 3.822994899517584*^9}, {3.822995205087777*^9, 
  3.8229952055487947`*^9}, {3.822995684929783*^9, 3.822995692354609*^9}, {
  3.82299659035343*^9, 3.822996593018736*^9}},
 CellLabel->"In[81]:=",ExpressionUUID->"7f62eda1-3c0b-407c-a08b-d18c2c93ccec"],

Cell[BoxData[
 RowBox[{
  RowBox[{"e", "=", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"1", ",", 
     RowBox[{"Length", "[", "X", "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822980054946007*^9, 3.822980060322157*^9}, 
   3.8229956746813107`*^9, 3.822996631988751*^9},
 CellLabel->"In[82]:=",ExpressionUUID->"88d360dd-dac2-412c-aa09-791ff1e2a4ff"],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[Lambda]", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"\[Lambda]i", "[", "i", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "[", "X", "]"}]}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822736499045179*^9, 3.822736503094264*^9}, {
   3.8227368604226017`*^9, 3.8227368624132338`*^9}, {3.822979903555831*^9, 
   3.822979935021117*^9}, 3.822996633439192*^9},
 CellLabel->"In[83]:=",ExpressionUUID->"74d28f7d-987c-4f65-b3c9-d804c565f631"],

Cell["Now we can solve the dual optimisation problem", "Text",
 CellChangeTimes->{{3.822995706595687*^9, 
  3.822995714144512*^9}},ExpressionUUID->"0dd756a2-321a-4c55-8b9e-\
139c2354cdd9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"max", ",", "sol\[Lambda]"}], "}"}], "=", 
   RowBox[{"NMaximize", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"-", 
          FractionBox["1", "2"]}], 
         RowBox[{"\[Lambda]", ".", "X", ".", 
          RowBox[{"Transpose", "[", "X", "]"}], ".", "\[Lambda]"}]}], "+", 
        RowBox[{"\[Lambda]", ".", "e"}]}], ",", 
       RowBox[{"\[Lambda]", ">", "0"}], ",", 
       RowBox[{
        RowBox[{"\[Lambda]", ".", "Y"}], "\[Equal]", "0"}]}], "}"}], ",", 
     "\[Lambda]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822736506293404*^9, 3.822736542931388*^9}, {
   3.822736582192131*^9, 3.822736601610004*^9}, {3.822736708592511*^9, 
   3.822736715634078*^9}, {3.8227368193715153`*^9, 3.822736908461323*^9}, {
   3.82273778357137*^9, 3.822737786462852*^9}, {3.8229800257185307`*^9, 
   3.822980088764784*^9}, {3.822995719950317*^9, 3.822995720320966*^9}, 
   3.822996814010791*^9},
 CellLabel->"In[84]:=",ExpressionUUID->"bf051e52-95e4-411d-86ba-2c7a63025fd6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sol\[Lambda]", "//", "Chop"}]], "Input",
 CellChangeTimes->{{3.822981972357045*^9, 3.82298197421145*^9}, {
  3.822996803910034*^9, 3.822996806800394*^9}},
 CellLabel->"In[85]:=",ExpressionUUID->"8ed9a95f-352b-42a6-9405-04ef4d80e29c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "1", "]"}], "\[Rule]", "1.8427241749438639`"}],
    ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "2", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "3", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "4", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "5", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "6", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "7", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "8", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "9", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "10", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "11", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "12", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "13", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "14", "]"}], "\[Rule]", 
    "1.2209646752483199`"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "15", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "16", "]"}], "\[Rule]", "0.621759499695544`"}],
    ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "17", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "18", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "19", "]"}], "\[Rule]", "0"}], ",", 
   RowBox[{
    RowBox[{"\[Lambda]i", "[", "20", "]"}], "\[Rule]", "0"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.854702703262914*^9},
 CellLabel->"Out[85]=",ExpressionUUID->"ac052bd9-954e-48ac-9d5a-4b4d3711a025"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"supportVectors", "=", 
  RowBox[{"Pick", "[", 
   RowBox[{
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"nonsepdata", "[", "\"\<Plus\>\"", "]"}], ",", 
      RowBox[{"nonsepdata", "[", "\"\<Minus\>\"", "]"}]}], "]"}], ",", 
    RowBox[{"Positive", "[", 
     RowBox[{"Chop", "[", 
      RowBox[{
       RowBox[{"\[Lambda]", "/.", "sol\[Lambda]"}], ",", 
       SuperscriptBox["10", 
        RowBox[{"-", "3"}]]}], "]"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.822983462611957*^9, 3.822983547509169*^9}, {
  3.82298362037705*^9, 3.822983623751202*^9}, {3.822996700815817*^9, 
  3.822996710129126*^9}, {3.822996763648779*^9, 3.8229967689445143`*^9}},
 CellLabel->"In[86]:=",ExpressionUUID->"57759d25-528b-4e58-9de0-473f0e7fa7ba"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.19418006351395`"}], ",", 
     RowBox[{"-", "0.7939897238477599`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0.7549130603093654`", ",", 
     RowBox[{"-", "1.6895760872115724`"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1.8706064275341703`"}], ",", 
     RowBox[{"-", "0.14104829949370085`"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8547027248879194`*^9},
 CellLabel->"Out[86]=",ExpressionUUID->"a8042aec-f97c-4fda-bd2c-426d7d09c714"]
}, Open  ]],

Cell[TextData[{
 "We can then compute the values for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"w", "=", 
    RowBox[{
     SuperscriptBox["X", "T"], "\[Lambda]"}]}], TraditionalForm]],
  ExpressionUUID->"9dde94c7-61f6-4e06-94ba-86ec428e1275"],
 ", and find b from one of the constraints with a non-zero ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Lambda]", "i"], TraditionalForm]],ExpressionUUID->
  "85fe3e40-252e-4acc-9861-457943632d96"],
 " actually being an equality (rather than inequality)."
}], "Text",
 CellChangeTimes->{{3.822980687380495*^9, 3.822980759188776*^9}, 
   3.82299708516726*^9},ExpressionUUID->"fa2fed76-7ef8-45bb-88bf-\
f7dad0734bb5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"wsol\[Lambda]", "=", 
  RowBox[{"Thread", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"w1", ",", "w2"}], "}"}], "\[Rule]", 
     RowBox[{
      RowBox[{"Transpose", "[", "X", "]"}], ".", "\[Lambda]"}]}], "/.", 
    "sol\[Lambda]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8229803676940203`*^9, 3.822980370015842*^9}},
 CellLabel->"In[87]:=",ExpressionUUID->"4bb2228b-5c54-468b-8f0d-318d0a1e1722"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"w1", "\[Rule]", 
    RowBox[{"-", "1.9196102673441504`"}]}], ",", 
   RowBox[{"w2", "\[Rule]", 
    RowBox[{"-", "0.02516467512633369`"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.854702757651944*^9},
 CellLabel->"Out[87]=",ExpressionUUID->"8f6d28b2-86bd-4150-b0e7-1c9703ad8ea3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"bsol\[Lambda]", "=", 
  RowBox[{
   RowBox[{"Solve", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"w1", ",", "w2"}], "}"}], ".", 
         RowBox[{"X", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "+", "b"}], "\[Equal]", "1"}], "/.",
       "wsol\[Lambda]"}], ",", "b"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.822980299440219*^9, 3.8229803357880507`*^9}, {
  3.822980380565118*^9, 3.822980395310096*^9}, {3.822984104177977*^9, 
  3.822984118529121*^9}, {3.822996837726273*^9, 3.8229968378944807`*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"12acf138-a12c-46d4-90ee-cb6bda9bf8fc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"b", "\[Rule]", "2.5235048192486325`"}], "}"}]], "Output",
 CellChangeTimes->{3.8547027589456043`*^9},
 CellLabel->"Out[88]=",ExpressionUUID->"4d857442-8dcc-4f86-b6c7-55e6ead33a27"]
}, Open  ]],

Cell["Now we draw our decision line and margins on the r-\[Theta] plot", \
"Text",
 CellChangeTimes->{{3.822997092894528*^9, 
  3.822997107733405*^9}},ExpressionUUID->"3cdd876a-61f0-4c1e-a3e6-\
e20a8bdb5b3d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"decision\[Theta]", "=", 
  RowBox[{"\[Theta]", "/.", 
   RowBox[{
    RowBox[{"Solve", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"w1", ",", "w2"}], "}"}], ".", 
          RowBox[{"{", 
           RowBox[{"r", ",", "\[Theta]"}], "}"}]}], "+", "b"}], "\[Equal]", 
        "fx"}], "/.", 
       RowBox[{"Join", "[", 
        RowBox[{"wsol\[Lambda]", ",", "bsol\[Lambda]"}], "]"}]}], ",", 
      "\[Theta]"}], "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.822997263298644*^9, 3.822997303650529*^9}, {
  3.822997350505608*^9, 3.822997355481245*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"e74cbda6-4468-43da-87fc-af120b2c9a1d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "39.73824398605271`"}], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "2.5235048192486325`"}], "+", 
    RowBox[{"1.`", " ", "fx"}], "+", 
    RowBox[{"1.9196102673441504`", " ", "r"}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.854702762382519*^9},
 CellLabel->"Out[89]=",ExpressionUUID->"082d1184-3d7a-4836-8ccc-685be0fe3509"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"Values", "[", "sepdata", "]"}], ",", 
     RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
     RowBox[{"PlotLegends", "\[Rule]", 
      RowBox[{"Keys", "[", "sepdata", "]"}]}]}], "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"Map", "[", 
      RowBox[{"\[Phi]polar", ",", "supportVectors"}], "]"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", "Black"}]}], "]"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"Evaluate", "[", 
      RowBox[{"decision\[Theta]", "/.", 
       RowBox[{"fx", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"1", ",", 
          RowBox[{"-", "1"}], ",", "0"}], "}"}]}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"r", ",", "0", ",", "2.5"}], "}"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.822996981286694*^9, 3.822997002086546*^9}, {
  3.822997044093986*^9, 3.8229970542634706`*^9}, {3.8229973664961433`*^9, 
  3.8229973703958073`*^9}},
 CellLabel->"In[90]:=",ExpressionUUID->"9ac46b35-a8c8-4fb0-8acc-7c9eb3da12f9"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{{}, {{{
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         PointBox[{{0.8173894901710712, -1.8106507743179687`}, {
          0.11141961113123644`, 1.5623572642627543`}, {
          0.7895259946338514, -0.4847436665256791}, {
          0.18780314670602638`, -1.586537082861427}, {0.24136096745765043`, 
          2.998158602370644}, {0.06573875950878105, 2.043059003833555}, {
          0.5422466205096242, 2.6720828955548726`}, {0.23115450673602744`, 
          0.4904412673460606}, {0.3960060815485871, -1.301437826423534}, {
          0.7004737819422449, -1.8343692602173052`}}]}, {
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         PointBox[{{2.071958612461975, -0.1723782891727108}, {
          2.075499316991622, 1.9299482374851298`}, {
          1.9636369806416225`, -3.067228247631557}, {
          1.85055696564651, -1.1506015446429476`}, {2.0583580269620114`, 
          1.8208924036580747`}, {1.8759165838390086`, -3.066332623351288}, {
          1.8751432242926847`, -0.6831305889201751}, {
          1.9171279990838217`, -0.2582252416616537}, {
          2.0558148892783366`, -0.25858522674350404`}, {2.1000521392274396`, 
          1.4295301271134075`}}]}}}, {{}, {}}}, {{}, {{{
         Directive[
          PointSize[0.012833333333333334`], 
          AbsoluteThickness[1.6], 
          GrayLevel[0]], 
         PointBox[{{0.8173894901710712, -1.8106507743179687`}, {
          1.85055696564651, -1.1506015446429476`}, {
          1.8759165838390086`, -3.066332623351288}}]}}}, {{}, {}}}, {{{{}, {}, 
        TagBox[{
          Directive[
           Opacity[1.], 
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[1.6]], 
          LineBox[CompressedData["
1:eJwVz3s01GkYwHFjdFnX0HayxQypKU0XG0rhfTOTlcZITHL/mRjKJSy7udS2
ImbLNHYnSUcTXSWSQzZqPC6lcimROlFrTbNKsjENBpn97R/vec7nfJ9znvNa
8g/tidDW0tLyJN//s+gof75teLRL0coPZZwdXNzSTef40XeivPtm5s+cuVjz
UHacTvdHmTwPkY8DFxdBLm0e/QCKySqLD2BwcYxzcuwkLQVtU8TaR33Dxd0z
UZLPNCF6eXlcdrzDEy/oG2R8op1DptazXXU8T1z8RJrwkVaKsq2MplYLOLji
lrAvZn0dWuJU01Yb4oEjUde5kcRmdCE4vK0qxR3HKdbIqyseIz/56EHbC25Y
1zKT8deWZ6g2S53HL2Rj0aI2m2KiGxltNFBo/nTF/D7fBmp7LzKYvNjgdQvj
hAeZ/EOM1yiNTU9yC3HGt+P1fZbufIPabyxqfFDiiIvTooc3+g2gSA+K+Y18
e5whnfX+MvI3UqqpXYKntlirewDfS5WjdnmqkOfAxKuSBId9bRSI7TYqusa0
xu9UZ/fq3f8HsfL0hL7+ZthDcfDI7wnvUdDET0T/Om3MfSdea2ExjIIViqsx
R2Yahpv5xx6Vf0Sm6wUrWE3fwnrjXnNW6CfUM5cT36a0Al2kCutXjqL6h1ul
Lek28MOngEkr3mekYzjxMsXHFl41hVMCmGNox+ez9N949lCT0xJCV42hgiaG
cZOJIwjmJQ90do4jaWDtuITuDPsT02r0C5XIP/E7WWsShg2Razs5YV9Q1fOv
/EYvV3hqwtRLdlSh8CVhxxb6sKG+IuM8kzqBaHvqE+Sb3CCNYrO7/c0E+j7h
TJ+eszvo9qe6x1VPosVMyZVKJw9QXLWUSNOnkOatkPXBjAOS1WY6d3lqxErW
+B+icUFcKGgNo0+jVopDCZuyGwIkwZ36Q9OoJ/9oq9HobphiX1FLZTMo13xB
KeVfb5ArXA83Zc8iDv1k0v23e6DE2XZZR9hXVLvYa1Y66APlWcnGkevmECPL
MI7zwheyeft3UVVz6AhrwGhzMw/s+4tLszs06BflWKz7g71QsOZ8eccuLZxN
09SsuOMHv0Buwa67WnibM6duZf0+8FzGu/LEmoJ7r5eNRtT7w/a41kBjIQX/
KJ5vEH8jAKTL+dbtKgqWHSgeulgeCNbN1/K5gdrYsGHzzfPSIBCva7J5LtPG
bP7AxZ5TwSBQ6nQ9tqHi1ZOPvO1EIcC/PU4XnqZio4XlI8FHQyEmw2fWI4+K
TfYFc0QZoZDsU/1S/w+yXze4KTsRCjmqZJE4n+zucdG006FQ4aieOVtExaY5
G4YHpKGgbtT0Xi2j4sULq4b2N4aC+Ll+bksrFRtkBo7ZaRNQeCk26sRjKja8
ucnSU4eAS0mdLPc2svfoeUfMJ+DOEvF0WyfZre9VntEloD/ANKr7BXm/ZXn8
hAkBDLkZa1BOWuftaO0KAjZWp1pcVpBm3rF4tpKArVl96oghKjb2FXHfMwjg
MIoqPwxT8aLLLhVLmQQkRtMtxsZIs6WxKXYEpDv9qq5SkvsxPxflORCQZTDY
k6QiLfHqKN1CQMGtSyenpsj/vtMwXzsRUHJMJ7JumrT+q6BxFwLKvCNc02dJ
21We0t1OQLXVQ3OXOdJBOfesWATIlKvUGg3pTGJk6w4C/gP5QUbm
           "]]}, Annotation[#, "Charting`Private`Tag$34970#1"]& ], 
        TagBox[{
          Directive[
           Opacity[1.], 
           RGBColor[0.880722, 0.611041, 0.142051], 
           AbsoluteThickness[1.6]], 
          LineBox[CompressedData["
1:eJwVyXs01HkcxvHRL1sbKqVObZmZOtVk3HKULuT7EZnfkCIktzLjWsi9dW1m
J5dmLU2Sa9OEYi1JpfZoN/Mtyk6YjSnbRocwXYQlTYysWfvHc57zOu8N3KjD
wQsoFIrL/P5/8RnuNxZB4bYXIuty8/gcaFHQD3jR2Sj34szJO2c4oHnSdJZO
90bZjY6s56kcEOMcmjb9BMrQ7tOsSuJAxN6EyClaEkoSL4spjuGA4mtY/jhN
iAI6ot2vcjmwqGeAMUorRmamlmvqHDhQ9lQS85FWjdpHfi2TLeZA3U1hT4TZ
fWQeV3ZkNDMAQlFn8UhsM8qzzlldqxcAp5RGgw11MkS535daaHoclmxIZ/Tt
eobMdYKX1xsfg9zlbcyyAAXy7R9rnNvjD9weDynR3o1eNe+q2mLlBzGP07lR
jFcozjs6aLmVL9yK1nVfw36NFsXV7tzG8oGylPDhbV79aKzk54NGDt4gkMy6
fR55gzodq1OOHj4KFEU//J48iOTXChPZwV6wJT4k0YOpROv1HRtXBh2BIVXh
EZ0Hb1GYlnqZQbwnOClPpuXFvEeLKRG/jEZ5wMEhkTGVOoyk9e0Gwmh3GG7m
8v+48RHFKS0u+QgOg5l+t6H98VGUtNXLW5vvBkuQitM7OYbS/uFbvs11Bdao
z9RGz3FUKXxRDisPwctHQVo+JhMosyj9zK4VLnD3XMsxumoC+d20ybxs6Qwh
2gn9cvkn9HIgftUdEzYExqbc1S2ZRIeo957tIFlgHmosP8D5jL486DK2idwP
f64w0UnYrUIOyVFLVSfs4bc6QakJ8QUJbVcZfie0gxQtpmv76y/oo+3pkEGN
LSzpTSZPNUwhI1liVzHFGpSVG/IlqdPILTCnYKvjTsjfunZho6catVmVn1hv
bQmikpBWDn0GhW3PM+r8YAY++f5y3XcziPjJRfP9WQZMO1xXS5q+ovDaFW87
p6gwqNyX+ChrFk1Rrvsyp5dB+V6LdR2cf1FXtkWpIr1eeiMjQT/UdA75l7Q+
b/h7Kc7yDHQmVHPox9u8rHRnKt7RW1ad1aFBvt4u212sGLjIqPRGhzMFShvv
xTMemGEezilybqTAZcX5ttJYS+yyzvP6001asEigJ74ctxPbnWr11RdqQRo9
afVjc2ssWc/d1K7SgqqMIf45G4Q3NVcVHPRdAHGjV2S7BXZYZPqI2dW0AN5Y
jt+u8bPHIZMLO2VMAqr9HxqEH9+Pubc+0YXnCTjNEzo1IRaOELjPOl0gIIU2
/C2NZOEE94a/dC/Od6mTjOfKwudUCbmiAgJSNTqkHYeF63arvxaKCUjj5e5v
EbCw+qGmu7KGAD7vIjx9zMKiLt2cllYCsnliq25nEpdURIZlyggQ0eZUVh4k
roiX25Nt81167G6hH4nvrRbNtMkJuKChbfeOJHGvz8owxQsC8njlFr25JGYM
rrUfGCTgEq/KZKCTxNsakqnXlAQU0BaP7HtF4j0ZPergdwSUSsNqKgZIfIAh
rv8wTEChxogZPEni2HA6dWKCgCJeLeO9ARun2vygvj1JgJim9440ZOMMvYHn
8SoCrkgjK6s3s3HRzYrs6el5a8w2h1uxcTl/Yej9GQIkkvNDbbZsXOMWvC91
dt5ovMKExcYNG58Y2s7Nu881MOcQGzdNblFrNARc5d3aOObFxv8BcupEzw==

           "]]}, Annotation[#, "Charting`Private`Tag$34970#2"]& ], 
        TagBox[{
          Directive[
           Opacity[1.], 
           RGBColor[0.560181, 0.691569, 0.194885], 
           AbsoluteThickness[1.6]], 
          LineBox[CompressedData["
1:eJwVyX8803kAx/Ft38qRu8dxdOkH8ytnUX7EQ672+WgnP8bOr31ty91lKxSt
cuaEfhlJHSmKSDtJ8pAf1XRFp09ySckdq3WFUrMIK6yxH7Jbf7wf78fz8bLl
7o7YTiIQCKGGff6KA9xF7tsSqZobl2/JzdiwQ0IOiSYHgWmSX7LTV2yov98m
JJPZQMF4TtlhwoYVKN9mIXkHGHprfG6CxIZJGwW7Zm32gQdLEg8olSwo0SUU
T9rkgTOprjSilAWN+t84KWzOAk/va90ryliw8qFo77hNLeA3t76KtGPBhsa8
/qQ1LcCrvSCo3DoaxoPesxPJ94AmIq5rqQsO+XJnmbihC0hPr7ZiUZnQxDbb
6ZXPv2DhSNOVPRuiYMHXjyiVWyXA/bYvfoceCbn9UXewbiloEmXTRjZHwL1/
Z3N3O70AQV63Cb2bw+HVPaaRS4MGwSBDLZmMDoOVGYljbtFDIFcx+lRSy4BZ
ornwjxOvAcN/bK3H/RBIkAzB2+kyEEDsdLaYCIarUuLSoihyIH9uX3f5XSAc
VpXgi/96CzJb8li1xgEwWL5z/6m9o6Dlz935MUR/yBguXG1tPQacrdy5RSQa
HLvHPfSgfhycytJxvVf5wTVm0pW0XxSAava79FsaFZoAVeyA8j2gu3qC8gO+
MEDBmbVjToKLWS9uCHd4w//atxE5LlOA94cP/9d4D9h8tONnsmoKkM+F61Kj
XGHcQsFQT880MN/p4dPr4wh5yRnNpmVK8KKRH3wzdDlcG7+6JyT2I7Di1GyW
jn8B/zF3WSxYrwLDQk8q305xp7Uhq9wFmwEcRmmEY505yiBSwroHZ0B6lThs
XbotMhlID+SLZ4G+oDGtM80ZyS/ZFosy1SDalaZ+kuqGir+zWnCLqQGD7DWO
rw+vQ4VlcZ2xZC1ISTXSWgT6IE7xTz2mI1pQ89D5hJ/ue6T+oVojatOBfDnd
0lgPkEy+Ka09dw74q+tt5176oQsb3Zc/jv0Elr32cr/7lobqcwRm8a7zQHtX
bLGs2x/lMnl0TDUPqqks1oeaAOQ1UFmb+1gP6s5nWJhfCUKlzuX1j+kE2Dpz
+uKDfDo6iPJL6bcI0M7Drb67JBSFLmdWP3QgQpbxB8vQ0h+RH79zi1keEQYl
RdS6tYYh0QquQ7eKCIv9FcLYtnDkcK/mDGMLCQ6XCQNjmiJQoWs7pa+NBJdR
XTaerohEccoFvV0UDM73Wbz/eD4Kca9Ok/NOYFAuUx+1PsFESVmRc8EnMTjq
WTvKKGIiQaT4mWmRoQvZgQdLmOioSlBQeMbQ7VuMhkRM1LBeoyupwOA7XsaR
yiYm0tzVSy/VYXBM9kno0MdEhX2m+R2dGPwgIx2kWOKorGpXwpEuDE57Xn/J
scJRVUoPLfARBieFPOrxlTi6saRQ+6gHg0r7jk/jjjga4HyTIHlqMC8ns94b
R04yK9obGQZVMqN0NxaO3MTp1hflBnvefL41Bke+Of2a7SMYnBUmrD+5FUch
ThVN78YM3b5LPZWAo+REsvXUFAZneMd+u74PR5kbDmuuKTGoue77TLYfRzlf
vnmSojIYG/e2yMJRaWPVcbXa4Cr6TMoxHF04tCC+RWuwUsesLsBRXfj2TZlz
GNTSrjQ/PYUjsd39ldR5g4tiLBeV4KhNuUqj1xssMxV4l+Pof1rVWPs=
           "]]}, Annotation[#, "Charting`Private`Tag$34970#3"]& ]}}, {}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     Full, Axes -> {True, True}, AxesLabel -> {None, None}, 
     AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
     Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{0, 2.1000521392274396`}, {-3.067228247631557, 
       2.998158602370644}}, PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Plus\"", "\"Minus\""}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.85470276472505*^9},
 CellLabel->"Out[90]=",ExpressionUUID->"c2b5b3ad-1126-4c83-a1bc-4ba95bdcf2e9"]
}, Open  ]],

Cell["We can also draw them on the original plot", "Text",
 CellChangeTimes->{{3.82299711180614*^9, 
  3.8229971191969137`*^9}},ExpressionUUID->"2c5cf1ec-d97d-4d2c-bc13-\
067fa2c68da3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"decisionr", "=", 
  RowBox[{"r", "/.", 
   RowBox[{
    RowBox[{"Solve", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"w1", ",", "w2"}], "}"}], ".", 
          RowBox[{"{", 
           RowBox[{"r", ",", "\[Theta]"}], "}"}]}], "+", "b"}], "\[Equal]", 
        "fx"}], "/.", 
       RowBox[{"Join", "[", 
        RowBox[{"wsol\[Lambda]", ",", "bsol\[Lambda]"}], "]"}]}], ",", "r"}], 
     "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.822997263298644*^9, 3.822997303650529*^9}},
 CellLabel->"In[91]:=",ExpressionUUID->"739518e8-41fe-498f-8b1a-d648f3d8a6fb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "0.5209390765467908`"}], " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "2.5235048192486325`"}], "+", 
    RowBox[{"1.`", " ", "fx"}], "+", 
    RowBox[{"0.02516467512633369`", " ", "\[Theta]"}]}], ")"}]}]], "Output",
 CellChangeTimes->{3.854702771652211*^9},
 CellLabel->"Out[91]=",ExpressionUUID->"7bbdaf1e-ece4-4cb7-a7a4-c16b3ad0bd12"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"Values", "[", "nonsepdata", "]"}], ",", 
     RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
     RowBox[{"PlotLegends", "\[Rule]", 
      RowBox[{"Keys", "[", "nonsepdata", "]"}]}]}], "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{"supportVectors", ",", 
     RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", "Black"}]}], "]"}], ",", 
   RowBox[{"PolarPlot", "[", 
    RowBox[{
     RowBox[{"Evaluate", "[", 
      RowBox[{"decisionr", "/.", 
       RowBox[{"fx", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"1", ",", 
          RowBox[{"-", "1"}], ",", "0"}], "}"}]}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\[Theta]", ",", 
       RowBox[{"-", "\[Pi]"}], ",", "\[Pi]"}], "}"}]}], "]"}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.822982966741523*^9, 3.822983017155324*^9}, {
  3.8229841909463043`*^9, 3.822984249421977*^9}, {3.8229971304059*^9, 
  3.822997135497827*^9}, {3.822997309219988*^9, 3.822997326903941*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"8c0a27cd-0ef5-4831-b3aa-cb1a23f67122"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{{}, {{{
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[1.6]], 
         PointBox[{{-0.19418006351395, -0.7939897238477599}, {
          0.0009402659049429163, 0.11141564362630568`}, {
          0.6985681983270928, -0.36790456437588814`}, {-0.00295604144687557, \
-0.18777988106197538`}, {-0.23888242209918226`, 
          0.034500797441814446`}, {-0.02990472311744523, 
          0.05854307847237184}, {-0.4835702248162677, 0.24533902079622935`}, {
          0.20390719257284282`, 0.10887728322031986`}, {
          0.10538241515767546`, -0.38172681750042337`}, {-0.1824956607100494, \
-0.6762831160175996}}]}, {
         Directive[
          PointSize[0.012833333333333334`], 
          RGBColor[0.880722, 0.611041, 0.142051], 
          AbsoluteThickness[1.6]], 
         PointBox[{{
          2.041251388907825, -0.35539451182767}, {-0.729497294004517, 
          1.9430725958833286`}, {-1.9582099623680669`, \
-0.14589014711693948`}, {
          0.7549130603093654, -1.6895760872115724`}, {-0.5094375357680065, 
          1.9943197246955076`}, {-1.8706064275341703`, \
-0.14104829949370085`}, {1.4543618707479875`, -1.18363578035018}, {
          1.853565067751745, -0.4895674667312021}, {
          1.9874646392084663`, -0.5256987415568544}, {0.29568064965204355`, 
          2.0791324971956673`}}]}}}, {{}, {}}}, {{}, {{{
         Directive[
          PointSize[0.012833333333333334`], 
          AbsoluteThickness[1.6], 
          GrayLevel[0]], 
         PointBox[{{-0.19418006351395, -0.7939897238477599}, {
          0.7549130603093654, -1.6895760872115724`}, {-1.8706064275341703`, \
-0.14104829949370085`}}]}}}, {{}, {}}}, {{{{}, {}}, {}, {{{}, {}, 
         TagBox[{
           Hue[0.67, 0.6, 0.6], 
           Directive[
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]], 
           LineBox[CompressedData["
1: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
L1anaoYawqoqLkNlwrkSf677vgk/8T+MBb9S
            "]]}, Annotation[#, "Charting`Private`Tag$35950#1"]& ], 
         TagBox[{
           Hue[0.9060679774997897, 0.6, 0.6], 
           Directive[
            RGBColor[0.880722, 0.611041, 0.142051], 
            AbsoluteThickness[1.6]], 
           LineBox[CompressedData["
1:eJwV13c8Vf8bAHCzJZUoiUooFYo00Hh8qaxoR0hCUUklpZJUQoiKsiIjWyp7
99gje4/svefluveeo9/5/XVf79e599xzPp/n84ztJvfO3+BgY2N7ysnG9v9P
Y7Ol0GXLlzAuNqfm2/tf2ZKiN+2Hly2h/MprrsdD7mLTvm2rCij7cXWUi4bY
o8pnUPehHFVqaM+m4IwvhLoOm1C+rq8i3BnsgcWnBVt3Uq6+KJ5R7+iFds6c
0v3cSzgX9k4//rAPigzkygZQlpRU5LEb88eDOlZD6pQ33HXtPxIchAZW0men
uZZQ/OqMg21MCIpkbLnzgXJWqG6WhmMYLlrcVNhNeUR2n5zA1XA86yCdnsm5
hIYW+62aDkXitULf0ROUVz3Y+u/9umjcWVJbXcKxhDEGSfeVR2Pwg/j1pDT2
JUT1oV1vguIx7fn6RAnKHVMbXDfa/sQXXppmbmxLuMPeeUkn+hey2W3uh38k
phtW7C56lYi6r0QS3y+RKHJlXNLWKglvxT090EKSeGToS5mYQTJe0JXRvUCQ
GMR2m+/mgVTsPk7QnVgk1ubcPUGKpqH1BkGdBCaJ4e/KD3jwpqNlxwHh2UUS
O/famvsMZuACeCmLzJOY/Erpj5pfDloGHvQWoJEYxfk96Oub39jsZxDEPUei
+bytyfh9xJUPLVtrp0lkU5GcSAnPRaLlJ2P9OIk+VZZbmM/zUYh1i692lMS1
PE92Lc3mY1+BTp/LCInZw47FhEUBag3zpnUNkli02Ks+crEQvf4QuxR6SAwM
IFSfSxej/NoAkewuEoWDlQvPhRXjDUm7SoVOErU7FWdFN5VgBi3VQuQvibcV
i/vjOEvxYLrSx3cNJPL1snM+aCtDxWYLPr5iEuu2rBINdq7E8kE5DnoBiYps
ZVY93FU4oKb5sCGPxJrMy/KbnapQfGpL66McEs/7fn5n5ViN2+TKi88nk0iv
jFStxhpU2sZZ9SiERMelP7NkZh22eDKEGoJI/Mb/TV2TWYfnGVKzu7+Q2L7m
XdoHxXpcePFJM/sziTqvdf140usxyGl3kp0biRXq3y3TkhuwmXtu101rEvc8
MA5q/t6E7b/IkGP3SNxv+5YvZ6wJt9kEJK22JHHqV86LL3uaUbjq4fePN0hU
f+VDqEQ3o5af54rDeiQaKNz5oPStBRtvvjo3fYTErw06D7N927D38ol2CZLA
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
/+7lYVeD/OirMyR88BOZX3TKRb1++QjWeRIwfYWoKzW3Jf2p6im4QMKX7YmP
GfbZqFigK+R0kYQJgx2+Zn5ZmDry48nsJRJ+7FDkk67MwM9/jod8vUzCSHBB
y9uhdHwkrpyvqkutR+TYyR72dNTfJjP/RI+EodKpcadDqcg+NMS98goJiXxZ
n+rOpuDivcR1XpSf7eL4LXwnGQ++fLJBQJ+E5q6c4OtOSUh3lxR4T3nh/tD9
8OBETE/5sZrTgIRHVk8s+jMS8FTV0tI9ysfTbudsb/iFFx8X1RwwJCEmJi11
D98PrFuz89c7ymwdXyX8Tn7H9dHirh2UC52EuTmexeKpZ2kGkldJYK8TK7b4
EY39d9olb1N+ORrTWNEbiVF87yciKD9oiQjdKxiBbj8qv7dRFr/D4+ep9Q0L
5f1urDCi1mNL9c4Jh1CsVp4W3EdZn1Fm+9kiGHXFWwt0KDcKvnI7U/sFjzfr
3jKnLKcXc32lkh9+WfZwxVPKbOySrQVhnzBmpXyoI2WzmPYKB56PWDMYKu9C
ec3Ky3LPh90w4Hw5/v/6wJUe2X8ZjhjxM/vk/3+/LFcyREDwKf5Y41T0//tr
/3mz2d7mBj7fexDOULaDt0c5BbSh3a4r8f/Pt66TvVri3wMI4fMTXUl5NWMg
sFHmJXxIt3n7l3o/3wOGIisMXcBs6N1oJGXnk2f27nLzhN/5jFN3KK/Z4c+7
ud0Ltm5pCtr1f4vlbtjw0AcaHx+f6qTWl6bceYFrVQAsXzp7xJNyiaPi+GBI
EHz2lHl9iDJxzJO980sICCbOFzRT+3cX7hj9Zx4GNcEVbNaUt050bA3aHw4R
R5sVuCnf5+JvnCYjYI3wUcuPVDw4zCnyHy2LAlHNtKJPVPz4i+2+n3YtDvaK
i4/zUG77apQ0uCcenHQ+rXlOxV9lsHEJz8IPqNp2Ql2Nik8JH9PGzacSoCB9
4FoYFb9TGleqA6USodP1vM0CFd8XDx1t2sSXBJxSNz+5UvEvvsls39LfZCi5
bB9SSp0PqSkmv3leCvBYK8eyUYZ2sT1lkalwJDAnzeAcCRkOXWufPEgHOTff
vBzq/H1mfsp/tiwbHv/N0/lJnU8LNa75Tf+y4fPTsK9+1Pn9oHNPOJ6eA1bJ
HG/Pa5CgNRgsnTqMkOew450pdf7zf7F3bh/IgzX6LYr8VH7gaB6mnbieD0ID
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
GA==
            "]]}, Annotation[#, "Charting`Private`Tag$35950#2"]& ], 
         TagBox[{
           Hue[0.1421359549995791, 0.6, 0.6], 
           Directive[
            RGBColor[0.560181, 0.691569, 0.194885], 
            AbsoluteThickness[1.6]], 
           LineBox[CompressedData["
1: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
3PC3a1M2mYsNrM/ZeCTB9pHqjzdIZ1GENBTm42H9M66MSdKn9+T5Ccd+AgE9
V7rYZwIM7jVVMuvGgW143cZbpA98EVUZ4ogFztv034Gkpfys9bD4I1SLMHJL
SEdttNKLcIwGfb/Wc7OknS/lSFGvRsKFDP/Pm8m5VdN1tCax6D38azyyIEX6
0nCvxK39YRD4Gv+pkz66bdMif1AwMJeeGDYgrb8y09b0NxCWEzLDrEl7Pxg1
8zbzB0r23j1OpM9+qkp9G+MDXIkpHi6kH51J9d7s+AqOBqvl/d8F/5RyQ9Td
YaRjY9H/X9/clUNckHeGC5tYImxIN56yArchOzglcVrzFmmH9q9vpUQNYItZ
W9M50vfEUk++cTmLpSpN4odJR8nP9sVr3UN8p3aNl/RFHcETua4Pca2t9vUF
cr3nLggdeDrriovHWA5VkNbfo7nNZ5snPn7v0BtCess2D/7Xyt5YEYD6JqSv
+L+3OS73Fh1v/cmUIG3easMj2hCAVv6qvXPk8xA1ZLrIbPIOh/4U9iSTTjjL
69q6FILyZU8zjEkHa9xnCvMLR26d+OtbSOuupey/tOcDShjqdpeQz/8Cu4He
Sn4UGk3mSFqQ3n24MIz7fgxWjjDrp5L7KbSRbdvl3FhcHv2grEr6Z+ndGN+V
ONx7p/pYP7kfvUyvxU27JyC3kfmJZXK/Lo3dct1YlYit7yQ0n5MWdXeSFuVI
RpfvQmZrSbtOU3tlglLxl9GJgkXyPORcGD9+qCsNxYWLflmQ/ivOKyu8IwN/
qYud7EkhgN1WemqhORMlbK5OJiSTOSJf1/fe9c94/kF57Xry/D05suX38ZXP
mJpZZ6xDns9Tc2aLaz58QQU9HdbweDIHHMkUfz6Yg+4vyu5v+0TuJ5kbG/ab
5aFPNM53k/XALO38UjHbN2TTV6L8JetFqkvNOe3kb3jv8SEmIdIn1L2e6s/l
o/pdbU3NSDKnafh3bbxfiBlDqh9syPrDvV35ozHfDxy/9HG7JVmf1q+yhGTm
/MDr1LD422T9snITtpFeRJQVCqcrBf//73QHNY1OFeP3BTvjan8yVz1S92Qq
KcUvJgp9Ey8JqGG5qXqDpwz3VZW9eudJ5s7h+/eyjcvwT8nxc6fIeqvhWuh1
fm05Gl+7y/ucrM9WLME8CsoV+BZff68l67eYnelzSlkVxqhwlTnYEiDDNiGQ
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
CtNrgm4PkU6XXxq0d4o/+T+7+kP1
            "]]}, 
          Annotation[#, 
           "Charting`Private`Tag$35950#3"]& ]}}, {}, {{{}, {}, {}, {}}, {}}}, \
{}}}, {AspectRatio -> Full, PlotRange -> All, DisplayFunction -> Identity, 
     DisplayFunction -> Identity, AspectRatio -> Full, Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{-1.9582099623680669`, 
      2.041251388907825}, {-1.6895760872115724`, 2.0791324971956673`}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"\"Plus\"", "\"Minus\""}, "PointLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {10, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"PointLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.368417, 0.506779, 0.709798]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", "0.012833333333333334`", "]"}], 
                   ",", 
                   
                   TemplateBox[<|
                    "color" -> RGBColor[0.880722, 0.611041, 0.142051]|>, 
                    "RGBColorSwatchTemplate"], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{"False", ",", "False"}], "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.8547027752492266`*^9},
 CellLabel->"Out[92]=",ExpressionUUID->"8ed755ef-3a70-4692-a9a6-fc58e77b7721"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Explicit higher map to higher dimensions", "Subsection",
 CellChangeTimes->{{3.822997531303759*^9, 
  3.822997543022784*^9}},ExpressionUUID->"46fc5f4c-3ffa-48b9-b86e-\
56250f6201ff"],

Cell[TextData[{
 "There is another way we could get support vector machines to work with this \
dataset: by projecting onto a higher dimension. We now try the map ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Phi]", "(", 
     RowBox[{"x", ",", "y"}], ")"}], "=", 
    RowBox[{"(", 
     RowBox[{"x", ",", "y", ",", 
      RowBox[{
       SuperscriptBox["x", "2"], "+", 
       SuperscriptBox["y", "2"]}]}], ")"}]}], TraditionalForm]],
  ExpressionUUID->"16787ddb-9d94-4d3b-b064-75351c2d5831"]
}], "Text",
 CellChangeTimes->{{3.8229975499878893`*^9, 
  3.8229976002086363`*^9}},ExpressionUUID->"6a498b52-ba54-4e92-916a-\
0a93b2a9eda4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"\[Phi]3D", "[", 
    RowBox[{"{", 
     RowBox[{"x_", ",", "y_"}], "}"}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y", ",", 
     RowBox[{
      SuperscriptBox["x", "2"], "+", 
      SuperscriptBox["y", "2"]}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822981714997316*^9, 3.822981752475871*^9}, {
  3.8229818834395657`*^9, 3.822981884942523*^9}, {3.822984286288579*^9, 
  3.822984296242984*^9}},
 CellLabel->
  "In[238]:=",ExpressionUUID->"6861ff20-3faf-41d4-9b08-460b06dff3b8"],

Cell[BoxData[
 RowBox[{"sepdata3D", "=", 
  RowBox[{"Map", "[", 
   RowBox[{"\[Phi]3D", ",", "nonsepdata", ",", 
    RowBox[{"{", "2", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.822996523810607*^9, 3.822996533247594*^9}, {
  3.8229976431917677`*^9, 3.822997649976454*^9}},
 CellLabel->
  "In[303]:=",ExpressionUUID->"e9c83070-caa9-4aa8-b412-39a8ec08725e"],

Cell["\<\
We go through the same process as before to set up the dual optimisation \
problem:\
\>", "Text",
 CellChangeTimes->{{3.822997603357193*^9, 
  3.82299761824004*^9}},ExpressionUUID->"38d37acc-0bdb-4c4f-991d-\
7486c167803f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"X", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"sepdata3D", "[", "\"\<Plus\>\"", "]"}], ",", 
     RowBox[{"-", 
      RowBox[{"sepdata3D", "[", "\"\<Minus\>\"", "]"}]}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8229948029074793`*^9, 3.82299483227779*^9}, {
   3.822994895491407*^9, 3.822994909677128*^9}, 3.8229956280829763`*^9, {
   3.822996584986902*^9, 3.8229965874163322`*^9}, {3.82299766668358*^9, 
   3.822997669056814*^9}},
 CellLabel->
  "In[304]:=",ExpressionUUID->"3397a542-4cbb-467f-b59f-150bb2a6caf0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Y", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"ConstantArray", "[", 
      RowBox[{"1", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"sepdata3D", "[", "\"\<Plus\>\"", "]"}], "]"}]}], "]"}], ",", 
     RowBox[{"ConstantArray", "[", 
      RowBox[{
       RowBox[{"-", "1"}], ",", 
       RowBox[{"Length", "[", 
        RowBox[{"sepdata3D", "[", "\"\<Minus\>\"", "]"}], "]"}]}], "]"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822994836114833*^9, 3.822994836484962*^9}, {
  3.8229948876520557`*^9, 3.822994899517584*^9}, {3.822995205087777*^9, 
  3.8229952055487947`*^9}, {3.822995684929783*^9, 3.822995692354609*^9}, {
  3.82299659035343*^9, 3.822996593018736*^9}, {3.8229976718363543`*^9, 
  3.8229976747718363`*^9}},
 CellLabel->
  "In[305]:=",ExpressionUUID->"9c85da43-9e4f-4a00-8f3b-7699cf29f1da"],

Cell[BoxData[
 RowBox[{
  RowBox[{"e", "=", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"1", ",", 
     RowBox[{"Length", "[", "X", "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822980054946007*^9, 3.822980060322157*^9}, 
   3.8229956746813107`*^9, 3.822996631988751*^9},
 CellLabel->
  "In[306]:=",ExpressionUUID->"50633e20-1ff8-4749-85f5-888a52caad1d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[Lambda]", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"\[Lambda]i", "[", "i", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "[", "X", "]"}]}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822736499045179*^9, 3.822736503094264*^9}, {
   3.8227368604226017`*^9, 3.8227368624132338`*^9}, {3.822979903555831*^9, 
   3.822979935021117*^9}, 3.822996633439192*^9},
 CellLabel->
  "In[307]:=",ExpressionUUID->"b230f7f3-e6b6-4875-8729-d458c00b19f8"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"max3D", ",", "sol\[Lambda]3D"}], "}"}], "=", 
   RowBox[{"NMaximize", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"-", 
          FractionBox["1", "2"]}], 
         RowBox[{"\[Lambda]", ".", "X", ".", 
          RowBox[{"Transpose", "[", "X", "]"}], ".", "\[Lambda]"}]}], "+", 
        RowBox[{"\[Lambda]", ".", "e"}]}], ",", 
       RowBox[{"\[Lambda]", ">", "0"}], ",", 
       RowBox[{
        RowBox[{"\[Lambda]", ".", "Y"}], "\[Equal]", "0"}]}], "}"}], ",", 
     "\[Lambda]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822736506293404*^9, 3.822736542931388*^9}, {
   3.822736582192131*^9, 3.822736601610004*^9}, {3.822736708592511*^9, 
   3.822736715634078*^9}, {3.8227368193715153`*^9, 3.822736908461323*^9}, {
   3.82273778357137*^9, 3.822737786462852*^9}, {3.8229800257185307`*^9, 
   3.822980088764784*^9}, 3.822981320132049*^9, {3.8229843572529182`*^9, 
   3.822984360581049*^9}, {3.822984410881886*^9, 3.822984411013171*^9}, {
   3.822997683716748*^9, 3.82299769812615*^9}},
 CellLabel->
  "In[308]:=",ExpressionUUID->"4ec81ba1-354b-4de1-9c11-a62b8f0849fe"],

Cell[BoxData[
 RowBox[{"sol\[Lambda]3D", "//", "Chop"}]], "Input",
 CellChangeTimes->{{3.822981972357045*^9, 3.82298197421145*^9}, {
  3.822996803910034*^9, 3.822996806800394*^9}, {3.822997711345305*^9, 
  3.822997711682067*^9}},
 CellLabel->
  "In[309]:=",ExpressionUUID->"a051ad17-0515-473b-80d8-7f7d0fd25b11"],

Cell[BoxData[
 RowBox[{"supportVectors3D", "=", 
  RowBox[{"Pick", "[", 
   RowBox[{
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"nonsepdata", "[", "\"\<Plus\>\"", "]"}], ",", 
      RowBox[{"nonsepdata", "[", "\"\<Minus\>\"", "]"}]}], "]"}], ",", 
    RowBox[{"Positive", "[", 
     RowBox[{"Chop", "[", 
      RowBox[{
       RowBox[{"\[Lambda]", "/.", "sol\[Lambda]"}], ",", 
       SuperscriptBox["10", 
        RowBox[{"-", "3"}]]}], "]"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.822983462611957*^9, 3.822983547509169*^9}, {
  3.82298362037705*^9, 3.822983623751202*^9}, {3.822996700815817*^9, 
  3.822996710129126*^9}, {3.822996763648779*^9, 3.8229967689445143`*^9}, {
  3.822997722392871*^9, 3.822997726206066*^9}},
 CellLabel->
  "In[310]:=",ExpressionUUID->"f7e4c92a-2ff1-4321-9d6e-4b45ea73c2b5"],

Cell[TextData[{
 "We now compute the values for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"w", "=", 
    RowBox[{
     SuperscriptBox["X", "T"], "\[Lambda]"}]}], TraditionalForm]],
  ExpressionUUID->"3fbe1833-bfe7-4db4-9d89-b411e9a9c48b"],
 " and find b from one of the constraints with a non-zero ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Lambda]", "i"], TraditionalForm]],ExpressionUUID->
  "2af9da74-da80-4325-9f43-a43df079e287"],
 " actually being an equality (rather than inequality)."
}], "Text",
 CellChangeTimes->{{3.822980687380495*^9, 3.822980759188776*^9}, {
  3.822997897228054*^9, 
  3.822997897832984*^9}},ExpressionUUID->"fb1441ae-dd99-4725-a8f5-\
f79776112d7c"],

Cell[BoxData[
 RowBox[{"wsol\[Lambda]3D", "=", 
  RowBox[{"Thread", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"w1", ",", "w2", ",", "w3"}], "}"}], "\[Rule]", 
     RowBox[{
      RowBox[{"Transpose", "[", "X", "]"}], ".", "\[Lambda]"}]}], "/.", 
    "sol\[Lambda]3D"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8229803676940203`*^9, 3.822980370015842*^9}, {
  3.822984473441307*^9, 3.82298447399157*^9}, {3.822997944173113*^9, 
  3.822997947265462*^9}},
 CellLabel->
  "In[317]:=",ExpressionUUID->"71f2efef-129b-4c6a-a3ee-630dc2dfaec7"],

Cell[BoxData[
 RowBox[{"bsol\[Lambda]3D", "=", 
  RowBox[{
   RowBox[{"Solve", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"w1", ",", "w2", ",", "w3"}], "}"}], ".", 
         RowBox[{"X", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "+", "b"}], "\[Equal]", "1"}], "/.",
       "wsol\[Lambda]3D"}], ",", "b"}], "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.822980299440219*^9, 3.8229803357880507`*^9}, {
  3.822980380565118*^9, 3.822980395310096*^9}, {3.822984104177977*^9, 
  3.822984118529121*^9}, {3.822984493849442*^9, 3.822984503882687*^9}, {
  3.822984736416507*^9, 3.8229847552277107`*^9}, {3.822997918905621*^9, 
  3.822997919388515*^9}, {3.822997949459992*^9, 3.822997952744218*^9}},
 CellLabel->
  "In[318]:=",ExpressionUUID->"58bf686c-6ec9-4e53-819a-8cc46e29f9cb"],

Cell["Now we draw our decision line and margins on the r-\[Theta] plot", \
"Text",
 CellChangeTimes->{{3.822997092894528*^9, 
  3.822997107733405*^9}},ExpressionUUID->"432d1d91-2cf6-43da-9e08-\
9c1be9cb08ec"],

Cell[BoxData[
 RowBox[{"decisionz", "=", 
  RowBox[{"z0", "/.", 
   RowBox[{
    RowBox[{"Solve", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"w1", ",", "w2", ",", "w3"}], "}"}], ".", 
          RowBox[{"{", 
           RowBox[{"x0", ",", "y0", ",", "z0"}], "}"}]}], "+", "b"}], 
        "\[Equal]", "fx"}], "/.", 
       RowBox[{"Join", "[", 
        RowBox[{"wsol\[Lambda]3D", ",", "bsol\[Lambda]3D"}], "]"}]}], ",", 
      "z0"}], "]"}], "[", 
    RowBox[{"[", "1", "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.822997263298644*^9, 3.822997303650529*^9}, {
  3.822997350505608*^9, 3.822997355481245*^9}, {3.822997962105638*^9, 
  3.822997983816794*^9}, {3.822998072927631*^9, 3.82299807583996*^9}},
 CellLabel->
  "In[325]:=",ExpressionUUID->"aa1c82e1-22dc-4e7c-8d15-f8eb5cb588e2"],

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPointPlot3D", "[", 
    RowBox[{"Values", "[", "sepdata3D", "]"}], "]"}], ",", 
   RowBox[{"ListPointPlot3D", "[", 
    RowBox[{
     RowBox[{"\[Phi]3D", "/@", "supportVectors3D"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", "Black"}]}], "]"}], ",", 
   RowBox[{"Plot3D", "[", 
    RowBox[{
     RowBox[{"Evaluate", "[", 
      RowBox[{"decisionz", "/.", 
       RowBox[{"fx", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"1", ",", 
          RowBox[{"-", "1"}], ",", "0"}], "}"}]}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x0", ",", 
       RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y0", ",", 
       RowBox[{"-", "2"}], ",", "2"}], "}"}]}], "]"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.822984574319694*^9, 3.8229847031036263`*^9}, {
   3.82298474624844*^9, 3.8229847531479273`*^9}, {3.822984833697484*^9, 
   3.822984862854591*^9}, {3.8229979986699743`*^9, 3.822998011153727*^9}, 
   3.822998048708482*^9, {3.822998092863194*^9, 3.822998093087064*^9}, {
   3.822998142115275*^9, 3.822998148414166*^9}},
 CellLabel->
  "In[328]:=",ExpressionUUID->"898703ac-1d6e-4d87-8310-8111ca61d604"],

Cell["We can also draw them on the original plot", "Text",
 CellChangeTimes->{{3.82299711180614*^9, 
  3.8229971191969137`*^9}},ExpressionUUID->"5f1c4167-382c-42bf-83ff-\
ef71614c9388"],

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"Values", "[", "nonsepdata", "]"}], ",", 
     RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
     RowBox[{"PlotLegends", "\[Rule]", 
      RowBox[{"Keys", "[", "nonsepdata", "]"}]}]}], "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{"supportVectors3D", ",", 
     RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", "Black"}]}], "]"}], ",", 
   RowBox[{"ContourPlot", "[", 
    RowBox[{
     RowBox[{"Evaluate", "[", 
      RowBox[{"Thread", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"w1", ",", "w2", ",", "w3"}], "}"}], ".", 
           RowBox[{"\[Phi]3D", "[", 
            RowBox[{"{", 
             RowBox[{"x0", ",", "y0"}], "}"}], "]"}]}], "+", "b"}], 
         "\[Equal]", 
         RowBox[{"{", 
          RowBox[{"1", ",", 
           RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "/.", 
        RowBox[{"Join", "[", 
         RowBox[{"wsol\[Lambda]3D", ",", "bsol\[Lambda]3D"}], "]"}]}], "]"}], 
      "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x0", ",", 
       RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y0", ",", 
       RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.822982966741523*^9, 3.822983017155324*^9}, {
  3.8229841909463043`*^9, 3.822984249421977*^9}, {3.822985417871542*^9, 
  3.822985451032961*^9}, {3.822985548774507*^9, 3.822985643280117*^9}, {
  3.822998184182414*^9, 3.822998203300105*^9}},
 CellLabel->
  "In[329]:=",ExpressionUUID->"89813e30-a99b-4f8d-bcfa-70fb7b421378"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Implicit map using the Kernel trick", "Subsection",
 CellChangeTimes->{{3.822998220085464*^9, 
  3.8229982269816713`*^9}},ExpressionUUID->"9e25d241-1cf9-4572-b6f8-\
5b01afad8606"],

Cell[TextData[{
 "Instead of defining the map explicitly, the fact that our optimisation only \
depends on the inner product of samples means we can use the kernel trick. \
Let\[CloseCurlyQuote]s define a kernel ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"k", "(", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SubscriptBox["x", "i"], ",", 
        SubscriptBox["y", "i"]}], ")"}], ",", 
      RowBox[{"(", 
       RowBox[{
        SubscriptBox["x", "j"], ",", 
        SubscriptBox["y", "j"]}], ")"}]}], ")"}], "=", 
    RowBox[{
     RowBox[{
      SubscriptBox["x", "i"], 
      SubscriptBox["x", "j"]}], "+", 
     RowBox[{
      SubscriptBox["y", "i"], 
      SubscriptBox["y", "j"]}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox[
         SubscriptBox["x", "i"], "2"], "+", 
        SuperscriptBox[
         SubscriptBox["y", "i"], "2"]}], ")"}], 
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox[
         SubscriptBox["x", "j"], "2"], "+", 
        SuperscriptBox[
         SubscriptBox["y", "j"], "2"]}], ")"}]}]}]}], TraditionalForm]],
  ExpressionUUID->"896231a9-80c6-4035-8d76-2e4906b1669a"]
}], "Text",
 CellChangeTimes->{{3.8229982370847178`*^9, 
  3.822998367705614*^9}},ExpressionUUID->"1139c56a-36cd-4f56-843f-\
66c2dfee1852"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"k", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"xi_", ",", "yi_"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"xj_", ",", "yj_"}], "}"}]}], "]"}], ":=", 
   RowBox[{
    RowBox[{"xi", " ", "xj"}], "+", 
    RowBox[{"yi", " ", "yj"}], "+", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox["xi", "2"], "+", 
       SuperscriptBox["yi", "2"]}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox["xj", "2"], "+", 
       SuperscriptBox["yj", "2"]}], ")"}]}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822985792210389*^9, 3.8229858051328897`*^9}, {
  3.8229858860553427`*^9, 3.822985889518218*^9}, {3.822985925968484*^9, 
  3.82298593377518*^9}},
 CellLabel->
  "In[330]:=",ExpressionUUID->"bcdb7656-8607-4085-8be7-daab6e8116ea"],

Cell[TextData[{
 "We now set up the dual optimisation problem by computing ",
 Cell[BoxData[
  FormBox[
   RowBox[{"X", " ", 
    SuperscriptBox["X", "T"]}], TraditionalForm]],ExpressionUUID->
  "2e43f09e-bfad-4fa4-8676-bdc3720628bb"],
 " directly using the kernel:"
}], "Text",
 CellChangeTimes->{{3.822997603357193*^9, 3.82299761824004*^9}, {
  3.8229984162844133`*^9, 
  3.822998436092779*^9}},ExpressionUUID->"db335bfd-2d20-4a9a-8c3f-\
e2e587fd670b"],

Cell[BoxData[
 RowBox[{"xi", "=", 
  RowBox[{"Join", "@@", "nonsepdata"}]}]], "Input",
 CellChangeTimes->{{3.822998452329568*^9, 3.822998485964761*^9}, {
  3.822998523023875*^9, 3.822998523404714*^9}},
 CellLabel->
  "In[335]:=",ExpressionUUID->"d4172929-328c-46b5-8529-93ed52dad09c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Y", "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"ConstantArray", "[", 
      RowBox[{"1", ",", 
       RowBox[{"Length", "[", 
        RowBox[{"nonsepdata", "[", "\"\<Plus\>\"", "]"}], "]"}]}], "]"}], ",", 
     RowBox[{"ConstantArray", "[", 
      RowBox[{
       RowBox[{"-", "1"}], ",", 
       RowBox[{"Length", "[", 
        RowBox[{"nonsepdata", "[", "\"\<Minus\>\"", "]"}], "]"}]}], "]"}]}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822994836114833*^9, 3.822994836484962*^9}, {
  3.8229948876520557`*^9, 3.822994899517584*^9}, {3.822995205087777*^9, 
  3.8229952055487947`*^9}, {3.822995684929783*^9, 3.822995692354609*^9}, {
  3.82299659035343*^9, 3.822996593018736*^9}, {3.8229976718363543`*^9, 
  3.8229976747718363`*^9}, {3.8229985653583508`*^9, 3.8229985765187187`*^9}},
 CellLabel->
  "In[336]:=",ExpressionUUID->"f888ebbe-3dbe-4a1c-9a5d-f3b0253ef824"],

Cell[BoxData[
 RowBox[{
  RowBox[{"e", "=", 
   RowBox[{"ConstantArray", "[", 
    RowBox[{"1", ",", 
     RowBox[{"Length", "[", "xi", "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822980054946007*^9, 3.822980060322157*^9}, 
   3.8229956746813107`*^9, 3.822996631988751*^9, {3.822998580870015*^9, 
   3.822998581071443*^9}},
 CellLabel->
  "In[338]:=",ExpressionUUID->"07b8b231-f999-4cc0-a2c6-08204cd05d0b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"\[Lambda]", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"\[Lambda]i", "[", "i", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", 
       RowBox[{"Length", "[", "xi", "]"}]}], "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822736499045179*^9, 3.822736503094264*^9}, {
   3.8227368604226017`*^9, 3.8227368624132338`*^9}, {3.822979903555831*^9, 
   3.822979935021117*^9}, 3.822996633439192*^9, {3.8229985848293877`*^9, 
   3.822998585053768*^9}},
 CellLabel->
  "In[337]:=",ExpressionUUID->"7f505562-da48-4589-9029-42d8b2edfbe4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"functionToMaximise", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "2"]}], 
     RowBox[{"Sum", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"\[Lambda]i", "[", "i", "]"}], 
        RowBox[{"\[Lambda]i", "[", "j", "]"}], 
        RowBox[{"Y", "[", 
         RowBox[{"[", "i", "]"}], "]"}], 
        RowBox[{"Y", "[", 
         RowBox[{"[", "j", "]"}], "]"}], 
        RowBox[{"k", "[", 
         RowBox[{
          RowBox[{"xi", "[", 
           RowBox[{"[", "i", "]"}], "]"}], ",", 
          RowBox[{"xi", "[", 
           RowBox[{"[", "j", "]"}], "]"}]}], "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "[", "xi", "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"j", ",", 
         RowBox[{"Length", "[", "xi", "]"}]}], "}"}]}], "]"}]}], "+", 
    RowBox[{"\[Lambda]", ".", "e"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822986446738625*^9, 3.822986534654004*^9}, {
  3.822986623057745*^9, 3.8229866276603413`*^9}, {3.822998500230528*^9, 
  3.822998549808639*^9}, {3.822998593200341*^9, 3.822998601209042*^9}},
 CellLabel->
  "In[339]:=",ExpressionUUID->"bf2c9c3e-cc67-4e70-9f72-9aa920fcffd7"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"maxk", ",", "sol\[Lambda]k"}], "}"}], "=", 
   RowBox[{"NMaximize", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"functionToMaximise", ",", 
       RowBox[{"\[Lambda]", ">", "0"}], ",", 
       RowBox[{
        RowBox[{"\[Lambda]", ".", "Y"}], "\[Equal]", "0"}]}], "}"}], ",", 
     "\[Lambda]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822736506293404*^9, 3.822736542931388*^9}, {
   3.822736582192131*^9, 3.822736601610004*^9}, {3.822736708592511*^9, 
   3.822736715634078*^9}, {3.8227368193715153`*^9, 3.822736908461323*^9}, {
   3.82273778357137*^9, 3.822737786462852*^9}, {3.8229800257185307`*^9, 
   3.822980088764784*^9}, 3.822981320132049*^9, {3.8229843572529182`*^9, 
   3.822984360581049*^9}, {3.822984410881886*^9, 3.822984411013171*^9}, {
   3.822997683716748*^9, 3.82299769812615*^9}, {3.822998623428437*^9, 
   3.822998636555667*^9}},
 CellLabel->
  "In[342]:=",ExpressionUUID->"1cd62041-111f-4040-bd67-05009c5e6894"],

Cell[BoxData[
 RowBox[{"sol\[Lambda]k", "//", "Chop"}]], "Input",
 CellChangeTimes->{{3.822998641372541*^9, 3.822998676380426*^9}},
 CellLabel->
  "In[347]:=",ExpressionUUID->"e4e494fc-1cec-4394-90d2-c8e4b292480d"],

Cell["\<\
We have now found the solution. In fact, it\[CloseCurlyQuote]s the exact same \
solution as we found with the 3D map because this kernel is exactly the one \
you get from that map.\
\>", "Text",
 CellChangeTimes->{{3.822998658040759*^9, 
  3.8229987123802233`*^9}},ExpressionUUID->"c0803504-b416-4ab1-b175-\
a69e65a4abcc"],

Cell[TextData[{
 "We next find b from one of the constraints with a non-zero ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Lambda]", "i"], TraditionalForm]],ExpressionUUID->
  "8d9809fc-8867-4a18-bb79-0d0d1f17f19f"],
 " actually being an equality (rather than inequality)."
}], "Text",
 CellChangeTimes->{{3.822980687380495*^9, 3.822980759188776*^9}, {
  3.822997897228054*^9, 3.822997897832984*^9}, {3.8279920751667013`*^9, 
  3.827992111358656*^9}},ExpressionUUID->"c8ffbf39-23bb-4001-b68c-\
b0e23d0cfc09"],

Cell[BoxData[
 RowBox[{"bsolk", "=", 
  RowBox[{
   RowBox[{"Solve", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"Sum", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"\[Lambda]i", "[", "i", "]"}], 
           RowBox[{"Y", "[", 
            RowBox[{"[", "i", "]"}], "]"}], 
           RowBox[{"k", "[", 
            RowBox[{
             RowBox[{"xi", "[", 
              RowBox[{"[", "i", "]"}], "]"}], ",", 
             RowBox[{"xi", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", 
            RowBox[{"Length", "[", "sol\[Lambda]3D", "]"}]}], "}"}]}], "]"}], 
        "+", "b"}], "\[Equal]", "1"}], "/.", "sol\[Lambda]k"}], ",", "b"}], 
    "]"}], "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{3.82799215557417*^9},
 CellLabel->"In[75]:=",ExpressionUUID->"71b691c1-88fc-400a-be30-d754d5019820"],

Cell["\<\
Now we draw our decision line and margins on the original plot\
\>", "Text",
 CellChangeTimes->{{3.822997092894528*^9, 3.822997107733405*^9}, {
  3.8279921175973053`*^9, 
  3.827992118931629*^9}},ExpressionUUID->"3034010f-9087-4dd8-8218-\
64d48a28f9d0"],

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"Values", "[", "nonsepdata", "]"}], ",", 
     RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
     RowBox[{"PlotLegends", "\[Rule]", 
      RowBox[{"Keys", "[", "nonsepdata", "]"}]}]}], "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{"supportVectors3D", ",", 
     RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
     RowBox[{"PlotStyle", "\[Rule]", "Black"}]}], "]"}], ",", 
   RowBox[{"ContourPlot", "[", 
    RowBox[{
     RowBox[{"Evaluate", "[", 
      RowBox[{"Thread", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Sum", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"\[Lambda]i", "[", "i", "]"}], 
             RowBox[{"Y", "[", 
              RowBox[{"[", "i", "]"}], "]"}], 
             RowBox[{"k", "[", 
              RowBox[{
               RowBox[{"xi", "[", 
                RowBox[{"[", "i", "]"}], "]"}], ",", 
               RowBox[{"{", 
                RowBox[{"x0", ",", "y0"}], "}"}]}], "]"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", 
              RowBox[{"Length", "[", "sol\[Lambda]3D", "]"}]}], "}"}]}], 
           "]"}], "+", "b"}], "\[Equal]", 
         RowBox[{"{", 
          RowBox[{"1", ",", 
           RowBox[{"-", "1"}], ",", "0"}], "}"}]}], "/.", 
        RowBox[{"Join", "[", 
         RowBox[{"sol\[Lambda]k", ",", "bsolk"}], "]"}]}], "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x0", ",", 
       RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y0", ",", 
       RowBox[{"-", "5"}], ",", "5"}], "}"}]}], "]"}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", "Full"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.822982966741523*^9, 3.822983017155324*^9}, {
  3.8229841909463043`*^9, 3.822984249421977*^9}, {3.822985417871542*^9, 
  3.822985451032961*^9}, {3.822985548774507*^9, 3.822985643280117*^9}, {
  3.822998184182414*^9, 3.822998203300105*^9}, {3.8279921933438807`*^9, 
  3.827992233304503*^9}},
 CellLabel->"In[78]:=",ExpressionUUID->"0b1f5d5b-beaf-4a54-95aa-b5b374dd163b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Generic Kernels", "Subsection",
 CellChangeTimes->{{3.822990623352353*^9, 
  3.822990625760766*^9}},ExpressionUUID->"a3305560-56b0-42d2-b21f-\
f613acc54773"],

Cell["\<\
In the example so far we had a good idea for which kernel to use a priori. \
That is not usually the case so let\[CloseCurlyQuote]s now look at using some \
generic kernels. We will apply it to the following dataset:\
\>", "Text",
 CellChangeTimes->{{3.822998723562336*^9, 
  3.8229988024805593`*^9}},ExpressionUUID->"1a657693-4fa5-40a8-841d-\
52ff5cbb44b1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"Blue", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "1.2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1.3", ",", "0.9"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0.9", ",", "1.2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2.1", ",", "2.2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2.3", ",", "2.9"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2.9", ",", "2.2"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"Orange", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2.1", ",", "1.2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2.3", ",", "0.9"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2.7", ",", "1.2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1.1", ",", "2.2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1.3", ",", "2.9"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0.9", ",", "2.2"}], "}"}]}], "}"}]}]}], "|>"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.822553642327134*^9, 3.82255364663369*^9}, {
  3.82255387243029*^9, 3.822553875288619*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"ee0831d7-7c77-4b86-9db6-cc650f7a3acd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"Values", "[", "data", "]"}], ",", 
   RowBox[{"PlotMarkers", "\[Rule]", "\"\<OpenMarkers\>\""}]}], 
  "]"}]], "Input",
 CellLabel->"In[30]:=",ExpressionUUID->"fbc83d76-0e9f-4a9f-88de-167eb3d13fa1"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], GeometricTransformationBox[InsetBox[
       FormBox[
        StyleBox[
         GraphicsBox[{
           {GrayLevel[1], DiskBox[{0, 0}, Offset[{3., 3.}, {0., 0.}]]}, 
           {AbsoluteThickness[1.5], Dashing[{}], 
            CircleBox[{0, 0}, Offset[{3., 3.}, {0., 0.}]]}}],
         StripOnInput->False,
         GraphicsBoxOptions->{DefaultBaseStyle->Directive[
           PointSize[0.012833333333333334`], 
           RGBColor[0.368417, 0.506779, 0.709798], 
           AbsoluteThickness[1.6]]}],
        TraditionalForm], {0., 0.}, Automatic, Scaled[9.75]], {{{1., 1.2}}, {{
      1.3, 0.9}}, {{0.9, 1.2}}, {{2.1, 2.2}}, {{2.3, 2.9}}, {{2.9, 2.2}}}]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], GeometricTransformationBox[InsetBox[
       FormBox[
        StyleBox[
         GraphicsBox[{
           {GrayLevel[1], 
            PolygonBox[
             NCache[{Offset[{0, 4}], Offset[{(-2) 3^Rational[1, 2], -2}], 
               Offset[{2 3^Rational[1, 2], -2}]}, {
              Offset[{0, 4}], Offset[{-3.4641016151377544`, -2}], 
               Offset[{3.4641016151377544`, -2}]}]]}, 
           {AbsoluteThickness[1.5], Dashing[{}], 
            JoinedCurveBox[NCache[
             Line[{Offset[{0, 4}], Offset[{(-2) 3^Rational[1, 2], -2}], 
                Offset[{2 3^Rational[1, 2], -2}], Offset[{0, 4}]}], 
              Line[{Offset[{0, 4}], Offset[{-3.4641016151377544`, -2}], 
                Offset[{3.4641016151377544`, -2}], Offset[{0, 4}]}]],
             CurveClosed->True]}}],
         StripOnInput->False,
         GraphicsBoxOptions->{DefaultBaseStyle->Directive[
           PointSize[0.012833333333333334`], 
           RGBColor[0.880722, 0.611041, 0.142051], 
           AbsoluteThickness[1.6]]}],
        TraditionalForm], {0., 0.}, Automatic, Scaled[9.75]], {{{2.1, 
      1.2}}, {{2.3, 0.9}}, {{2.7, 1.2}}, {{1.1, 2.2}}, {{1.3, 2.9}}, {{0.9, 
      2.2}}}]}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0.8583333333333356, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0.8583333333333356, 2.9}, {0, 2.9}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.858689909855134*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"29939fad-16b8-4a37-945c-aa975330cde5"]
}, Open  ]],

Cell[TextData[{
 "We could implement the kernels ourselves, take care of projecting back to \
the original space, etc., but let\[CloseCurlyQuote]s now just use the \
high-level ",
 ButtonBox["Classify",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/Classify"],
 " function to take care of all of those details for us. We will specify the \
\[OpenCurlyDoubleQuote]SupportVectorMachine\[CloseCurlyDoubleQuote] method \
with three different choices of kernel. Note that this generates a function \
that can return a probability that the input is of a given class."
}], "Text",
 CellChangeTimes->{{3.8229988192188883`*^9, 3.8229989048317823`*^9}, {
  3.822999054185519*^9, 
  3.8229990846382923`*^9}},ExpressionUUID->"eb4a4c44-8f19-4349-be9f-\
b4c29ed20b24"],

Cell["First, with a linear kernel it fails totally", "Text",
 CellChangeTimes->{{3.822998916205287*^9, 
  3.822998922682157*^9}},ExpressionUUID->"3d51c64a-579f-48d6-909a-\
38dd50116918"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"fL", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"data", ",", 
    RowBox[{"Method", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<SupportVectorMachine\>\"", ",", 
       RowBox[{"\"\<KernelType\>\"", "\[Rule]", "\"\<Linear\>\""}]}], 
      "}"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.822553412693893*^9, 3.822553476001458*^9}, {
  3.822553527000094*^9, 3.822553560051292*^9}, {3.8225536032357807`*^9, 
  3.822553624439756*^9}, {3.82255369819847*^9, 3.822553718583609*^9}, {
  3.822998779295492*^9, 3.822998784290161*^9}, {3.822998883367598*^9, 
  3.8229988837380753`*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"42b24b98-a7b8-477c-bb4a-413791f75711"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", 
                    
                    TemplateBox[<|"color" -> RGBColor[0, 0, 1]|>, 
                    "RGBColorSwatchTemplate"], 
                    
                    TemplateBox[<|"color" -> RGBColor[1, 0.5, 0]|>, 
                    "RGBColorSwatchTemplate"]}, "RowWithSeparators"], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], Frame -> True, FrameTicks -> None, 
             FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"\"Numerical\"", ",", "\"Numerical\""}], "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", 
                    
                    TemplateBox[<|"color" -> RGBColor[0, 0, 1]|>, 
                    "RGBColorSwatchTemplate"], 
                    
                    TemplateBox[<|"color" -> RGBColor[1, 0.5, 0]|>, 
                    "RGBColorSwatchTemplate"]}, "RowWithSeparators"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"SupportVectorMachine\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["12", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[<|
   "ExampleNumber" -> 12, "ClassNumber" -> 2, 
    "Input" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Numerical"|>, 
           "f2" -> <|"Type" -> "Numerical"|>|>, 
         "Output" -> <|
          "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor[
              "Transpose", <|"FeatureNumber" -> 2|>], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Numerical", "Numerical"}, 
                "FeatureKeys" -> {"f1", "f2"}, "FeatureWeights" -> Automatic, 
                "ExampleWeights" -> Automatic, "RawExample" -> 
                Missing["KeyAbsent", "RawExample"], "StructurePreserving" -> 
                False|>]}|>], "ScalarFeature" -> False, "Invertibility" -> 
         "Perfect", "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
       "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|
          "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
           "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
         "Output" -> <|
          "(f1f2)" -> <|"Type" -> "NumericalVector", "Weight" -> 2|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "SynthesizeMissingValues", <|
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Distribution" -> 
             LearnedDistribution[<|
               "ExampleNumber" -> 12, "Preprocessor" -> 
                MachineLearning`MLProcessor[
                 "ToMLDataset", <|
                  "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical"|>, 
                    "f2" -> <|"Type" -> "Numerical"|>|>, 
                   "Output" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Preprocessor" -> MachineLearning`MLProcessor["Identity"], 
                   "ScalarFeature" -> False, "Invertibility" -> "Perfect", 
                   "StructurePreserving" -> False, "Missing" -> "Allowed"|>], 
                "Processor" -> 
                MachineLearning`MLProcessor[
                 "ToVector", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
                    "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
                   "Output" -> <|
                    "(f1f2)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, 
                   "Version" -> {13., 0}, "ID" -> 5755441559493940478|>], 
                "PerformanceGoal" -> "DirectTraining", "BatchProcessing" -> 
                Automatic, 
                "Model" -> <|
                 "RotationMatrix" -> {{
                   0.52501064431907, -0.8510956605174739}, {
                   0.8510956605174739, 0.52501064431907}}, 
                  "Precisions" -> {1.9267874280956105`, 2.073308743622691}, 
                  "NoisePrecision" -> None, "Processor" -> 
                  MachineLearning`MLProcessor[
                   "Center", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, 
                    "Mean" -> {1.7416666666666665`, 1.7666666666666664`}, 
                    "Output" -> <|
                    "(f1f2)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, 
                    "Version" -> {13., 0}, "ID" -> 2512640541051570382|>], 
                  "PostProcessor" -> 
                  MachineLearning`MLProcessor[
                   "FirstValues", <|
                    "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 2|>, 
                    "Key" -> "(f1f2)", "Invertibility" -> "Perfect", 
                    "StructurePreserving" -> False, "Missing" -> "Allowed"|>],
                   "Method" -> "Multinormal", 
                  "Options" -> <|
                   "CovarianceType" -> <|
                    "Value" -> "Full", "Options" -> <||>|>, 
                    "IntrinsicDimension" -> <|
                    "Value" -> 2, "Options" -> <||>|>|>|>, 
                "TrainingInformation" -> <|
                 "Configurations" -> 
                  Dataset[<|<|
                    "Value" -> "Multinormal", 
                    "Options" -> <|
                    "CovarianceType" -> <|"Value" -> "Full"|>, 
                    "IntrinsicDimension" -> <|"Value" -> "Heuristic"|>|>, 
                    "NaiveImputer" -> 
                    MachineLearning`MLProcessor[
                    "ImputeMissing", <|
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "StructurePreserving" -> True, 
                    "Input" -> <|
                    "(f1f2)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, 
                    "Mean" -> {1.7416666666666665`, 1.7666666666666666`}, 
                    "StandardDeviation" -> {0.7017339635186232, 
                    0.71336448530109}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 2, 
                    "Output" -> <|
                    "(f1f2)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Type" -> 
                    "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                    3765113007870574971|>], "EMIterations" -> 1|> -> <||>|>, 
                    TypeSystem`Assoc[
                    
                    TypeSystem`Struct[{
                    "Value", "Options", "NaiveImputer", "EMIterations"}, {
                    TypeSystem`Atom[String], 
                    TypeSystem`Assoc[
                    TypeSystem`Atom[String], 
                    TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2], TypeSystem`AnyType, 
                    TypeSystem`Atom[Integer]}], 
                    TypeSystem`Assoc[
                    TypeSystem`UnknownType, TypeSystem`UnknownType, 
                    TypeSystem`AnyLength], 1], <||>], "BestModelInformation" -> 
                  Dataset[<|
                    "Configuration" -> {
                    "Multinormal", "CovarianceType" -> "Full", 
                    "IntrinsicDimension" -> "Heuristic"}, "ModelUtility" -> 
                    Missing[]|>, 
                    TypeSystem`Struct[{"Configuration", "ModelUtility"}, {
                    TypeSystem`Tuple[{
                    TypeSystem`Atom[String], TypeSystem`AnyType, 
                    TypeSystem`AnyType}], TypeSystem`UnknownType}], <||>]|>, 
                "NaiveImputer" -> 
                MachineLearning`MLProcessor[
                 "ImputeMissing", <|
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "StructurePreserving" -> True, 
                   "Input" -> <|
                    "(f1f2)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, 
                   "Mean" -> {1.7416666666666665`, 1.7666666666666666`}, 
                   "StandardDeviation" -> {0.7017339635186232, 
                    0.71336448530109}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 2, 
                   "Output" -> <|
                    "(f1f2)" -> <|
                    "Type" -> "NumericalVector", "Weight" -> 2|>|>, "Type" -> 
                   "NumericalVector", "Version" -> {13., 0}, "ID" -> 
                   3765113007870574971|>], "InputDimension" -> 0, 
                "OutputDimension" -> 2, 
                "Log" -> <|
                 "Example" -> 
                  MachineLearning`MLDataset[<|
                    "f1" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {2.3}, 
                    "ID" -> 5006195930348260787|>, 
                    "f2" -> <|
                    "Type" -> "Numerical", "Weight" -> 1, "Values" -> {2.9}, 
                    "ID" -> 626850493589782258|>|>, <|
                    "ExampleNumber" -> 1, "ExampleWeights" -> 1, 
                    "LogDensityRatios" -> 0, "RawExample" -> False|>], 
                  "TrainingTime" -> 0.1774936, "MaxTrainingMemory" -> 185712, 
                  "DataMemory" -> 3248, "FunctionMemory" -> 34296, 
                  "LanguageVersion" -> {13., 0}, "Date" -> 
                  DateObject[{
                    2022, 4, 11, 19, 18, 34.5707447`9.29128363135013}, 
                    "Instant", "Gregorian", 1.], "ProcessorCount" -> 4, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "Windows",
                   "SystemWordLength" -> 64, "Evaluations" -> {}|>, 
                "LogPDFDistribution" -> 
                MachineLearning`TailedQuantileDistribution[<|
                  "Quantiles" -> {-1.6712926473969056`, -1.6712926473969056`, \
-1.2253739430126203`, -1.1897173814698159`, -1.1132150882500553`, \
-0.8948565407994502, -0.8755856075690861, -0.8098282869324843, \
-0.671661264227198, -0.6286516448478182, -0.6013922996983214}, 
                   "LeftBoundary" -> -1.2253739430126203`, "LeftScale" -> 
                   0.2229593521921427, "LeftTailNorm" -> 0.2|>], "Entropy" -> 
                Around[1.9363149408407512`, 0.21159620877801874`], 
                "EntropySampleSize" -> 10|>], 
             "Output" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "EvaluationStrategy" -> "ModeFinding", "Version" -> {13., 0}, 
             "ID" -> 4729898815440625630|>], 
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "Numerical", "Weight" -> 1|>, 
               "f2" -> <|"Type" -> "Numerical", "Weight" -> 1|>|>, 
             "Output" -> <|
              "(f1f2)" -> <|"Type" -> "NumericalVector", "Weight" -> 2|>|>, 
             "Version" -> {13., 0}, "ID" -> 3776722304448397785|>], 
           MachineLearning`MLProcessor[
           "Standardize", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "(f1f2)" -> <|"Type" -> "NumericalVector", "Weight" -> 2|>|>, 
             "Mean" -> {1.7416666666666665`, 1.7666666666666666`}, 
             "StandardDeviation" -> {0.7017339635186232, 0.71336448530109}, 
             "Output" -> <|
              "(f1f2)" -> <|"Type" -> "NumericalVector", "Weight" -> 2|>|>, 
             "Version" -> {13., 0}, "ID" -> 4725993348365757110|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Imputed"|>]|>, 
    "Output" -> <|
     "Preprocessor" -> 
      MachineLearning`MLProcessor[
       "ToMLDataset", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal"|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Preprocessor" -> 
         MachineLearning`MLProcessor["Sequence", <|"Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor[
              "WrapMLDataset", <|
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"], 
                "StructurePreserving" -> False|>]}|>], "ScalarFeature" -> 
         True, "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "Processor" -> 
      MachineLearning`MLProcessor[
       "Sequence", <|
        "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
         "Processors" -> {
           MachineLearning`MLProcessor[
           "ToVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Version" -> {13., 0}, "ID" -> 4147396025890724089|>], 
           MachineLearning`MLProcessor[
           "IntegerEncodeNominalVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>, 
             "Index" -> {<|
               RGBColor[0, 0, 1] -> 1, RGBColor[1, 0.5, 0] -> 2|>}, 
             "MissingCode" -> 0, "Version" -> {13., 0}, "ID" -> 
             1059009925034061998, 
             "Output" -> <|
              "f1" -> <|"Type" -> "NominalVector", "Weight" -> 1|>|>|>], 
           MachineLearning`MLProcessor[
           "FromVector", <|
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
             "StructurePreserving" -> True, 
             "Input" -> <|
              "f1" -> <|
                "Type" -> "NominalVector", "Weight" -> 1, 
                 "SetSize" -> {2}|>|>, 
             "Output" -> <|"f1" -> <|"Type" -> "Nominal", "Weight" -> 1|>|>, 
             "Version" -> {13., 0}, "ID" -> 8146323130312872383|>], 
           MachineLearning`MLProcessor[
           "FirstValues", <|
            "Info" -> <|"Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2|>, 
             "Key" -> "f1", "Invertibility" -> "Perfect", 
             "StructurePreserving" -> False, "Missing" -> "Allowed"|>]}, 
         "Invertibility" -> "Perfect", "StructurePreserving" -> False, 
         "Missing" -> "Allowed"|>], "ProbabilityPostprocessor" -> Identity, 
      "Name" -> "class", 
      "Marginal" -> <|
       RGBColor[0, 0, 1] -> 0.5, RGBColor[1, 0.5, 0] -> 0.5|>|>, 
    "LabelSplitter" -> 
    MachineLearning`MLProcessor[
     "FeatureLabelSplit", <|
      "Processor" -> MachineLearning`MLProcessor["AssociationSplit"], 
       "PreferLabeled" -> True, "KeepLabelsFormat" -> False|>], 
    "RecalibrationFunction" -> None, "ImputationStrategy" -> Automatic, 
    "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, 
    "Model" -> <|
     "SVMParameters" -> <|
       "KernelType" -> "Linear", "GammaScalingParameter" -> 0.818352312429713,
         "SoftMarginParameter" -> 0.4, "PolynomialDegree" -> 3, 
        "BiasParameter" -> 1, "MulticlassStrategy" -> Automatic, "Shrinking" -> 
        True, "KernelCacheSize" -> 100|>, 
      "TrainedModel" -> {<|
        "supportVectors" -> {{-1.0634005019258133`, -0.7939251381125945}, {
          1.6598988580871392`, 0.6100070313825451}, {0.5042787674901338, 
          0.6121993855524389}, {-0.6245260413532965, -1.2234399616432599`}, {
          0.8030141577595431, 
          1.5916263622002227`}, {-1.1950976216718767`, -0.7974890830406717}, {
          1.3741608878462925`, -0.7931677754731492}, {
          0.5185029707171631, -0.7869918516324556}, {-0.6303458302983284, 
          1.5962331419927573`}, {
          0.7966765895668702, -1.2156573025789377`}, {-1.1960665065318052`, 
          0.6096657481581643}, {-0.9116625385402138, 0.6076593067079029}}, 
         "supportVectorCoefficients" -> {0.4, 0.4, 0.4, 0.4, 0.4, 
          0.4, -0.4, -0.4, -0.4, -0.4, -0.4, -0.4}, "rho" -> 
         0.007752007921226434|>}, 
      "ProbabilityCoefficients" -> {{4.043971538543701, 0.08681537955999374}},
       "MulticlassStrategy" -> "OneVersusOne", "Processor" -> 
      MachineLearning`MLProcessor[
       "FirstValues", <|
        "Info" -> <|"Type" -> "NumericalVector", "Weight" -> 2|>, "Key" -> 
         "(f1f2)", "Invertibility" -> "Perfect", "StructurePreserving" -> 
         False, "Missing" -> "Allowed"|>], "Calibrator" -> None, "Method" -> 
      "SupportVectorMachine", "PostProcessor" -> 
      MachineLearning`MLProcessor["Identity"], 
      "Options" -> <|
       "KernelType" -> <|"Value" -> "Linear", "Options" -> <||>|>, 
        "GammaScalingParameter" -> <|
         "Value" -> 0.818352312429713, "Options" -> <||>|>, 
        "SoftMarginParameter" -> <|"Value" -> 0.4, "Options" -> <||>|>, 
        "PolynomialDegree" -> <|"Value" -> 3, "Options" -> <||>|>, 
        "BiasParameter" -> <|"Value" -> 1, "Options" -> <||>|>, 
        "MulticlassStrategy" -> <|
         "Value" -> "OneVersusOne", "Options" -> <||>|>, 
        "Shrinking" -> <|"Value" -> True, "Options" -> <||>|>, 
        "KernelCacheSize" -> <|"Value" -> 100, "Options" -> <||>|>|>|>, 
    "TrainingInformation" -> <|
     "PanelCell" -> CellObject[133553], "TrainingFunction" -> Classify, 
      "EMIterations" -> Missing["KeyAbsent", "EMIterations"], 
      "ProcessorEntropyShift" -> 0, "PreprocessingTime" -> 
      0.362714`7.011109312256457, "LossName" -> "MeanCrossEntropy", 
      "BestModelInformation" -> 
      Dataset[<|"MeanCrossEntropy" -> 
         Around[0.5815703108610276, 0.18875370826283297`], "Accuracy" -> 
         Around[0.5, 0.3100868364730212], "EvaluationTime" -> 
         0.0006294627058970831, "TestSize" -> 2, "ModelMemory" -> 13096, 
         "ModelUtility" -> -0.2140320213488761, "TrainingSize" -> 10, 
         "TrainingTime" -> 0.05011872336272722, "TrainingMemory" -> 108960, 
         "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
           Around[0.5815703108610276, 0.18875370826283297`]}, 
         "AccuracyHistory" -> {
           Around[0.5, 0.3100868364730212]}, 
         "Configuration" -> {
          "SupportVectorMachine", "KernelType" -> "Linear", 
           "GammaScalingParameter" -> 0.818352312429713, 
           "SoftMarginParameter" -> 0.4, "PolynomialDegree" -> 3, 
           "BiasParameter" -> 1, "MulticlassStrategy" -> Automatic, 
           "Shrinking" -> True, "KernelCacheSize" -> 100}, 
         "FinalTrainingSize" -> 12|>, 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
          "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], <||>], "Configurations" -> 
      Dataset[<|<|
          "Value" -> "SupportVectorMachine", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "Linear"|>, 
             "GammaScalingParameter" -> <|"Value" -> 0.5208041519329063|>, 
             "SoftMarginParameter" -> <|"Value" -> 3|>, 
             "PolynomialDegree" -> <|"Value" -> 3|>, 
             "BiasParameter" -> <|"Value" -> 1|>, 
             "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
             "Shrinking" -> <|"Value" -> True|>, 
             "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.1384347629311549`, 0.6457195326181645], "Accuracy" -> 
              Around[0.5, 0.3100868364730212], "EvaluationTime" -> 0.0005, 
              "TestSize" -> 2, "ModelMemory" -> 13096, 
              "ModelUtility" -> -0.9302718906427565, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
              104400, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.1384347629311549`, 0.6457195326181645]}, 
              "AccuracyHistory" -> {
                Around[0.5, 0.3100868364730212]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005, "MeanCrossEntropy" -> 
             Around[1.1384347629311549`, 0.6457195326181645], "ModelMemory" -> 
             13096, "TrainingMemory" -> 104400, "TrainingTime" -> 
             0.04458800310199168|>, "Index" -> 1|>, <|
          "Value" -> "SupportVectorMachine", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "Linear"|>, 
             "GammaScalingParameter" -> <|"Value" -> 0.005015369321064833|>, 
             "SoftMarginParameter" -> <|"Value" -> 0.1|>, 
             "PolynomialDegree" -> <|"Value" -> 3|>, 
             "BiasParameter" -> <|"Value" -> 1|>, 
             "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
             "Shrinking" -> <|"Value" -> True|>, 
             "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.6282353960039799, 0.1478875194733649], "Accuracy" -> 
              Around[0.5, 0.3100868364730212], "EvaluationTime" -> 0.0005, 
              "TestSize" -> 2, "ModelMemory" -> 13096, 
              "ModelUtility" -> -0.27432863470503466`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.03981071705534971, "TrainingMemory" -> 
              108504, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6282353960039799, 0.1478875194733649]}, 
              "AccuracyHistory" -> {
                Around[0.5, 0.3100868364730212]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005, "MeanCrossEntropy" -> 
             Around[0.6282353960039799, 0.1478875194733649], "ModelMemory" -> 
             13096, "TrainingMemory" -> 108504, "TrainingTime" -> 
             0.04458800310199168|>, "Index" -> 2|>, <|
          "Value" -> "SupportVectorMachine", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "Linear"|>, 
             "GammaScalingParameter" -> <|"Value" -> 0.1237283829149296|>, 
             "SoftMarginParameter" -> <|"Value" -> 1.|>, 
             "PolynomialDegree" -> <|"Value" -> 3|>, 
             "BiasParameter" -> <|"Value" -> 1|>, 
             "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
             "Shrinking" -> <|"Value" -> True|>, 
             "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.7911690757157847, 0.32796707067344955`], "Accuracy" -> 
              Around[0.5, 0.3100868364730212], "EvaluationTime" -> 0.0005, 
              "TestSize" -> 2, "ModelMemory" -> 13096, 
              "ModelUtility" -> -0.5385688292948168, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.05011872336272722, "TrainingMemory" -> 
              109632, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.7911690757157847, 0.32796707067344955`]}, 
              "AccuracyHistory" -> {
                Around[0.5, 0.3100868364730212]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0005, "MeanCrossEntropy" -> 
             Around[0.7911690757157847, 0.32796707067344955`], "ModelMemory" -> 
             13096, "TrainingMemory" -> 109632, "TrainingTime" -> 
             0.05613297016625449|>, "Index" -> 3|>, <|
          "Value" -> "SupportVectorMachine", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "Linear"|>, 
             "GammaScalingParameter" -> <|"Value" -> 0.05031348783256728|>, 
             "SoftMarginParameter" -> <|"Value" -> 3|>, 
             "PolynomialDegree" -> <|"Value" -> 3|>, 
             "BiasParameter" -> <|"Value" -> 1|>, 
             "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
             "Shrinking" -> <|"Value" -> True|>, 
             "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[1.1384347629311549`, 0.6457195326181645], "Accuracy" -> 
              Around[0.5, 0.3100868364730212], "EvaluationTime" -> 
              0.0006294627058970831, "TestSize" -> 2, "ModelMemory" -> 13096, 
              "ModelUtility" -> -0.9302720201054624, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.0630957344480193, "TrainingMemory" -> 
              109464, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[1.1384347629311549`, 0.6457195326181645]}, 
              "AccuracyHistory" -> {
                Around[0.5, 0.3100868364730212]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006294627058970831, "MeanCrossEntropy" -> 
             Around[1.1384347629311549`, 0.6457195326181645], "ModelMemory" -> 
             13096, "TrainingMemory" -> 109464, "TrainingTime" -> 
             0.07066722258178162|>, "Index" -> 4|>, <|
          "Value" -> "SupportVectorMachine", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "Linear"|>, 
             "GammaScalingParameter" -> <|"Value" -> 0.08246063376554646|>, 
             "SoftMarginParameter" -> <|"Value" -> 0.1|>, 
             "PolynomialDegree" -> <|"Value" -> 3|>, 
             "BiasParameter" -> <|"Value" -> 1|>, 
             "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
             "Shrinking" -> <|"Value" -> True|>, 
             "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.6282353960039799, 0.1478875194733649], "Accuracy" -> 
              Around[0.5, 0.3100868364730212], "EvaluationTime" -> 
              0.0006294627058970831, "TestSize" -> 2, "ModelMemory" -> 13096, 
              "ModelUtility" -> -0.27432876416774055`, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.05011872336272722, "TrainingMemory" -> 
              108552, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.6282353960039799, 0.1478875194733649]}, 
              "AccuracyHistory" -> {
                Around[0.5, 0.3100868364730212]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006294627058970831, "MeanCrossEntropy" -> 
             Around[0.6282353960039799, 0.1478875194733649], "ModelMemory" -> 
             13096, "TrainingMemory" -> 108552, "TrainingTime" -> 
             0.05613297016625449|>, "Index" -> 5|>, <|
          "Value" -> "SupportVectorMachine", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "Linear"|>, 
             "GammaScalingParameter" -> <|"Value" -> 0.818352312429713|>, 
             "SoftMarginParameter" -> <|"Value" -> 0.4|>, 
             "PolynomialDegree" -> <|"Value" -> 3|>, 
             "BiasParameter" -> <|"Value" -> 1|>, 
             "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
             "Shrinking" -> <|"Value" -> True|>, 
             "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.5815703108610276, 0.18875370826283297`], "Accuracy" -> 
              Around[0.5, 0.3100868364730212], "EvaluationTime" -> 
              0.0006294627058970831, "TestSize" -> 2, "ModelMemory" -> 13096, 
              "ModelUtility" -> -0.2140320213488761, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.05011872336272722, "TrainingMemory" -> 
              108960, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.5815703108610276, 0.18875370826283297`]}, 
              "AccuracyHistory" -> {
                Around[0.5, 0.3100868364730212]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0006294627058970831, "MeanCrossEntropy" -> 
             Around[0.5815703108610276, 0.18875370826283297`], "ModelMemory" -> 
             13096, "TrainingMemory" -> 108960, "TrainingTime" -> 
             0.05613297016625449|>, "Index" -> 6|>, <|
          "Value" -> "SupportVectorMachine", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "Linear"|>, 
             "GammaScalingParameter" -> <|"Value" -> 0.5021849685923176|>, 
             "SoftMarginParameter" -> <|"Value" -> 1.|>, 
             "PolynomialDegree" -> <|"Value" -> 3|>, 
             "BiasParameter" -> <|"Value" -> 1|>, 
             "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
             "Shrinking" -> <|"Value" -> True|>, 
             "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
          "Experiments" -> {<|
             "MeanCrossEntropy" -> 
              Around[0.7911690757157847, 0.32796707067344955`], "Accuracy" -> 
              Around[0.5, 0.3100868364730212], "EvaluationTime" -> 
              0.0009976311574844395, "TestSize" -> 2, "ModelMemory" -> 13096, 
              "ModelUtility" -> -0.5390614375304025, "TrainingSize" -> 10, 
              "TrainingTime" -> 0.07943282347242814, "TrainingMemory" -> 
              109688, "ExperimentCount" -> 1, "MeanCrossEntropyHistory" -> {
                Around[0.7911690757157847, 0.32796707067344955`]}, 
              "AccuracyHistory" -> {
                Around[0.5, 0.3100868364730212]}|>}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 0.0009976311574844395, "MeanCrossEntropy" -> 
             Around[0.7911690757157847, 0.32796707067344955`], "ModelMemory" -> 
             13096, "TrainingMemory" -> 109688, "TrainingTime" -> 
             0.08896476228911951|>, "Index" -> 7|>, <|
          "Value" -> "SupportVectorMachine", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "Linear"|>, 
             "GammaScalingParameter" -> <|"Value" -> 0.23765366438253022`|>, 
             "SoftMarginParameter" -> <|"Value" -> 3|>, 
             "PolynomialDegree" -> <|"Value" -> 3|>, 
             "BiasParameter" -> <|"Value" -> 1|>, 
             "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
             "Shrinking" -> <|"Value" -> True|>, 
             "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           8|>, <|"Value" -> "SupportVectorMachine", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "Linear"|>, 
             "GammaScalingParameter" -> <|"Value" -> 0.23202839452223256`|>, 
             "SoftMarginParameter" -> <|"Value" -> 1.|>, 
             "PolynomialDegree" -> <|"Value" -> 3|>, 
             "BiasParameter" -> <|"Value" -> 1|>, 
             "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
             "Shrinking" -> <|"Value" -> True|>, 
             "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           9|>, <|"Value" -> "SupportVectorMachine", 
           "Options" -> <|
            "KernelType" -> <|"Value" -> "Linear"|>, 
             "GammaScalingParameter" -> <|"Value" -> 0.46569989092895625`|>, 
             "SoftMarginParameter" -> <|"Value" -> 0.4|>, 
             "PolynomialDegree" -> <|"Value" -> 3|>, 
             "BiasParameter" -> <|"Value" -> 1|>, 
             "MulticlassStrategy" -> <|"Value" -> Automatic|>, 
             "Shrinking" -> <|"Value" -> True|>, 
             "KernelCacheSize" -> <|"Value" -> 100|>|>|> -> <|
          "Experiments" -> {}, 
           "PredictedPerformances" -> <|
            "EvaluationTime" -> 1, "MeanCrossEntropy" -> 1, "ModelMemory" -> 
             1, "TrainingMemory" -> 1, "TrainingTime" -> 1|>, "Index" -> 
           10|>|>, 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[
            TypeSystem`Enumeration["SupportVectorMachine"]], 
           
           TypeSystem`Struct[{
            "KernelType", "GammaScalingParameter", "SoftMarginParameter", 
             "PolynomialDegree", "BiasParameter", "MulticlassStrategy", 
             "Shrinking", "KernelCacheSize"}, {
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[
                TypeSystem`Enumeration["Linear"]]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Real]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Real]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}], 
             TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[TypeSystem`Boolean]}], 
             TypeSystem`Struct[{"Value"}, {
               TypeSystem`Atom[Integer]}]}]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "ModelMemory", "ModelUtility", "TrainingSize", "TrainingTime", 
              "TrainingMemory", "ExperimentCount", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 
            TypeSystem`AnyLength], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 10], <||>], "MaxTrainingSize" -> 12, 
      "PreprocessorEvaluationTime" -> 7.28515625*^-6, "PreprocessorMemory" -> 
      54256, "InputDimension" -> 2, "OutputDimension" -> 1, 
      "BaselineLogProbability" -> -0.6931471805599453, "VariableBudget" -> 
      True, "CheckpointingInfo" -> <|"Checkpointing" -> False|>, "UserStop" -> 
      False, "NaturalStop" -> True, "AbortStop" -> False, "LastReportingTime" -> 
      3.8586935156413649`17.339015274403636*^9, "RoundPartitioning" -> 
      Dataset[{<|
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.5324000000000001, 
          "ElapsedTimes" -> 0.74363, "ExperimentCounts" -> 7|>}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 1], <||>]|>, "AnomalyDetector" -> None,
     "Log" -> <|
     "Example" -> 
      MachineLearning`MLDataset[<|
        "f1" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {2.3}, "ID" -> 
           8491671458426040106|>, 
         "f2" -> <|
          "Type" -> "Numerical", "Weight" -> 1, "Values" -> {2.9}, "ID" -> 
           1911098169859021430|>|>, <|
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "LogDensityRatios" -> 0, 
         "RawExample" -> False|>], "TrainingTime" -> 1.3195291, 
      "MaxTrainingMemory" -> 702000, "DataMemory" -> 1792, "FunctionMemory" -> 
      197664, "LanguageVersion" -> {13., 0}, "Date" -> 
      DateObject[{2022, 4, 11, 19, 18, 35.6951024`9.305183525871156}, 
        "Instant", "Gregorian", 1.], "ProcessorCount" -> 4, "ProcessorType" -> 
      "x86-64", "OperatingSystem" -> "Windows", "SystemWordLength" -> 64, 
      "Evaluations" -> {}|>|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.85868991574609*^9},
 CellLabel->"Out[31]=",ExpressionUUID->"f920c46c-2eb8-4be2-9155-1cfd6a98b2b6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ContourPlot", "[", 
    RowBox[{
     RowBox[{"fL", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x", ",", "y"}], "}"}], ",", 
       RowBox[{"\"\<Probability\>\"", "\[Rule]", "Orange"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", "0", ",", "3"}], "}"}], ",", 
     RowBox[{"Evaluated", "\[Rule]", "False"}], ",", 
     RowBox[{"ContourShading", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"LightBlue", ",", "LightOrange"}], "}"}]}], ",", 
     RowBox[{"Contours", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", "/", "2"}], "}"}]}]}], "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"Values", "[", "data", "]"}], ",", 
     RowBox[{"PlotMarkers", "\[Rule]", "\"\<OpenMarkers\>\""}]}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.822998954737088*^9, 3.8229989707003593`*^9}, {
  3.822999030989399*^9, 3.82299903340709*^9}, {3.822999502201433*^9, 
  3.82299950409181*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"0b019102-5e97-46f9-834a-232162dbc756"],

Cell[BoxData[
 GraphicsBox[{{GraphicsComplexBox[CompressedData["
1:eJyFmA10TVcWx1/i5eUhVUtrYtFpSLIQQpCptNLYdyKsRJXGx4xREhSjvqqo
+NasUmlMBzXGqNIpKxk0VYpgKZlJTTsmjLIqldyKhIjwhEje583Hmzfvzv/c
dfaL1bey1lm/d/c59/zP3mfv/dJr5lvjZwebTKZLQSbT/0b+UQsX+v5KSGZV
cHTaR76/avbcJtj/OPoxs7cL9vo/LsHl/vlNgk/4X9cqONW/XpAC1rcTLFhf
3yzYb55mEax/rIwNnW2PqmDolZ/bBEOvbG8XDL1g6AVDLxh6wdArr28WDL2y
36yMDT+2rdMYZb0q06syvSrTqzK9KtOrMr0q06syvSrTqzK9KtMbGKdt+9HQ
yUfoBUOvbGcXDL1g6AVDLxh6wdArr28WDL3yvbMyNu5h23GqBuiSnxuj7F8b
86+N+dfG/Gtj/rUx/9qYf23MvzbmXxvzb2CeafseqgF+47rAfIReMPSCoRcM
vWDoBUOvvL5ZMPTKedPK2MijbecZNSAuud+4LtneGOV4trN4trN4trN4trN4
trN4trN4trN4DqwTbedRNeDe8bjkfuO6wHyEXjD0gqEXDL3y+mbB0CvXPStj
ow5CL8+bPK/we8fjkvuN6wLzEXrB0AuGXnl9s2Doleu6VXlSnYdeXhd43uR5
hd87Hpfcb1wXmI/QC4ZeeX2zYOiV+xar8qQ+Bnp53eN1gedNnlf4veNxyf3G
dYH5CL3y+mbB0Cv3ZVblSX0a9PK6zuserws8b/K8wu8dj0vuN64LzEfoBUMv
GHplNvpQOT+bA/oYOT+bA+ogrxM8j/I8w+8hj1PuR66Tj3J+Ngu9Mht9NvTK
rAb0Lbyu87rH6wLPmzyv8HvH45L7jesC8xF6ZcaH99W87+R9Ge9beF3ndY/X
BZ43eV7h947HJfcb12UNGPX9niGMUA7W9x+qyM8D58EO88FPGvk6fB7fB9+3
vK/PCaOu/8nf81F+j2HHv+fv5+8xSR9rwPdtvxf+cYpzBOt2PwjW9VYJ1ufX
Ctbj4CHjBlrgX9gTMOpx1CJ4m3+eSQHrcRkk2L9cYTvB+n5DFHk/yBNOUedl
Vpm+avbcxvQ+FowR7+eMewTGPQLjHsn6DX24R2DcIzDiDefGmfsT91zOZ3z/
Rn6T10Nf6/j/vtyE76P8hhot8htYFN1vzSJuwdgP3od4kfNNrVhXX+8eyefx
UNiDYa/vv57ZNzD7BmGvx0+jiDvEl9ynBinQp38fLM4X8Qd7MOx1O7OwR3zK
fXOIsNf3F6Jgn7h/8Juc3xwij4B1u/NCJ+4r5oNhr/v3imD9/K+L+bjfmA+W
46CC8S3mjxrB+lgnWH9fw8/eG8QbH3FumC/70SUY9ohDcKvfrkXMR77BfDDs
9f14SWaT8J9+Tka86Osa8aDrDVFk/5Uwf6pifTlu3ST3le6A/AH/YB4Y5w3/
yPnELtbDPnBu0I/3gqEH+mGP/IFzRj6Q319B8nwv20+12A/iR87vNpZ/6pj+
x+I54gv7Q36V81OQIsdJsHgO/+E58q+cz0JYfv6B7VdlcVvB9mOM8CfWx/l4
Fz9MntzRIerZtu2Oj0NWGvXqePTJm/cajHq1/ran66UFxv8dNrzx5bWjNYH/
dxjybI+Itam+dfOPFaX8x6g/0Z7i3JhUTZzH/XOdisOKNaF/ydaclvrEwN/Z
q/d999SkZotyb0dqeedJLorvuzBq/8p6Wnm2y/Y9t1y015J3smaZnX4zMT42
I1+jqnDHxU8G+n4PTHjm/v14X3/ZuHvX8FiLsvHAnf7zChxUP9m8OTPiKqmv
7E7cf9W3z4K09WMXlJKla0md8yUnDV7a15RgqaLepXmbDiU5qVfc/Iz3E6uo
24WsTl8dcJK9cF/oHeUuLSwyjzv9jIu8CbOSUkbVUbe/jdt4ssVN9mlnpy+a
30xPL9+5saKfh/JcIwZvOdJCrx8qfjlls4esYZc9k+NNyontqwru7PD1G6l3
l3z6O5Piqk78bZ1Jo2Grkzq6yoOUGUfeXWGfr1FjfXrt2KntlB5DxjUkbjTu
9x+jbUpPryOg36jJX65cqqyiQvPR85kTA/uBiy2uS2nfm5Rfj8wckhflFvNG
V41Krl5h1Of5RQfD/3XPRac+qA3LPmCnhtM5xy5PdFPYqKwxgz530dYuKYNm
xfjyZcKHxTlLnPTisuyR7ZKb6PZImtaaYVF6LdDcHb5ooql5Lz2eVBmqVOaW
rT26qonGrJny8dP9Q5Wh26zTSk8Y/f+ljDyr+4TR7xX3HVv63ndOmmHtkHOu
uZYGlDZsf6HCSXkTul//04j7FPxqzFI1zqjXsba5yUlpLjpcYt61MrqeLlv7
9Cg6aNTnLZXJs1OOu6j3h39Jj+nTSFMt8dkJHTVRj6ee6j/8SjeNshYNq9UG
BSs/rT2mLh6q0brnbnj37Q5WHvWbGddjoybqsaP7mnkrPtMo82BcvvacWTlQ
9O2O1lbN6BcPvXV4fZiv3n/94O3xe0OU2Ih/hoxOdYh6u3brlKgbzzuot81a
tv6jzyi8j7kxfIiDjvw4zn5h8VF6/ean/9j9ewf1DAlq7PXNebKcCNuzf7aD
VgzLHfxl+nlaNWbzyAHFDpEfbj/qfCBij4P6HN75i0dzvqfkvENrBjU66JPT
jRtqupZT2vE56V1eNvrrf3tiv+ltdVLzjIrww2//RK9FLn/v7LtO+mvKA8vq
oDsUOfcaje7kouak94cGux/QrD9EVv19nYuqQ4LnXsl7THH9Ygf9uNtFNTtD
76ZkNVDZV48KP9jjFnG26VT/3H6L3WLsmdQhYUKum8bsLRiaE+uhXlp2VWmR
m059bfPc/EKjm1Hz7tYX+p57e066uFCjSk/G/QXhRv8+5+G561McbqraP3tx
QlwzVd+Kr16b4qEB70we0PnNVpq1d++s9G1Gf9+389D2M6d7SHtxao+7g710
Zub4sg5XPVQ/qaE1ZkiQ4s1st31npq9+Hsm+UBLXTmns90bf5lKNum0JX5d/
w6y0T9V2RtdptNR77PTCAUZ9LTtzraw88luaUVZQ9ufpRj3tPSLq1dXlgfW0
Mrt9Rs6yJio4d+ydgUudVP/s2WkvDK+mol2/7DQmwk1Xc/tvuB7jpOVPDdv3
ZomHRnhuDXyle5BiTlwyeFNWE/3qtcjnD0WEKv8FhRxp6w==
     "], {{
       {RGBColor[0.87, 0.94, 1], EdgeForm[None], 
        GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNl0tsl0UUxWdogUhZUFpAJIQCNXFVaCGgVSgtqSDyasMOqMUlatGoiQUK
+IgCQjViRApUIwoU0GgUSqXRqJRHwZWCijtIIDHGEGOIG8RzMr/Jn8XJnfnu
nTv3NXfmm/zkuua2ISGEB2MIRaJXBc9LhaeFVcJq4Rloi7BJsvcLHwrrNH9C
aBWeha4R2pA1b4Lk7hVGCpuFB4SPhKfEW8ke72p+n/CjsJG9veeGkOQ83xzS
ft5nvbAW3ib2M69B6+uF5zTuQId5Q4UxQrnXij9a+ETYo/k2YbtQE5PMMGFH
SHZ0wFuPLS9I5h5hUHhUaBS26PsufLwg7GSd7epi/ZtgA3rbJVcqXBTe13wr
duxFzvu/KN4IoVvYxzfrPhmTn18L+/nWKSzS/DHhLY2/EV0gnLeMcFvf9onO
EK0VnSn6l/AHOR8Fdd7r0W+//kbumjBb3x5y7jU+4HoRdggDml8XTgt/CjeZ
b0aX9Qx1bET7Q5K/JPyM7A3k+8jbWfsmOiict7/COX8XToWkx7w++OZ9Zt+E
IzHZa7s1DMtjqu2xGjeJPoL9V/F9CDZfxx7zH0amlrFj9Q+2WvYWMYl8M+8n
dNwgDteQuYrMv/Bsy2zsse45d+XiFjadEM4Qp2xHJTpuslcn9eUY+7w1Cc0h
nb/lzB3rY8KnwkHpKHZtxqTbe/QKxSGdiTJi6Zg69pex4SzoJQ+/MD9HLo6y
h+M4mvp5jTh/GVPNufZejykmudYOh1T3Pn9HQjonrv0ibLEun4f2kM7eIWE3
a35l//PEfIDc9SJ3GFtNe0KqCdfGsZj8Poic4+Lz043fPdhif/bBu4R+x+I3
9hwkRkfwvwc/7MMV+BdYd5xY5zW5fk+Rn4n0vfKYfDqJLfNDOquujQahhnm9
UM18KrFy/iYTe8fNdVVLDZeT46HwhhDjMXwbho4i5KYg52/ThElCBftNYU/3
9GUh1ZlreRb1XI0dltuub48L3wnT0TEZH6yjEpRji/Pj/jsc2VH40xnTGT4j
LNV8rlAnLBHmMH9ZvGqhR3iF8/55TLwq/JgXkh3VrJ/G3HfPYvSthnqfFqj9
3EovdU9tJh/OTxP5aCAW85h/ILn/RN/grF2mjrZoXiUciklvHWtKNJ8n3NH4
C3rsq0IXteG7sQ5bcgyWYuttbJmJr3OJy1RiXUMup5KXWu6ASuSW4P8M9DQQ
mzp0ua5d3z5L5+jlp0QXCiu4a/q5L3wv1aCjnjqaQt6n42sdOahnXgq/glqo
xNZZ9DzXhu9435vuA34HbGTuu72Due8Z90K/DfwO8Nj90W8Of3OPbL2L3wbf
6+2D70331F5ycYIcNhOXScSlCp9qQqHeq0OhxqeHQr0tJ2drsb2d2DTfVTtN
yH1LTLfF9K5YSGz3Y5t7VJnrJqa71P77nZDfJqa5X5puJS47kBtg7emY/Lav
+Z2yEznXXRN9w+vda91zfY4XYY/l3BvzO8U0v3G6QuE9tYf1O/HBa1bQE3K8
94fCu2UxPrq+GsllIznx+Cxvg/di6t3u9bmXmx5nH/f03L9Nj2Kjqft1vht6
sWER+/ot47Xd+HwI3Y3kwzYvYLwF3w4j14XuHvZ0X893o2m+K0z78LkRnb6T
+7G7B77tc4/Ndbo7prflrljoTe5V42Kqb9d2Ob3i95DqY3xM98wF1r4U09va
Mh3C8Zjeln5jWs8EdHndRO6jvejbE9N71+/et4Wj9OnnYzqfNfT/EZwZnxfL
uje5L/lfoQReCX3OZ+A2a+ajYwZ68v+Gz/pweL6nRuKL6+AKPts+94rZ1O0g
vHxXm+b3gml+v5i6L1ey3mutt55+Yd3W4xjeIdaO81jk7fcPMf1H+H/i45hq
6ADrR2Kn67qUGvuecTuyo6m5HJdm6qGMmhhPHmzDRda+E9P/0zjiaB3F6PGd
WRFSr/J58PvjNLVun30XVaG/GH1F2NZCrTnuZfSYfnxfQ75WkRP343xf5vvT
1P9yy6hd63Nfa2XeFAo9eCU63BerqTnvl8+qz+4c6s318xVj/3v9D8fGoSM=

           "]], PolygonBox[CompressedData["
1:eJwt0tkqhGEcx/HnZSbhiCljaQ4cKCeUHAyh5AChLM0VuABygrIvY2dQYytr
1ux7tuziGlyL5fv0/g4+/Wfeed7/818ms7G5oSnGGJMDDwYcYwoRxDHGUYMq
POEWZWjh7A1xF17U4h0nKEAdpnCFUiSiFXfoNW6Oe0wjHiUIYwUJ+OHMMrET
achDH+Z0dypxXjlt7ix04xzFqEcE7Y57NgNRjKIS5XhAB3zItXXhDEXKMaie
be/VGNM79t0KjGhGQfXcj0V8U186cQkfmkUKzw6JO7rLg20sIKAeba9vmqVP
tUVVux9tmEWSdmJ386Va7Ew/iV2Oe3dAuTeQjT9+XyfuaZZe7S6s2Rep94hm
Z/8DpxjSLuyOLjCBWNXw4rg5bW6742s8a1YhzEhIM3/EMH6Nu+NLrGl39tkq
8QD5iOP7PnFSs0rGK7b02dawqZn41WOP487YztrmOMI/w5xQYg==
           "]]}]}, 
       {RGBColor[1, 0.9, 0.8], EdgeForm[None], 
        GraphicsGroupBox[{PolygonBox[CompressedData["
1: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
           "]], PolygonBox[CompressedData["
1:eJwt0ssrRVEUx/F9JEx0TcxEV0pdKQOmDJgyuAa3W7c78AcwQKG85RUSIm95
5pHI+533+x/CwHe1f4NP6+y199lnn7V2uK4hWp/inCtGKiYC51KQwBeaUUW+
gniCFRSgllwH8crmbYw3tGKZuWriA87htOYa2yixvUl3E/dQih/GO8RGpCm3
i3H8MRcjfuAbSWRjCtPIQRSvOEKG3ukjTiJTa2awgDDysYgDpOOX9T3EW4QQ
YBBPuHH+zM/o1Vr7xiFOVYtC4hkGAl8rq9GyaphQTVp1Zjt7LuYwq+c8zKMf
5TqjnXUNERRhHffIUo+G8a7ah3T2Jf2b9cx6NxL4XkS01yhqUIxNtGHf+dwj
NvQty9ncauD/rY5xJ3FL71pNulRzq30lLgLfQ+tlme2BS8053YVPxNUT602L
9o5rbki1t3+8w0vg97IejaHJxs7X6Fh3IqaczbUH/m4ldVf+AX7/VX0=
           "]]}]}}, {{}, 
       TagBox[
        TooltipBox[
         {GrayLevel[0], Opacity[0.5], CapForm["Butt"], LineBox[CompressedData["
1:eJwNxtc6ggEAANDfo/RKbrvzALmQnVlEVlZKVlZGESEkW2S8k3Nxvu+EOjrb
I21BEITpklNKnHBGmSbzVBjnnDgXLFAlwSUTpPkmyhWTbLDJFt1ck2SbHYbp
4YYaBXYZoZdV+vhhmTUyfHLHPbc8UOeLFo9M0WCaJxZ5IcUzMyzxSz+vzLLH
PgcM8MYchxQZZZB3PjjimDFiZBnijxXWyZHnHwnqO0o=
           "]]},
         FractionBox["1", "2"]],
        Annotation[#, 
         Rational[1, 2], "Tooltip"]& ], {}, {}}}], {}}, {{}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], 
      GeometricTransformationBox[InsetBox[
        FormBox[
         StyleBox[
          GraphicsBox[{
            {GrayLevel[1], DiskBox[{0, 0}, Offset[{3., 3.}, {0., 0.}]]}, 
            {AbsoluteThickness[1.5], Dashing[{}], 
             CircleBox[{0, 0}, Offset[{3., 3.}, {0., 0.}]]}}],
          StripOnInput->False,
          GraphicsBoxOptions->{DefaultBaseStyle->Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.368417, 0.506779, 0.709798], 
            AbsoluteThickness[1.6]]}],
         TraditionalForm], {0., 0.}, Automatic, Scaled[9.75]], {{{1., 
       1.2}}, {{1.3, 0.9}}, {{0.9, 1.2}}, {{2.1, 2.2}}, {{2.3, 2.9}}, {{2.9, 
       2.2}}}]}, 
     {RGBColor[0.880722, 0.611041, 0.142051], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], 
      GeometricTransformationBox[InsetBox[
        FormBox[
         StyleBox[
          GraphicsBox[{
            {GrayLevel[1], 
             PolygonBox[
              NCache[{Offset[{0, 4}], Offset[{(-2) 3^Rational[1, 2], -2}], 
                Offset[{2 3^Rational[1, 2], -2}]}, {
               Offset[{0, 4}], Offset[{-3.4641016151377544`, -2}], 
                Offset[{3.4641016151377544`, -2}]}]]}, 
            {AbsoluteThickness[1.5], Dashing[{}], 
             JoinedCurveBox[NCache[
              Line[{Offset[{0, 4}], Offset[{(-2) 3^Rational[1, 2], -2}], 
                 Offset[{2 3^Rational[1, 2], -2}], Offset[{0, 4}]}], 
               Line[{Offset[{0, 4}], Offset[{-3.4641016151377544`, -2}], 
                 Offset[{3.4641016151377544`, -2}], Offset[{0, 4}]}]],
              CurveClosed->True]}}],
          StripOnInput->False,
          GraphicsBoxOptions->{DefaultBaseStyle->Directive[
            PointSize[0.012833333333333334`], 
            RGBColor[0.880722, 0.611041, 0.142051], 
            AbsoluteThickness[1.6]]}],
         TraditionalForm], {0., 0.}, Automatic, Scaled[9.75]], {{{2.1, 
       1.2}}, {{2.3, 0.9}}, {{2.7, 1.2}}, {{1.1, 2.2}}, {{1.3, 2.9}}, {{0.9, 
       2.2}}}]}}, {{}, {}}}},
  AspectRatio->1,
  AxesLabel->{None, None},
  AxesOrigin->{0., 0.},
  DisplayFunction->Identity,
  Frame->True,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "GridLinesInFront" -> 
    True},
  PlotRange->{{0, 3}, {0, 3}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.858689946263911*^9},
 CellLabel->"Out[32]=",ExpressionUUID->"2a9ff521-712e-4468-955c-9930457b61d2"]
}, Open  ]],

Cell["\<\
Next, the polynomial kernel does quite a good job in this case\
\>", "Text",
 CellChangeTimes->{{3.82299893543262*^9, 
  3.822998947040895*^9}},ExpressionUUID->"af4083e9-c97a-4451-aa68-\
ef3827a8545a"],

Cell[BoxData[
 RowBox[{"fP", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"data", ",", 
    RowBox[{"Method", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<SupportVectorMachine\>\"", ",", 
       RowBox[{"\"\<KernelType\>\"", "\[Rule]", "\"\<Polynomial\>\""}], ",", 
       RowBox[{"\"\<GammaScalingParameter\>\"", "\[Rule]", "2"}]}], "}"}]}]}],
    "]"}]}]], "Input",
 CellChangeTimes->{{3.822553412693893*^9, 3.822553476001458*^9}, {
  3.822553527000094*^9, 3.822553560051292*^9}, {3.8225536032357807`*^9, 
  3.822553624439756*^9}, {3.82255369819847*^9, 3.822553748689126*^9}, {
  3.822999221246902*^9, 3.8229993471877832`*^9}},
 CellLabel->
  "In[390]:=",ExpressionUUID->"d547bbb3-775d-439b-99b1-adc2c8e56e99"],

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ContourPlot", "[", 
    RowBox[{
     RowBox[{"fP", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x", ",", "y"}], "}"}], ",", 
       RowBox[{"\"\<Probability\>\"", "\[Rule]", "Orange"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", "0", ",", "3"}], "}"}], ",", 
     RowBox[{"Evaluated", "\[Rule]", "False"}], ",", 
     RowBox[{"ContourShading", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"LightBlue", ",", "LightOrange"}], "}"}]}], ",", 
     RowBox[{"Contours", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", "/", "2"}], "}"}]}]}], "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"Values", "[", "data", "]"}], ",", 
     RowBox[{"PlotMarkers", "\[Rule]", "\"\<OpenMarkers\>\""}]}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8229991018851557`*^9, 3.8229991109407997`*^9}, {
  3.822999155841064*^9, 3.82299916440069*^9}, {3.822999271038748*^9, 
  3.822999272286792*^9}, {3.822999491075138*^9, 3.8229994948429947`*^9}},
 CellLabel->
  "In[399]:=",ExpressionUUID->"83f37290-0f9d-4d15-bcd9-512ac8d6d8f3"],

Cell["The Gaussian/radial basis function kernel does a good job", "Text",
 CellChangeTimes->{{3.82299893543262*^9, 3.822998947040895*^9}, {
  3.822999357537806*^9, 
  3.822999373005495*^9}},ExpressionUUID->"b13bba6c-3616-4f39-992f-\
cb29a2e45d59"],

Cell[BoxData[
 RowBox[{"fR", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"data", ",", 
    RowBox[{"Method", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"\"\<SupportVectorMachine\>\"", ",", 
       RowBox[{
       "\"\<KernelType\>\"", "\[Rule]", "\"\<RadialBasisFunction\>\""}], ",", 
       RowBox[{"\"\<GammaScalingParameter\>\"", "\[Rule]", 
        FractionBox["1", 
         RowBox[{"2", " ", 
          SuperscriptBox["0.4", "2"]}]]}]}], "}"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.822553412693893*^9, 3.822553476001458*^9}, {
  3.822553527000094*^9, 3.822553560051292*^9}, {3.8225536032357807`*^9, 
  3.822553624439756*^9}, {3.82255369819847*^9, 3.822553748689126*^9}, {
  3.822554132756976*^9, 3.822554157006288*^9}, {3.822554211801979*^9, 
  3.822554266062611*^9}},
 CellLabel->
  "In[392]:=",ExpressionUUID->"cb03731a-875c-440e-929e-3d85c43c45ed"],

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ContourPlot", "[", 
    RowBox[{
     RowBox[{"fR", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x", ",", "y"}], "}"}], ",", 
       RowBox[{"\"\<Probability\>\"", "\[Rule]", "Orange"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", "0", ",", "3"}], "}"}], ",", 
     RowBox[{"Evaluated", "\[Rule]", "False"}], ",", 
     RowBox[{"ContourShading", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"LightBlue", ",", "LightOrange"}], "}"}]}], ",", 
     RowBox[{"Contours", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", "/", "2"}], "}"}]}]}], "]"}], ",", 
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"Values", "[", "data", "]"}], ",", 
     RowBox[{"PlotMarkers", "\[Rule]", "\"\<OpenMarkers\>\""}]}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.822999387520688*^9, 3.822999475932433*^9}},
 CellLabel->
  "In[398]:=",ExpressionUUID->"e1fba570-e6ea-4a26-beb9-071d5b74976d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Handwriting recognition: Suppor Vector Machine with MNIST Digits dataset\
\>", "Section",
 CellChangeTimes->{{3.8229906835961246`*^9, 
  3.822990701966954*^9}},ExpressionUUID->"5b7456a3-1a2f-41f1-a5be-\
9904c63118e1"],

Cell["\<\
We now return to the example of handwriting recognition to see how well \
support vector machines perform with categorising the MNIST Digits dataset\
\>", "Text",
 CellChangeTimes->{{3.8229995585095243`*^9, 
  3.8229995901177692`*^9}},ExpressionUUID->"5ec8ac3d-447b-4953-ba0e-\
0deec8bb5628"],

Cell[BoxData[
 RowBox[{
  RowBox[{"MNIST", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<MNIST\>\""}], "}"}], ",", 
     "\"\<TrainingData\>\""}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.82178433819939*^9, 3.821784359377384*^9}, {
   3.821998365668429*^9, 3.821998390644134*^9}, 3.821998668594962*^9, 
   3.822033647805273*^9, {3.822033779360832*^9, 3.822033791127304*^9}},
 CellLabel->
  "In[403]:=",ExpressionUUID->"d1d261aa-728b-454d-a9da-65ca88505bf4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"MNISTtest", "=", 
   RowBox[{"ExampleData", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<MachineLearning\>\"", ",", "\"\<MNIST\>\""}], "}"}], ",", 
     "\"\<TestData\>\""}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.82178433819939*^9, 3.821784359377384*^9}, {
   3.821998365668429*^9, 3.821998390644134*^9}, 3.821998668594962*^9, 
   3.822033647805273*^9, {3.822033779360832*^9, 3.822033791127304*^9}, {
   3.822591074406793*^9, 3.822591081954607*^9}},
 CellLabel->
  "In[419]:=",ExpressionUUID->"2f096863-4844-4fb7-8fb2-292c99e75edd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"MNISTbynumber", "=", 
   RowBox[{"GroupBy", "[", 
    RowBox[{"MNIST", ",", 
     RowBox[{"Last", "\[Rule]", "First"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822033207695846*^9, 3.822033301592517*^9}},
 CellLabel->
  "In[426]:=",ExpressionUUID->"9ba4ef03-b0b3-474c-9509-d5ee898dbc93"],

Cell["\<\
We will train our support vector machine with a random sample of 100 digits.\
\>", "Text",
 CellChangeTimes->{{3.8220330577685127`*^9, 3.82203317073836*^9}, {
  3.8229996472198153`*^9, 
  3.822999666670204*^9}},ExpressionUUID->"eaa048fa-eb2a-4e80-83d6-\
d4ea0b4f7340"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainingset", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"MNIST", ",", "100"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.822033018222289*^9, 3.822033048435541*^9}, {
  3.822999703449627*^9, 3.822999707590232*^9}},
 CellLabel->
  "In[404]:=",ExpressionUUID->"ac76cc91-1e77-4fc7-a877-1839f263084e"],

Cell[BoxData[
 RowBox[{"cf", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"trainingset", ",", " ", 
    RowBox[{"Method", "\[Rule]", "\"\<SupportVectorMachine\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.821769871376132*^9, 3.821769872129084*^9}, {
   3.8217699072654333`*^9, 3.821769913768124*^9}, 3.822999729652817*^9, {
   3.8229998027085743`*^9, 3.8229998299510517`*^9}},
 CellLabel->
  "In[416]:=",ExpressionUUID->"e8270b54-cd9c-495c-964f-9dfea30d505b"],

Cell[BoxData[
 RowBox[{"Information", "[", "cf", "]"}]], "Input",
 CellChangeTimes->{{3.822999779477523*^9, 3.822999782107595*^9}, {
  3.82299983394486*^9, 3.822999834146515*^9}},
 CellLabel->
  "In[417]:=",ExpressionUUID->"89d666bc-740a-4a50-8bc0-3c46d014fce3"],

Cell[BoxData[
 RowBox[{"cf", "[", 
  RowBox[{"{", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQgU/0cCe9wZJ/1/PRlJZIcrF5Pmq6NCzAlwoVeGTExZz/8fYGLShgnN0WPi
aH/wHyTWDRVayMXE0QZiHGBinQUW+baKhYm3HczMZ5KDqMpgYjJ4AWZdkWGa
D9HIwsQ0DSJbyAQRm8PFxHT/D1joljhTxFcgfZCXia33L1jobj6TyUcQw5+J
qRSi8W82E9MSsOUCTOq3wUJ/JjExub8BMn4HMDGvBwv9BAo5fgCxOpmYLCE6
XZmY7H+AWexMTLtB9CINVt5ciNB/RiaX7//PpimzMgmlw/zOyCS0IEWciYnJ
ZN1/hBgYiMR8RIRkAjNQhE/8GHJ4/58iodB9AUXkPwDBoBwJ
       "], {{0, 20}, {20, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{20, 20},
     PlotRange->{{0, 20}, {0, 20}}], ",", 
    GraphicsBox[
     TagBox[
      RasterBox[{{255, 196, 106, 255}, {255, 144, 74, 255}, {252, 64, 74, 
       255}, {236, 2, 74, 255}, {204, 2, 74, 255}, {145, 1, 73, 255}, {237, 
       28, 74, 255}, {158, 2, 87, 255}, {146, 2, 164, 255}, {146, 2, 164, 
       255}, {145, 1, 163, 255}, {146, 2, 164, 255}, {146, 2, 164, 255}, {146,
        2, 126, 255}, {146, 2, 48, 248}, {145, 1, 0, 205}, {146, 2, 1, 237}, {
       191, 2, 64, 252}, {244, 40, 74, 255}, {255, 164, 74, 255}}, {{0, 20}, {
       4, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{4, 20},
     PlotRange->{{0, 4}, {0, 20}}], ",", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQgU/4eAAxMzmZgYmJiYJn74DwP5TMzMzGCcgBAT0tCortJQYmbygYsdPAim
biGLQYEXptgrM0yxhUA7ElGFDggxMzt8QBULAboPVeRUChMz3zwUoWRxZia+
mShCeSCzNiGLvHcA+tUBWeR+jyIzk9NmZBtf6QD9rvYQWdU0Q6BQOLLIBTGg
o5jUoLwNkw4srJs8iRkEONRU1dSAmJdZkIMZKgYNTxBW1lh8YbIOXGwyCABt
BwDO0xJ3
       "], {{0, 20}, {20, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{20, 20},
     PlotRange->{{0, 20}, {0, 20}}], ",", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQgQgyT/A8HXrqqqyjxGiaqqByDuVTEmJiZGJhBQewXkbwMyVFXV1NR4mJhu
A/nPVq9e/RukMJGJ6ch/BNhvwcS0E8a5sW2JKBOT8zcw556NoTjIuLT7EEkz
iPkp36CKVSF8T5jm3urq+i9xTCzHkEz/f4uBsfn//9/PfkD5b7SYNF7872da
CuWfZGKa+v9/EpMdhPvLn4n3HIgvfAXM7wdL/9/HxJQO4q6XZlJ/BzKViYl/
/f9bBYxMfBtA4j8rmJj4VMWYGLkroeaUg0OCbRvMHX/WMdmYVe+C8gC6b9R+

       "], {{0, 20}, {16, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{16, 20},
     PlotRange->{{0, 16}, {0, 20}}], ",", 
    GraphicsBox[
     TagBox[
      RasterBox[{{255, 110, 92, 255, 255, 255, 255, 230, 255, 255}, {255, 75, 
       57, 255, 255, 255, 235, 42, 211, 255}, {236, 17, 130, 255, 255, 255, 
       232, 23, 170, 255}, {141, 1, 151, 255, 255, 255, 255, 56, 170, 255}, {
       141, 1, 204, 255, 255, 255, 255, 56, 170, 255}, {141, 39, 250, 255, 
       255, 255, 255, 56, 170, 255}, {141, 86, 255, 255, 255, 255, 255, 56, 
       170, 255}, {40, 86, 255, 255, 255, 255, 255, 56, 98, 250}, {23, 13, 37,
        37, 37, 97, 118, 9, 111, 252}, {159, 95, 95, 95, 95, 70, 0, 1, 170, 
       255}, {255, 255, 255, 255, 255, 255, 255, 56, 170, 255}, {255, 255, 
       255, 255, 255, 255, 255, 56, 170, 255}, {255, 255, 255, 255, 255, 255, 
       255, 56, 97, 255}, {255, 255, 255, 255, 255, 255, 255, 56, 76, 255}, {
       255, 255, 255, 255, 255, 255, 247, 46, 76, 255}, {255, 255, 255, 255, 
       255, 255, 233, 25, 76, 255}, {255, 255, 255, 255, 255, 255, 255, 123, 
       51, 248}, {255, 255, 255, 255, 255, 255, 255, 150, 1, 236}, {255, 255, 
       255, 255, 255, 255, 255, 196, 1, 111}, {255, 255, 255, 255, 255, 255, 
       255, 249, 32, 83}}, {{0, 20}, {10, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{10, 20},
     PlotRange->{{0, 10}, {0, 20}}], ",", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
GUhCBIj/o4J/T9cVT0QRebs2mZGRwQMhsCtOT4SRMWHXxV9woS18HKIh827/
QdJ2WigGmQsWElF/iyZ0ToTRIboaReFPVUZGWXWmKchiv3199339L6/wDVnw
L9D+GxwOf9GM/L+KeR6UdRUm9MWW8wmUaaYHYv38/yWKMQEmncEoVNASqmGp
xp7/Am5lGjsjCMTvRnHIeiC48Q9JBABCvQ8W
       "], {{0, 16}, {20, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{20, 16},
     PlotRange->{{0, 20}, {0, 16}}], ",", 
    GraphicsBox[
     TagBox[
      RasterBox[{{255, 255, 255, 255, 255, 255, 232, 173, 54, 80, 255, 255, 
       255, 255}, {255, 255, 255, 255, 255, 251, 108, 1, 19, 198, 255, 255, 
       255, 255}, {255, 255, 255, 255, 255, 148, 2, 20, 198, 255, 255, 255, 
       255, 255}, {255, 255, 255, 255, 197, 18, 18, 202, 255, 255, 255, 255, 
       255, 255}, {255, 255, 255, 247, 50, 2, 175, 255, 255, 255, 255, 255, 
       255, 255}, {255, 255, 255, 40, 1, 101, 255, 255, 255, 255, 255, 255, 
       255, 255}, {255, 255, 115, 8, 2, 184, 255, 255, 255, 255, 255, 255, 
       255, 255}, {255, 255, 1, 2, 125, 249, 255, 255, 255, 255, 255, 255, 
       255, 255}, {248, 103, 1, 13, 219, 255, 255, 255, 255, 255, 255, 255, 
       255, 255}, {215, 2, 1, 134, 255, 255, 255, 255, 255, 255, 255, 255, 
       255, 255}, {193, 1, 14, 225, 255, 255, 255, 255, 255, 255, 185, 61, 
       158, 246}, {73, 2, 68, 255, 255, 255, 255, 255, 253, 137, 5, 2, 1, 
       141}, {21, 2, 157, 255, 255, 255, 255, 206, 88, 2, 2, 2, 72, 243}, {21,
        2, 195, 255, 255, 233, 140, 9, 2, 2, 2, 2, 172, 255}, {59, 2, 37, 142,
        195, 74, 2, 1, 2, 2, 55, 175, 255, 255}, {224, 37, 0, 1, 1, 1, 1, 0, 
       59, 187, 255, 255, 255, 255}, {255, 240, 92, 2, 2, 13, 134, 216, 249, 
       255, 255, 255, 255, 255}, {255, 255, 99, 2, 27, 212, 255, 255, 255, 
       255, 255, 255, 255, 255}, {255, 255, 1, 28, 212, 255, 255, 255, 255, 
       255, 255, 255, 255, 255}, {255, 255, 1, 194, 255, 255, 255, 255, 255, 
       255, 255, 255, 255, 255}}, {{0, 20}, {14, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{14, 20},
     PlotRange->{{0, 14}, {0, 20}}], ",", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRJI
mQgQCwPx//+PHv//f+zYylUrVxWVrFx17D8QWFmHhcvJM7FAYDhQjRUDEwgy
QqFs+P9VLDB5a+sSiKpj4WHHQdp7gXgVUFXYfxRgBVR1HFkApIbRGkON9WOE
ilUQ+xAm9cJslYNaBjEFDsNgpiAg3E4M246Fo9gGMw3N3asgvkMGlmiugqpC
UwfxXy+y0OM1TCyrYTYCANRP8Vg=
       "], {{0, 20}, {19, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{19, 20},
     PlotRange->{{0, 19}, {0, 20}}], ",", 
    GraphicsBox[
     TagBox[
      RasterBox[{{255, 255, 255, 252, 207, 207, 207, 226, 255, 255, 255, 189, 
       10, 68}, {255, 245, 130, 53, 1, 1, 1, 22, 174, 255, 255, 73, 1, 68}, {
       243, 68, 0, 1, 24, 125, 120, 23, 19, 220, 209, 3, 1, 83}, {95, 1, 1, 
       123, 231, 255, 255, 228, 188, 238, 43, 1, 1, 172}, {67, 1, 121, 252, 
       255, 255, 255, 255, 250, 114, 2, 1, 84, 248}, {67, 1, 177, 255, 255, 
       255, 255, 255, 183, 1, 1, 85, 247, 255}, {13, 1, 171, 255, 255, 255, 
       255, 208, 58, 1, 22, 216, 255, 255}, {67, 1, 56, 221, 255, 255, 242, 
       75, 1, 1, 204, 255, 255, 255}, {190, 54, 1, 26, 170, 247, 73, 1, 1, 
       121, 252, 255, 255, 255}, {255, 193, 38, 1, 1, 1, 1, 1, 64, 255, 255, 
       255, 255, 255}, {255, 255, 240, 148, 1, 1, 1, 1, 189, 255, 255, 255, 
       255, 255}, {255, 255, 255, 222, 1, 1, 1, 1, 20, 145, 252, 255, 255, 
       255}, {255, 255, 229, 46, 1, 2, 153, 76, 1, 1, 203, 255, 255, 255}, {
       255, 238, 117, 1, 1, 159, 255, 249, 17, 1, 38, 255, 255, 255}, {255, 
       93, 1, 1, 78, 243, 255, 255, 109, 1, 32, 255, 255, 255}, {171, 2, 1, 
       23, 246, 255, 255, 255, 109, 1, 32, 255, 255, 255}, {67, 1, 20, 198, 
       255, 255, 241, 146, 36, 1, 129, 255, 255, 255}, {67, 1, 41, 140, 140, 
       137, 29, 1, 1, 45, 246, 255, 255, 255}, {91, 1, 1, 1, 1, 1, 1, 23, 118,
        232, 255, 255, 255, 255}, {239, 60, 1, 1, 1, 3, 126, 226, 255, 255, 
       255, 255, 255, 255}}, {{0, 20}, {14, 0}}, {0, 255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{14, 20},
     PlotRange->{{0, 14}, {0, 20}}], ",", 
    GraphicsBox[
     TagBox[
      RasterBox[{{255, 255, 255, 255, 210, 82, 0, 1, 0, 11, 190, 255, 255}, {
       255, 255, 255, 173, 3, 16, 123, 165, 114, 1, 58, 255, 255}, {255, 255, 
       191, 13, 16, 166, 255, 255, 166, 1, 82, 255, 255}, {255, 215, 14, 1, 
       187, 255, 255, 244, 69, 1, 114, 255, 255}, {255, 117, 1, 16, 233, 255, 
       255, 252, 45, 1, 17, 104, 194}, {238, 14, 1, 186, 255, 255, 255, 255, 
       176, 1, 1, 1, 26}, {185, 1, 35, 244, 255, 255, 255, 227, 84, 1, 1, 1, 
       97}, {185, 1, 109, 255, 255, 255, 123, 16, 1, 53, 31, 1, 123}, {185, 1,
        62, 207, 207, 87, 6, 9, 102, 248, 57, 1, 191}, {221, 10, 1, 1, 1, 1, 
       82, 208, 255, 249, 47, 5, 201}, {255, 141, 5, 1, 23, 115, 235, 255, 
       255, 211, 1, 23, 255}, {255, 255, 191, 170, 233, 255, 255, 255, 255, 
       68, 1, 105, 255}, {255, 255, 255, 255, 255, 255, 255, 255, 250, 46, 1, 
       195, 255}, {255, 255, 255, 255, 255, 255, 255, 255, 220, 1, 13, 221, 
       255}, {255, 255, 255, 255, 255, 255, 255, 255, 176, 1, 27, 255, 255}, {
       255, 255, 255, 255, 255, 255, 255, 255, 48, 1, 68, 255, 255}, {255, 
       255, 255, 255, 255, 255, 255, 255, 48, 1, 199, 255, 255}, {255, 255, 
       255, 255, 255, 255, 255, 224, 15, 1, 199, 255, 255}, {255, 255, 255, 
       255, 255, 255, 255, 129, 1, 24, 238, 255, 255}, {255, 255, 255, 255, 
       255, 255, 255, 188, 1, 146, 255, 255, 255}}, {{0, 20}, {13, 0}}, {0, 
       255},
       ColorFunction->GrayLevel],
      BoxForm`ImageTag["Byte", ColorSpace -> Automatic, Interleaving -> None],
      Selectable->False],
     BaseStyle->"ImageGraphics",
     ImageSizeRaw->{13, 20},
     PlotRange->{{0, 13}, {0, 20}}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.821769882402701*^9, 3.8217698973429937`*^9}, {
  3.822999848887529*^9, 3.822999849124687*^9}},
 CellLabel->
  "In[418]:=",ExpressionUUID->"b6556ac8-ecb3-4151-825a-486cd1f15cab"],

Cell["\<\
Let\[CloseCurlyQuote]s see how well it performs by testing it on a random \
sample of the test data\
\>", "Text",
 CellChangeTimes->{{3.822591053083922*^9, 
  3.8225910697086077`*^9}},ExpressionUUID->"c1843b7e-da22-4305-b0d9-\
50f9042468f7"],

Cell[BoxData[
 RowBox[{"Tally", "[", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"cf", "[", 
       RowBox[{"#", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "]"}], "\[Equal]", 
      RowBox[{"#", "[", 
       RowBox[{"[", "2", "]"}], "]"}]}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"MNISTtest", ",", "1000"}], "]"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.822569063929542*^9, 3.822569126106969*^9}, {
  3.8225693264264917`*^9, 3.822569328987101*^9}, {3.822591096975554*^9, 
  3.822591097678933*^9}, {3.822999894945031*^9, 3.8229998951113033`*^9}},
 CellLabel->
  "In[420]:=",ExpressionUUID->"e527a159-0ae9-46e8-a0ed-195df370dc9a"],

Cell["\<\
It\[CloseCurlyQuote]s right about 15% of the time - only slightly better than \
random luck. We could improve this by going back to the training step and \
using more training samples:\
\>", "Text",
 CellChangeTimes->{{3.82259110804383*^9, 3.822591138974526*^9}, {
  3.822999966931994*^9, 
  3.822999999837356*^9}},ExpressionUUID->"413ee70e-ba3b-4b17-afd8-\
cc7cd2cdabec"],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainingset", "=", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"MNIST", ",", "1000"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8225688110580597`*^9, 3.822568832135991*^9}, 
   3.822569158739112*^9, {3.822569226653932*^9, 3.822569247223864*^9}, 
   3.822569379989315*^9, 3.82259115498377*^9},
 CellLabel->
  "In[422]:=",ExpressionUUID->"686074fc-3dfc-4292-a711-2bb991918a9c"],

Cell[BoxData[
 RowBox[{"bettercf", "=", 
  RowBox[{"Classify", "[", 
   RowBox[{"trainingset", ",", " ", 
    RowBox[{"Method", "\[Rule]", "\"\<SupportVectorMachine\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{
  3.8225687770697327`*^9, {3.822590922274912*^9, 3.822590924676269*^9}, {
   3.82259116172611*^9, 3.822591162656242*^9}, {3.822999944992779*^9, 
   3.822999953949429*^9}},
 CellLabel->"In[423]:=",
 CellID->1905138556,ExpressionUUID->"a5816e01-1698-4dba-b99d-bb9944b45536"],

Cell[BoxData[
 RowBox[{"Information", "[", "bettercf", "]"}]], "Input",
 CellChangeTimes->{{3.823000036976144*^9, 3.823000040471594*^9}},
 CellLabel->
  "In[424]:=",ExpressionUUID->"e549e4b2-f75f-42d6-af30-3a77c970fcb5"],

Cell["\<\
Let\[CloseCurlyQuote]s see how well it performs by testing it on a random \
sample of the test data\
\>", "Text",
 CellChangeTimes->{{3.822591053083922*^9, 
  3.8225910697086077`*^9}},ExpressionUUID->"9e2b11b4-e5ab-44c7-bc3a-\
805813741f8d"],

Cell[BoxData[
 RowBox[{"Tally", "[", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"bettercf", "[", 
       RowBox[{"#", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "]"}], "\[Equal]", 
      RowBox[{"#", "[", 
       RowBox[{"[", "2", "]"}], "]"}]}], "&"}], ",", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"MNISTtest", ",", "1000"}], "]"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.822569063929542*^9, 3.822569126106969*^9}, {
  3.8225693264264917`*^9, 3.822569328987101*^9}, {3.822591096975554*^9, 
  3.822591097678933*^9}, {3.822591171042836*^9, 3.822591171982439*^9}, {
  3.823000050362193*^9, 3.823000050586537*^9}},
 CellLabel->
  "In[425]:=",ExpressionUUID->"e8c37099-d32c-4d05-a1d4-55938e87535d"],

Cell["Now this is close to 90% accurate", "Text",
 CellChangeTimes->{{3.8225911746427097`*^9, 
  3.822591182160274*^9}},ExpressionUUID->"54ec42a6-53b3-4bb2-b07b-\
d6b50541c19f"],

Cell[BoxData[
 RowBox[{"Sort", "[", 
  RowBox[{"Tally", "[", 
   RowBox[{"Map", "[", 
    RowBox[{"bettercf", ",", 
     RowBox[{"RandomSample", "[", 
      RowBox[{
       RowBox[{"MNISTbynumber", "[", "8", "]"}], ",", "1000"}], "]"}]}], 
    "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.822569063929542*^9, 3.822569126106969*^9}, {
  3.8225693264264917`*^9, 3.8225693713053007`*^9}, {3.822569407860344*^9, 
  3.822569533802264*^9}, {3.822591255049089*^9, 3.8225912659081917`*^9}, {
  3.823000184550877*^9, 3.823000184876399*^9}},
 CellLabel->
  "In[427]:=",ExpressionUUID->"ffb1ea3a-9149-4f71-93f3-7a3951907207"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{949, 461},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
Magnification:>1.1 Inherited,
FrontEndVersion->"13.0 for Microsoft Windows (64-bit) (December 2, 2021)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"7a64993f-039e-4bd8-bb26-a1c01cc3d079"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 166, 3, 107, "Title",ExpressionUUID->"289eaf38-3e93-40a8-bc2b-d9c992b97006"],
Cell[749, 27, 423, 8, 63, "Text",ExpressionUUID->"ef24bbba-1885-49f3-bd5c-aeaabe0bc185"],
Cell[CellGroupData[{
Cell[1197, 39, 171, 3, 74, "Section",ExpressionUUID->"bde7937b-f30f-4050-93b6-58fce63e9674"],
Cell[1371, 44, 917, 28, 63, "Text",ExpressionUUID->"cadd491c-50ed-4874-93d3-6fd1c6d20aee"],
Cell[CellGroupData[{
Cell[2313, 76, 695, 21, 35, "Input",ExpressionUUID->"a037800d-9225-49ab-af5d-3c072ac2e1ca"],
Cell[3011, 99, 363, 9, 35, "Output",ExpressionUUID->"59ec4741-afaa-4bc2-adc5-669617301869"]
}, Open  ]],
Cell[3389, 111, 268, 6, 38, "Text",ExpressionUUID->"395ea9a3-acfc-487f-b9f9-78cf4694122f"],
Cell[CellGroupData[{
Cell[3682, 121, 2537, 70, 144, "Input",ExpressionUUID->"9ca59a21-1e5a-421a-a381-c57d6a5d6aa4"],
Cell[6222, 193, 162464, 2671, 343, 84244, 1388, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"20a51701-7b48-4b10-9485-cccc1eff6c04"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[168735, 2870, 170, 2, 74, "Section",ExpressionUUID->"3b64852d-85ac-42fc-81d6-a533fd895d6a"],
Cell[168908, 2874, 712, 14, 63, "Text",ExpressionUUID->"05d2161c-cfdb-419e-8627-028b75f6b563"],
Cell[169623, 2890, 2744, 73, 220, "Input",ExpressionUUID->"1baf39a4-fe3b-48a8-8f4b-14e1da2c8efc"],
Cell[CellGroupData[{
Cell[172392, 2967, 501, 8, 31, "Input",ExpressionUUID->"277a89e2-d112-4ae2-ab84-e40a68fffb47"],
Cell[172896, 2977, 13937, 320, 270, "Output",ExpressionUUID->"02e430c0-d34a-44fa-857c-7aaae4768b12"]
}, Open  ]],
Cell[CellGroupData[{
Cell[186870, 3302, 174, 3, 59, "Subsection",ExpressionUUID->"a0d87674-85da-448f-9f75-c4c4fc2b0335"],
Cell[187047, 3307, 311, 7, 38, "Text",ExpressionUUID->"572c21a5-143a-4be7-99b8-0e67f833dbbf"],
Cell[CellGroupData[{
Cell[187383, 3318, 651, 18, 31, "Input",ExpressionUUID->"39fd0026-dc2c-4255-974a-da8c80cda168"],
Cell[188037, 3338, 1508, 36, 78, "Output",ExpressionUUID->"8e4e94b2-fbd6-48b1-85a0-1ae7f92feafa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[189582, 3379, 724, 20, 31, "Input",ExpressionUUID->"432928fe-3fa0-4198-ac8b-6ca392c4d578"],
Cell[190309, 3401, 2382, 63, 99, "Output",ExpressionUUID->"8f1df277-56a9-46ae-a496-611177eb392a"]
}, Open  ]],
Cell[192706, 3467, 314, 7, 31, "Input",ExpressionUUID->"852d9e73-3faf-477b-a09e-a7d3c85fe505"],
Cell[193023, 3476, 241, 6, 38, "Text",ExpressionUUID->"b2879cb0-22d2-4c9a-b278-59ac4e9c8e3c"],
Cell[CellGroupData[{
Cell[193289, 3486, 987, 23, 50, "Input",ExpressionUUID->"3ffe4408-3fcf-46b1-a0e4-f6ba35e55493"],
Cell[194279, 3511, 444, 10, 35, "Output",ExpressionUUID->"506edd38-c2d0-4214-815d-2b8b084e79dc"]
}, Open  ]],
Cell[194738, 3524, 234, 4, 38, "Text",ExpressionUUID->"bd7948a8-251a-46fc-afb2-461b6156a944"],
Cell[194975, 3530, 458, 12, 32, "Input",ExpressionUUID->"1b6558b4-baa7-4c9c-af88-3005bc0e9790"],
Cell[195436, 3544, 221, 4, 38, "Text",ExpressionUUID->"8f936eb6-5958-47e8-975c-20e978b0b6cb"],
Cell[CellGroupData[{
Cell[195682, 3552, 454, 11, 31, "Input",ExpressionUUID->"0fe7274e-1835-4318-9915-b216629a75eb"],
Cell[196139, 3565, 408, 10, 35, "Output",ExpressionUUID->"0959c23e-bbf6-4364-bc17-0fbd16c92556"]
}, Open  ]],
Cell[196562, 3578, 161, 3, 38, "Text",ExpressionUUID->"4c0682ec-235b-4b88-9fdc-5ef34b86fb08"],
Cell[CellGroupData[{
Cell[196748, 3585, 456, 11, 31, "Input",ExpressionUUID->"3b9a41f0-56aa-460f-8b39-e5cf723e3e1e"],
Cell[197207, 3598, 408, 10, 35, "Output",ExpressionUUID->"fbaf1ecb-3c18-421d-8e63-5fa2e4c1a34b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[197652, 3613, 473, 11, 31, "Input",ExpressionUUID->"ff7fb8ed-4ba4-499e-99e9-689a79e4a5ab"],
Cell[198128, 3626, 408, 10, 35, "Output",ExpressionUUID->"f9f24c55-b633-4a2b-8a45-72d5c6403ed1"]
}, Open  ]],
Cell[198551, 3639, 218, 4, 38, "Text",ExpressionUUID->"71aa4012-4450-45c2-aab6-28babcd20107"],
Cell[CellGroupData[{
Cell[198794, 3647, 1022, 23, 94, "Input",ExpressionUUID->"370bfd30-4d39-437c-ba60-8fe86945b48a"],
Cell[199819, 3672, 14571, 297, 270, "Output",ExpressionUUID->"5c773cc6-891a-4f43-a044-dbe2bb650180"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[214439, 3975, 171, 3, 59, "Subsection",ExpressionUUID->"e82e002d-49e0-42cc-8e54-e6f0cebf4365"],
Cell[214613, 3980, 435, 16, 38, "Text",ExpressionUUID->"e94c3f54-6f1d-429b-ac94-ebd841892928"],
Cell[215051, 3998, 496, 13, 31, "Input",ExpressionUUID->"3f6fc47f-55ca-41c0-9908-49ca27586383"],
Cell[215550, 4013, 758, 18, 31, "Input",ExpressionUUID->"20a56d69-dbc4-4259-81e1-0e93d5109dc4"],
Cell[CellGroupData[{
Cell[216333, 4035, 321, 7, 31, "Input",ExpressionUUID->"10339893-fad6-4c91-bcd3-005fec9342e9"],
Cell[216657, 4044, 385, 7, 35, "Output",ExpressionUUID->"229094c0-3aa2-475d-b7e5-a7697fb8ffbb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[217079, 4056, 487, 11, 31, "Input",ExpressionUUID->"e07683dc-cd84-4d0b-80d2-29339c220f53"],
Cell[217569, 4069, 1144, 24, 57, "Output",ExpressionUUID->"d449e129-defb-4ea5-8458-a68bab26c10b"]
}, Open  ]],
Cell[218728, 4096, 188, 3, 38, "Text",ExpressionUUID->"ed6a3e03-94c6-463e-8ee5-edd2ba5ddf24"],
Cell[CellGroupData[{
Cell[218941, 4103, 1030, 24, 50, "Input",ExpressionUUID->"ea4cc13a-b92e-450c-a913-362242655375"],
Cell[219974, 4129, 2104, 53, 105, "Output",ExpressionUUID->"d185a3e1-d995-4922-ab13-245c7a777bd3"]
}, Open  ]],
Cell[222093, 4185, 434, 11, 38, "Text",ExpressionUUID->"4a17afa9-4bb3-4bfa-9e7e-1967d1f6127a"],
Cell[222530, 4198, 738, 18, 63, "Text",ExpressionUUID->"4e33ebd1-1ff3-4600-8d97-0b8096964f14"],
Cell[CellGroupData[{
Cell[223293, 4220, 442, 11, 31, "Input",ExpressionUUID->"803bf8ca-c056-42b5-8345-c5283b1dd6ea"],
Cell[223738, 4233, 292, 6, 35, "Output",ExpressionUUID->"71cd1198-5c1a-435e-b957-916fae45fe25"]
}, Open  ]],
Cell[CellGroupData[{
Cell[224067, 4244, 558, 13, 31, "Input",ExpressionUUID->"181e0ab2-0934-47c5-82b3-a4d1eabe144b"],
Cell[224628, 4259, 236, 5, 35, "Output",ExpressionUUID->"407a75c3-0d4c-44b3-af75-9815fdf8af8a"]
}, Open  ]],
Cell[224879, 4267, 271, 6, 38, "Text",ExpressionUUID->"35032774-e30d-4dbf-99f5-7cc7e51618d1"],
Cell[225153, 4275, 178, 3, 31, "Input",ExpressionUUID->"5baa77ea-1997-43b3-8291-9e1ce9f621d8"],
Cell[225334, 4280, 407, 8, 63, "Text",ExpressionUUID->"140257a3-8af3-40b2-a63b-ffe6b06ec56d"],
Cell[CellGroupData[{
Cell[225766, 4292, 602, 15, 31, "Input",ExpressionUUID->"94fa932b-ad41-415c-bf45-f61824fae632"],
Cell[226371, 4309, 228, 4, 35, "Output",ExpressionUUID->"f7bfe551-621a-4f44-ad69-08dd748fbe0d"]
}, Open  ]],
Cell[226614, 4316, 198, 3, 38, "Text",ExpressionUUID->"1e40ec72-719c-4d47-a1eb-5c57eb1e9b24"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[226861, 4325, 161, 3, 74, "Section",ExpressionUUID->"b5bf50b5-4b7d-404b-ba9e-547513b6c38b"],
Cell[227025, 4330, 427, 8, 63, "Text",ExpressionUUID->"4864c7c6-789f-4875-aaa1-93856e1c6573"],
Cell[227455, 4340, 347, 6, 31, "Input",ExpressionUUID->"5ccd1294-7c3a-4f87-ae2b-3e891445abfa"],
Cell[227805, 4348, 1087, 25, 52, "Input",ExpressionUUID->"0004fbc4-e895-41c2-bfa4-9ed1984559ac"],
Cell[228895, 4375, 905, 22, 74, "Input",ExpressionUUID->"697758f1-dfc2-46c8-a85b-118dfbf15810"],
Cell[229803, 4399, 238, 4, 38, "Text",ExpressionUUID->"d9346f6a-07ba-4745-9a38-bdcf7b6b95e4"],
Cell[230044, 4405, 863, 25, 52, "Input",ExpressionUUID->"f6edf7ba-a3e0-4442-8f9e-0ff52a668d13"],
Cell[230910, 4432, 610, 15, 31, "Input",ExpressionUUID->"b222bd1c-dfea-423b-ac3c-ce6537daec63"],
Cell[231523, 4449, 189, 3, 38, "Text",ExpressionUUID->"aa20f92e-3f62-4012-a4b0-70f91dd6e8a9"],
Cell[CellGroupData[{
Cell[231737, 4456, 407, 8, 31, "Input",ExpressionUUID->"7b4fdae2-57a1-455f-9334-d7bec952b862"],
Cell[232147, 4466, 8625, 194, 496, "Output",ExpressionUUID->"eca79425-1bc3-4aa6-9d2b-d142d8547f3e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[240809, 4665, 179, 3, 59, "Subsection",ExpressionUUID->"125c3fb4-950d-4960-89f3-f59c80d6202d"],
Cell[240991, 4670, 624, 16, 63, "Text",ExpressionUUID->"94ddb11d-5747-4a93-a5ab-a11e3e07c2c2"],
Cell[241618, 4688, 568, 16, 42, "Input",ExpressionUUID->"5103ce02-778a-4063-b394-61557f5d8641"],
Cell[CellGroupData[{
Cell[242211, 4708, 308, 6, 31, "Input",ExpressionUUID->"4781060c-423e-42d8-bbe4-3d690bb4ba29"],
Cell[242522, 4716, 2728, 69, 141, "Output",ExpressionUUID->"afd85425-62fc-4cbe-b4ec-58a330f285db"]
}, Open  ]],
Cell[CellGroupData[{
Cell[245287, 4790, 401, 8, 31, "Input",ExpressionUUID->"a31ed843-294f-407a-a131-a0fc6c8994fd"],
Cell[245691, 4800, 8595, 192, 496, "Output",ExpressionUUID->"aa3ad833-c01d-44a1-a721-2344b673c1a8"]
}, Open  ]],
Cell[254301, 4995, 199, 3, 38, "Text",ExpressionUUID->"ef691abc-d69d-4fbc-ac0d-ff6784b6e37b"],
Cell[254503, 5000, 518, 12, 31, "Input",ExpressionUUID->"c3697bbb-cd56-40a4-93de-cea28ed32f0e"],
Cell[255024, 5014, 812, 19, 31, "Input",ExpressionUUID->"7f62eda1-3c0b-407c-a08b-d18c2c93ccec"],
Cell[255839, 5035, 364, 8, 31, "Input",ExpressionUUID->"88d360dd-dac2-412c-aa09-791ff1e2a4ff"],
Cell[256206, 5045, 535, 12, 31, "Input",ExpressionUUID->"74d28f7d-987c-4f65-b3c9-d804c565f631"],
Cell[256744, 5059, 188, 3, 38, "Text",ExpressionUUID->"0dd756a2-321a-4c55-8b9e-139c2354cdd9"],
Cell[256935, 5064, 1095, 26, 50, "Input",ExpressionUUID->"bf051e52-95e4-411d-86ba-2c7a63025fd6"],
Cell[CellGroupData[{
Cell[258055, 5094, 257, 4, 31, "Input",ExpressionUUID->"8ed9a95f-352b-42a6-9405-04ef4d80e29c"],
Cell[258315, 5100, 1834, 48, 78, "Output",ExpressionUUID->"ac052bd9-954e-48ac-9d5a-4b4d3711a025"]
}, Open  ]],
Cell[CellGroupData[{
Cell[260186, 5153, 771, 17, 35, "Input",ExpressionUUID->"57759d25-528b-4e58-9de0-473f0e7fa7ba"],
Cell[260960, 5172, 565, 15, 35, "Output",ExpressionUUID->"a8042aec-f97c-4fda-bd2c-426d7d09c714"]
}, Open  ]],
Cell[261540, 5190, 660, 17, 63, "Text",ExpressionUUID->"fa2fed76-7ef8-45bb-88bf-f7dad0734bb5"],
Cell[CellGroupData[{
Cell[262225, 5211, 442, 11, 31, "Input",ExpressionUUID->"4bb2228b-5c54-468b-8f0d-318d0a1e1722"],
Cell[262670, 5224, 333, 8, 35, "Output",ExpressionUUID->"8f6d28b2-86bd-4150-b0e7-1c9703ad8ea3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[263040, 5237, 730, 18, 31, "Input",ExpressionUUID->"12acf138-a12c-46d4-90ee-cb6bda9bf8fc"],
Cell[263773, 5257, 220, 4, 35, "Output",ExpressionUUID->"4d857442-8dcc-4f86-b6c7-55e6ead33a27"]
}, Open  ]],
Cell[264008, 5264, 208, 4, 38, "Text",ExpressionUUID->"3cdd876a-61f0-4c1e-a3e6-e20a8bdb5b3d"],
Cell[CellGroupData[{
Cell[264241, 5272, 773, 21, 31, "Input",ExpressionUUID->"e74cbda6-4468-43da-87fc-af120b2c9a1d"],
Cell[265017, 5295, 372, 9, 35, "Output",ExpressionUUID->"082d1184-3d7a-4836-8ccc-685be0fe3509"]
}, Open  ]],
Cell[CellGroupData[{
Cell[265426, 5309, 1101, 27, 73, "Input",ExpressionUUID->"9ac46b35-a8c8-4fb0-8acc-7c9eb3da12f9"],
Cell[266530, 5338, 14842, 305, 496, "Output",ExpressionUUID->"c2b5b3ad-1126-4c83-a1bc-4ba95bdcf2e9"]
}, Open  ]],
Cell[281387, 5646, 185, 3, 38, "Text",ExpressionUUID->"2c5cf1ec-d97d-4d2c-bc13-067fa2c68da3"],
Cell[CellGroupData[{
Cell[281597, 5653, 702, 20, 31, "Input",ExpressionUUID->"739518e8-41fe-498f-8b1a-d648f3d8a6fb"],
Cell[282302, 5675, 381, 9, 35, "Output",ExpressionUUID->"7bbdaf1e-ece4-4cb7-a7a4-c16b3ad0bd12"]
}, Open  ]],
Cell[CellGroupData[{
Cell[282720, 5689, 1269, 29, 94, "Input",ExpressionUUID->"8c0a27cd-0ef5-4831-b3aa-cb1a23f67122"],
Cell[283992, 5720, 64665, 1124, 496, "Output",ExpressionUUID->"8ed755ef-3a70-4692-a9a6-fc58e77b7721"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[348706, 6850, 188, 3, 59, "Subsection",ExpressionUUID->"46fc5f4c-3ffa-48b9-b86e-56250f6201ff"],
Cell[348897, 6855, 645, 17, 65, "Text",ExpressionUUID->"6a498b52-ba54-4e92-916a-0a93b2a9eda4"],
Cell[349545, 6874, 547, 15, 35, "Input",ExpressionUUID->"6861ff20-3faf-41d4-9b08-460b06dff3b8"],
Cell[350095, 6891, 362, 8, 31, "Input",ExpressionUUID->"e9c83070-caa9-4aa8-b412-39a8ec08725e"],
Cell[350460, 6901, 232, 6, 38, "Text",ExpressionUUID->"38d37acc-0bdb-4c4f-991d-7486c167803f"],
Cell[350695, 6909, 575, 14, 31, "Input",ExpressionUUID->"3397a542-4cbb-467f-b59f-150bb2a6caf0"],
Cell[351273, 6925, 873, 21, 31, "Input",ExpressionUUID->"9c85da43-9e4f-4a00-8f3b-7699cf29f1da"],
Cell[352149, 6948, 368, 9, 31, "Input",ExpressionUUID->"50633e20-1ff8-4749-85f5-888a52caad1d"],
Cell[352520, 6959, 539, 13, 31, "Input",ExpressionUUID->"b230f7f3-e6b6-4875-8729-d458c00b19f8"],
Cell[353062, 6974, 1200, 28, 50, "Input",ExpressionUUID->"4ec81ba1-354b-4de1-9c11-a62b8f0849fe"],
Cell[354265, 7004, 312, 6, 31, "Input",ExpressionUUID->"a051ad17-0515-473b-80d8-7f7d0fd25b11"],
Cell[354580, 7012, 826, 19, 35, "Input",ExpressionUUID->"f7e4c92a-2ff1-4321-9d6e-4b45ea73c2b5"],
Cell[355409, 7033, 681, 18, 63, "Text",ExpressionUUID->"fb1441ae-dd99-4725-a8f5-f79776112d7c"],
Cell[356093, 7053, 558, 14, 31, "Input",ExpressionUUID->"71f2efef-129b-4c6a-a3ee-630dc2dfaec7"],
Cell[356654, 7069, 893, 21, 31, "Input",ExpressionUUID->"58bf686c-6ec9-4e53-819a-8cc46e29f9cb"],
Cell[357550, 7092, 208, 4, 38, "Text",ExpressionUUID->"432d1d91-2cf6-43da-9e08-9c1be9cb08ec"],
Cell[357761, 7098, 873, 23, 31, "Input",ExpressionUUID->"aa1c82e1-22dc-4e7c-8d15-f8eb5cb588e2"],
Cell[358637, 7123, 1256, 30, 52, "Input",ExpressionUUID->"898703ac-1d6e-4d87-8310-8111ca61d604"],
Cell[359896, 7155, 185, 3, 38, "Text",ExpressionUUID->"5f1c4167-382c-42bf-83ff-ef71614c9388"],
Cell[360084, 7160, 1809, 46, 94, "Input",ExpressionUUID->"89813e30-a99b-4f8d-bcfa-70fb7b421378"]
}, Open  ]],
Cell[CellGroupData[{
Cell[361930, 7211, 185, 3, 59, "Subsection",ExpressionUUID->"9e25d241-1cf9-4572-b6f8-5b01afad8606"],
Cell[362118, 7216, 1311, 41, 65, "Text",ExpressionUUID->"1139c56a-36cd-4f56-843f-66c2dfee1852"],
Cell[363432, 7259, 825, 25, 35, "Input",ExpressionUUID->"bcdb7656-8607-4085-8be7-daab6e8116ea"],
Cell[364260, 7286, 454, 12, 38, "Text",ExpressionUUID->"db335bfd-2d20-4a9a-8c3f-e2e587fd670b"],
Cell[364717, 7300, 284, 6, 31, "Input",ExpressionUUID->"d4172929-328c-46b5-8529-93ed52dad09c"],
Cell[365004, 7308, 925, 21, 31, "Input",ExpressionUUID->"f888ebbe-3dbe-4a1c-9a5d-f3b0253ef824"],
Cell[365932, 7331, 419, 10, 31, "Input",ExpressionUUID->"07b8b231-f999-4cc0-a2c6-08204cd05d0b"],
Cell[366354, 7343, 592, 14, 31, "Input",ExpressionUUID->"7f505562-da48-4589-9029-42d8b2edfbe4"],
Cell[366949, 7359, 1222, 33, 73, "Input",ExpressionUUID->"bf2c9c3e-cc67-4e70-9f72-9aa920fcffd7"],
Cell[368174, 7394, 1012, 22, 31, "Input",ExpressionUUID->"1cd62041-111f-4040-bd67-05009c5e6894"],
Cell[369189, 7418, 214, 4, 31, "Input",ExpressionUUID->"e4e494fc-1cec-4394-90d2-c8e4b292480d"],
Cell[369406, 7424, 332, 7, 63, "Text",ExpressionUUID->"c0803504-b416-4ab1-b175-a69e65a4abcc"],
Cell[369741, 7433, 510, 11, 38, "Text",ExpressionUUID->"c8ffbf39-23bb-4001-b68c-b0e23d0cfc09"],
Cell[370254, 7446, 950, 27, 31, "Input",ExpressionUUID->"71b691c1-88fc-400a-be30-d754d5019820"],
Cell[371207, 7475, 263, 6, 38, "Text",ExpressionUUID->"3034010f-9087-4dd8-8218-64d48a28f9d0"],
Cell[371473, 7483, 2195, 54, 115, "Input",ExpressionUUID->"0b1f5d5b-beaf-4a54-95aa-b5b374dd163b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[373705, 7542, 163, 3, 59, "Subsection",ExpressionUUID->"a3305560-56b0-42d2-b21f-f613acc54773"],
Cell[373871, 7547, 368, 7, 63, "Text",ExpressionUUID->"1a657693-4fa5-40a8-841d-52ff5cbb44b1"],
Cell[374242, 7556, 1332, 38, 52, "Input",ExpressionUUID->"ee0831d7-7c77-4b86-9db6-cc650f7a3acd"],
Cell[CellGroupData[{
Cell[375599, 7598, 261, 6, 31, "Input",ExpressionUUID->"fbc83d76-0e9f-4a9f-88de-167eb3d13fa1"],
Cell[375863, 7606, 3210, 74, 269, "Output",ExpressionUUID->"29939fad-16b8-4a37-945c-aa975330cde5"]
}, Open  ]],
Cell[379088, 7683, 755, 15, 114, "Text",ExpressionUUID->"eb4a4c44-8f19-4349-be9f-b4c29ed20b24"],
Cell[379846, 7700, 186, 3, 38, "Text",ExpressionUUID->"3d51c64a-579f-48d6-909a-38dd50116918"],
Cell[CellGroupData[{
Cell[380057, 7707, 689, 14, 31, "Input",ExpressionUUID->"42b24b98-a7b8-477c-bb4a-413791f75711"],
Cell[380749, 7723, 46656, 882, 71, "Output",ExpressionUUID->"f920c46c-2eb8-4be2-9155-1cfd6a98b2b6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[427442, 8610, 1145, 29, 73, "Input",ExpressionUUID->"0b019102-5e97-46f9-834a-232162dbc756"],
Cell[428590, 8641, 12658, 237, 411, "Output",ExpressionUUID->"2a9ff521-712e-4468-955c-9930457b61d2"]
}, Open  ]],
Cell[441263, 8881, 211, 5, 38, "Text",ExpressionUUID->"af4083e9-c97a-4451-aa68-ef3827a8545a"],
Cell[441477, 8888, 717, 15, 73, "Input",ExpressionUUID->"d547bbb3-775d-439b-99b1-adc2c8e56e99"],
Cell[442197, 8905, 1200, 30, 73, "Input",ExpressionUUID->"83f37290-0f9d-4d15-bcd9-512ac8d6d8f3"],
Cell[443400, 8937, 247, 4, 38, "Text",ExpressionUUID->"b13bba6c-3616-4f39-992f-cb29a2e45d59"],
Cell[443650, 8943, 868, 19, 135, "Input",ExpressionUUID->"cb03731a-875c-440e-929e-3d85c43c45ed"],
Cell[444521, 8964, 1051, 28, 73, "Input",ExpressionUUID->"e1fba570-e6ea-4a26-beb9-071d5b74976d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[445621, 8998, 227, 5, 116, "Section",ExpressionUUID->"5b7456a3-1a2f-41f1-a5be-9904c63118e1"],
Cell[445851, 9005, 302, 6, 63, "Text",ExpressionUUID->"5ec8ac3d-447b-4953-ba0e-0deec8bb5628"],
Cell[446156, 9013, 539, 12, 31, "Input",ExpressionUUID->"d1d261aa-728b-454d-a9da-65ca88505bf4"],
Cell[446698, 9027, 589, 13, 31, "Input",ExpressionUUID->"2f096863-4844-4fb7-8fb2-292c99e75edd"],
Cell[447290, 9042, 331, 8, 31, "Input",ExpressionUUID->"9ba4ef03-b0b3-474c-9509-d5ee898dbc93"],
Cell[447624, 9052, 278, 6, 38, "Text",ExpressionUUID->"eaa048fa-eb2a-4e80-83d6-d4ea0b4f7340"],
Cell[447905, 9060, 346, 8, 31, "Input",ExpressionUUID->"ac76cc91-1e77-4fc7-a877-1839f263084e"],
Cell[448254, 9070, 468, 10, 31, "Input",ExpressionUUID->"e8270b54-cd9c-495c-964f-9dfea30d505b"],
Cell[448725, 9082, 262, 5, 31, "Input",ExpressionUUID->"89d666bc-740a-4a50-8bc0-3c46d014fce3"],
Cell[448990, 9089, 11039, 202, 38, "Input",ExpressionUUID->"b6556ac8-ecb3-4151-825a-486cd1f15cab"],
Cell[460032, 9293, 251, 6, 38, "Text",ExpressionUUID->"c1843b7e-da22-4305-b0d9-50f9042468f7"],
Cell[460286, 9301, 695, 17, 31, "Input",ExpressionUUID->"e527a159-0ae9-46e8-a0ed-195df370dc9a"],
Cell[460984, 9320, 382, 8, 63, "Text",ExpressionUUID->"413ee70e-ba3b-4b17-afd8-cc7cd2cdabec"],
Cell[461369, 9330, 419, 9, 31, "Input",ExpressionUUID->"686074fc-3dfc-4292-a711-2bb991918a9c"],
Cell[461791, 9341, 490, 11, 31, "Input",ExpressionUUID->"a5816e01-1698-4dba-b99d-bb9944b45536",
 CellID->1905138556],
Cell[462284, 9354, 220, 4, 31, "Input",ExpressionUUID->"e549e4b2-f75f-42d6-af30-3a77c970fcb5"],
Cell[462507, 9360, 251, 6, 38, "Text",ExpressionUUID->"9e2b11b4-e5ab-44c7-bc3a-805813741f8d"],
Cell[462761, 9368, 748, 18, 31, "Input",ExpressionUUID->"e8c37099-d32c-4d05-a1d4-55938e87535d"],
Cell[463512, 9388, 177, 3, 38, "Text",ExpressionUUID->"54ec42a6-53b3-4bb2-b07b-d6b50541c19f"],
Cell[463692, 9393, 622, 14, 31, "Input",ExpressionUUID->"ffb1ea3a-9149-4f71-93f3-7a3951907207"]
}, Open  ]]
}, Open  ]]
}
]
*)

